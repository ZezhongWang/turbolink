#if defined(_MSC_VER)
  #pragma warning (disable:4946) // reinterpret_cast used between related classes: 'class1' and 'class2'
#endif
// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: authzed/api/v1/schema_service.proto
#ifndef GRPC_authzed_2fapi_2fv1_2fschema_5fservice_2eproto__INCLUDED
#define GRPC_authzed_2fapi_2fv1_2fschema_5fservice_2eproto__INCLUDED

#include "pb/authzed/api/v1/schema_service.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace authzed {
namespace api {
namespace v1 {

// SchemaService implements operations on a Permissions System's Schema.
class SchemaService final {
 public:
  static constexpr char const* service_full_name() {
    return "authzed.api.v1.SchemaService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Read returns the current Object Definitions for a Permissions System.
    // 
    // Errors include:
    // - INVALID_ARGUMENT: a provided value has failed to semantically validate
    // - NOT_FOUND: no schema has been defined
    virtual ::grpc::Status ReadSchema(::grpc::ClientContext* context, const ::authzed::api::v1::ReadSchemaRequest& request, ::authzed::api::v1::ReadSchemaResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::authzed::api::v1::ReadSchemaResponse>> AsyncReadSchema(::grpc::ClientContext* context, const ::authzed::api::v1::ReadSchemaRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::authzed::api::v1::ReadSchemaResponse>>(AsyncReadSchemaRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::authzed::api::v1::ReadSchemaResponse>> PrepareAsyncReadSchema(::grpc::ClientContext* context, const ::authzed::api::v1::ReadSchemaRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::authzed::api::v1::ReadSchemaResponse>>(PrepareAsyncReadSchemaRaw(context, request, cq));
    }
    // Write overwrites the current Object Definitions for a Permissions System.
    virtual ::grpc::Status WriteSchema(::grpc::ClientContext* context, const ::authzed::api::v1::WriteSchemaRequest& request, ::authzed::api::v1::WriteSchemaResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::authzed::api::v1::WriteSchemaResponse>> AsyncWriteSchema(::grpc::ClientContext* context, const ::authzed::api::v1::WriteSchemaRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::authzed::api::v1::WriteSchemaResponse>>(AsyncWriteSchemaRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::authzed::api::v1::WriteSchemaResponse>> PrepareAsyncWriteSchema(::grpc::ClientContext* context, const ::authzed::api::v1::WriteSchemaRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::authzed::api::v1::WriteSchemaResponse>>(PrepareAsyncWriteSchemaRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Read returns the current Object Definitions for a Permissions System.
      // 
      // Errors include:
      // - INVALID_ARGUMENT: a provided value has failed to semantically validate
      // - NOT_FOUND: no schema has been defined
      virtual void ReadSchema(::grpc::ClientContext* context, const ::authzed::api::v1::ReadSchemaRequest* request, ::authzed::api::v1::ReadSchemaResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReadSchema(::grpc::ClientContext* context, const ::authzed::api::v1::ReadSchemaRequest* request, ::authzed::api::v1::ReadSchemaResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Write overwrites the current Object Definitions for a Permissions System.
      virtual void WriteSchema(::grpc::ClientContext* context, const ::authzed::api::v1::WriteSchemaRequest* request, ::authzed::api::v1::WriteSchemaResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void WriteSchema(::grpc::ClientContext* context, const ::authzed::api::v1::WriteSchemaRequest* request, ::authzed::api::v1::WriteSchemaResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::authzed::api::v1::ReadSchemaResponse>* AsyncReadSchemaRaw(::grpc::ClientContext* context, const ::authzed::api::v1::ReadSchemaRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::authzed::api::v1::ReadSchemaResponse>* PrepareAsyncReadSchemaRaw(::grpc::ClientContext* context, const ::authzed::api::v1::ReadSchemaRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::authzed::api::v1::WriteSchemaResponse>* AsyncWriteSchemaRaw(::grpc::ClientContext* context, const ::authzed::api::v1::WriteSchemaRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::authzed::api::v1::WriteSchemaResponse>* PrepareAsyncWriteSchemaRaw(::grpc::ClientContext* context, const ::authzed::api::v1::WriteSchemaRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status ReadSchema(::grpc::ClientContext* context, const ::authzed::api::v1::ReadSchemaRequest& request, ::authzed::api::v1::ReadSchemaResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::authzed::api::v1::ReadSchemaResponse>> AsyncReadSchema(::grpc::ClientContext* context, const ::authzed::api::v1::ReadSchemaRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::authzed::api::v1::ReadSchemaResponse>>(AsyncReadSchemaRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::authzed::api::v1::ReadSchemaResponse>> PrepareAsyncReadSchema(::grpc::ClientContext* context, const ::authzed::api::v1::ReadSchemaRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::authzed::api::v1::ReadSchemaResponse>>(PrepareAsyncReadSchemaRaw(context, request, cq));
    }
    ::grpc::Status WriteSchema(::grpc::ClientContext* context, const ::authzed::api::v1::WriteSchemaRequest& request, ::authzed::api::v1::WriteSchemaResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::authzed::api::v1::WriteSchemaResponse>> AsyncWriteSchema(::grpc::ClientContext* context, const ::authzed::api::v1::WriteSchemaRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::authzed::api::v1::WriteSchemaResponse>>(AsyncWriteSchemaRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::authzed::api::v1::WriteSchemaResponse>> PrepareAsyncWriteSchema(::grpc::ClientContext* context, const ::authzed::api::v1::WriteSchemaRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::authzed::api::v1::WriteSchemaResponse>>(PrepareAsyncWriteSchemaRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void ReadSchema(::grpc::ClientContext* context, const ::authzed::api::v1::ReadSchemaRequest* request, ::authzed::api::v1::ReadSchemaResponse* response, std::function<void(::grpc::Status)>) override;
      void ReadSchema(::grpc::ClientContext* context, const ::authzed::api::v1::ReadSchemaRequest* request, ::authzed::api::v1::ReadSchemaResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void WriteSchema(::grpc::ClientContext* context, const ::authzed::api::v1::WriteSchemaRequest* request, ::authzed::api::v1::WriteSchemaResponse* response, std::function<void(::grpc::Status)>) override;
      void WriteSchema(::grpc::ClientContext* context, const ::authzed::api::v1::WriteSchemaRequest* request, ::authzed::api::v1::WriteSchemaResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::authzed::api::v1::ReadSchemaResponse>* AsyncReadSchemaRaw(::grpc::ClientContext* context, const ::authzed::api::v1::ReadSchemaRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::authzed::api::v1::ReadSchemaResponse>* PrepareAsyncReadSchemaRaw(::grpc::ClientContext* context, const ::authzed::api::v1::ReadSchemaRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::authzed::api::v1::WriteSchemaResponse>* AsyncWriteSchemaRaw(::grpc::ClientContext* context, const ::authzed::api::v1::WriteSchemaRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::authzed::api::v1::WriteSchemaResponse>* PrepareAsyncWriteSchemaRaw(::grpc::ClientContext* context, const ::authzed::api::v1::WriteSchemaRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ReadSchema_;
    const ::grpc::internal::RpcMethod rpcmethod_WriteSchema_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Read returns the current Object Definitions for a Permissions System.
    // 
    // Errors include:
    // - INVALID_ARGUMENT: a provided value has failed to semantically validate
    // - NOT_FOUND: no schema has been defined
    virtual ::grpc::Status ReadSchema(::grpc::ServerContext* context, const ::authzed::api::v1::ReadSchemaRequest* request, ::authzed::api::v1::ReadSchemaResponse* response);
    // Write overwrites the current Object Definitions for a Permissions System.
    virtual ::grpc::Status WriteSchema(::grpc::ServerContext* context, const ::authzed::api::v1::WriteSchemaRequest* request, ::authzed::api::v1::WriteSchemaResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ReadSchema : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReadSchema() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ReadSchema() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadSchema(::grpc::ServerContext* /*context*/, const ::authzed::api::v1::ReadSchemaRequest* /*request*/, ::authzed::api::v1::ReadSchemaResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReadSchema(::grpc::ServerContext* context, ::authzed::api::v1::ReadSchemaRequest* request, ::grpc::ServerAsyncResponseWriter< ::authzed::api::v1::ReadSchemaResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_WriteSchema : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_WriteSchema() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_WriteSchema() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteSchema(::grpc::ServerContext* /*context*/, const ::authzed::api::v1::WriteSchemaRequest* /*request*/, ::authzed::api::v1::WriteSchemaResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWriteSchema(::grpc::ServerContext* context, ::authzed::api::v1::WriteSchemaRequest* request, ::grpc::ServerAsyncResponseWriter< ::authzed::api::v1::WriteSchemaResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ReadSchema<WithAsyncMethod_WriteSchema<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_ReadSchema : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ReadSchema() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::authzed::api::v1::ReadSchemaRequest, ::authzed::api::v1::ReadSchemaResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::authzed::api::v1::ReadSchemaRequest* request, ::authzed::api::v1::ReadSchemaResponse* response) { return this->ReadSchema(context, request, response); }));}
    void SetMessageAllocatorFor_ReadSchema(
        ::grpc::MessageAllocator< ::authzed::api::v1::ReadSchemaRequest, ::authzed::api::v1::ReadSchemaResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::authzed::api::v1::ReadSchemaRequest, ::authzed::api::v1::ReadSchemaResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ReadSchema() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadSchema(::grpc::ServerContext* /*context*/, const ::authzed::api::v1::ReadSchemaRequest* /*request*/, ::authzed::api::v1::ReadSchemaResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReadSchema(
      ::grpc::CallbackServerContext* /*context*/, const ::authzed::api::v1::ReadSchemaRequest* /*request*/, ::authzed::api::v1::ReadSchemaResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_WriteSchema : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_WriteSchema() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::authzed::api::v1::WriteSchemaRequest, ::authzed::api::v1::WriteSchemaResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::authzed::api::v1::WriteSchemaRequest* request, ::authzed::api::v1::WriteSchemaResponse* response) { return this->WriteSchema(context, request, response); }));}
    void SetMessageAllocatorFor_WriteSchema(
        ::grpc::MessageAllocator< ::authzed::api::v1::WriteSchemaRequest, ::authzed::api::v1::WriteSchemaResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::authzed::api::v1::WriteSchemaRequest, ::authzed::api::v1::WriteSchemaResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_WriteSchema() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteSchema(::grpc::ServerContext* /*context*/, const ::authzed::api::v1::WriteSchemaRequest* /*request*/, ::authzed::api::v1::WriteSchemaResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* WriteSchema(
      ::grpc::CallbackServerContext* /*context*/, const ::authzed::api::v1::WriteSchemaRequest* /*request*/, ::authzed::api::v1::WriteSchemaResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_ReadSchema<WithCallbackMethod_WriteSchema<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ReadSchema : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReadSchema() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ReadSchema() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadSchema(::grpc::ServerContext* /*context*/, const ::authzed::api::v1::ReadSchemaRequest* /*request*/, ::authzed::api::v1::ReadSchemaResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_WriteSchema : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_WriteSchema() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_WriteSchema() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteSchema(::grpc::ServerContext* /*context*/, const ::authzed::api::v1::WriteSchemaRequest* /*request*/, ::authzed::api::v1::WriteSchemaResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReadSchema : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReadSchema() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ReadSchema() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadSchema(::grpc::ServerContext* /*context*/, const ::authzed::api::v1::ReadSchemaRequest* /*request*/, ::authzed::api::v1::ReadSchemaResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReadSchema(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_WriteSchema : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_WriteSchema() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_WriteSchema() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteSchema(::grpc::ServerContext* /*context*/, const ::authzed::api::v1::WriteSchemaRequest* /*request*/, ::authzed::api::v1::WriteSchemaResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWriteSchema(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ReadSchema : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ReadSchema() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReadSchema(context, request, response); }));
    }
    ~WithRawCallbackMethod_ReadSchema() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadSchema(::grpc::ServerContext* /*context*/, const ::authzed::api::v1::ReadSchemaRequest* /*request*/, ::authzed::api::v1::ReadSchemaResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReadSchema(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_WriteSchema : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_WriteSchema() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->WriteSchema(context, request, response); }));
    }
    ~WithRawCallbackMethod_WriteSchema() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteSchema(::grpc::ServerContext* /*context*/, const ::authzed::api::v1::WriteSchemaRequest* /*request*/, ::authzed::api::v1::WriteSchemaResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* WriteSchema(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReadSchema : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReadSchema() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::authzed::api::v1::ReadSchemaRequest, ::authzed::api::v1::ReadSchemaResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::authzed::api::v1::ReadSchemaRequest, ::authzed::api::v1::ReadSchemaResponse>* streamer) {
                       return this->StreamedReadSchema(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReadSchema() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReadSchema(::grpc::ServerContext* /*context*/, const ::authzed::api::v1::ReadSchemaRequest* /*request*/, ::authzed::api::v1::ReadSchemaResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReadSchema(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::authzed::api::v1::ReadSchemaRequest,::authzed::api::v1::ReadSchemaResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_WriteSchema : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_WriteSchema() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::authzed::api::v1::WriteSchemaRequest, ::authzed::api::v1::WriteSchemaResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::authzed::api::v1::WriteSchemaRequest, ::authzed::api::v1::WriteSchemaResponse>* streamer) {
                       return this->StreamedWriteSchema(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_WriteSchema() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status WriteSchema(::grpc::ServerContext* /*context*/, const ::authzed::api::v1::WriteSchemaRequest* /*request*/, ::authzed::api::v1::WriteSchemaResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedWriteSchema(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::authzed::api::v1::WriteSchemaRequest,::authzed::api::v1::WriteSchemaResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ReadSchema<WithStreamedUnaryMethod_WriteSchema<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ReadSchema<WithStreamedUnaryMethod_WriteSchema<Service > > StreamedService;
};

}  // namespace v1
}  // namespace api
}  // namespace authzed


#endif  // GRPC_authzed_2fapi_2fv1_2fschema_5fservice_2eproto__INCLUDED
