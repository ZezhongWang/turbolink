#if defined(_MSC_VER)
  #pragma warning (disable:4946) // reinterpret_cast used between related classes: 'class1' and 'class2'
#endif
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: authzed/api/v1/error_reason.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_authzed_2fapi_2fv1_2ferror_5freason_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_authzed_2fapi_2fv1_2ferror_5freason_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_authzed_2fapi_2fv1_2ferror_5freason_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_authzed_2fapi_2fv1_2ferror_5freason_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_authzed_2fapi_2fv1_2ferror_5freason_2eproto;
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE
namespace authzed {
namespace api {
namespace v1 {

enum ErrorReason : int {
  ERROR_REASON_UNSPECIFIED = 0,
  ERROR_REASON_SCHEMA_PARSE_ERROR = 1,
  ERROR_REASON_SCHEMA_TYPE_ERROR = 2,
  ERROR_REASON_UNKNOWN_DEFINITION = 3,
  ERROR_REASON_UNKNOWN_RELATION_OR_PERMISSION = 4,
  ERROR_REASON_TOO_MANY_UPDATES_IN_REQUEST = 5,
  ERROR_REASON_TOO_MANY_PRECONDITIONS_IN_REQUEST = 6,
  ERROR_REASON_WRITE_OR_DELETE_PRECONDITION_FAILURE = 7,
  ERROR_REASON_SERVICE_READ_ONLY = 8,
  ERROR_REASON_UNKNOWN_CAVEAT = 9,
  ERROR_REASON_INVALID_SUBJECT_TYPE = 10,
  ERROR_REASON_CAVEAT_PARAMETER_TYPE_ERROR = 11,
  ERROR_REASON_UPDATES_ON_SAME_RELATIONSHIP = 12,
  ERROR_REASON_CANNOT_UPDATE_PERMISSION = 13,
  ERROR_REASON_CAVEAT_EVALUATION_ERROR = 14,
  ErrorReason_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ErrorReason_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ErrorReason_IsValid(int value);
constexpr ErrorReason ErrorReason_MIN = ERROR_REASON_UNSPECIFIED;
constexpr ErrorReason ErrorReason_MAX = ERROR_REASON_CAVEAT_EVALUATION_ERROR;
constexpr int ErrorReason_ARRAYSIZE = ErrorReason_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ErrorReason_descriptor();
template<typename T>
inline const std::string& ErrorReason_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ErrorReason>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ErrorReason_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ErrorReason_descriptor(), enum_t_value);
}
inline bool ErrorReason_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ErrorReason* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ErrorReason>(
    ErrorReason_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace api
}  // namespace authzed

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::authzed::api::v1::ErrorReason> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::authzed::api::v1::ErrorReason>() {
  return ::authzed::api::v1::ErrorReason_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_authzed_2fapi_2fv1_2ferror_5freason_2eproto
