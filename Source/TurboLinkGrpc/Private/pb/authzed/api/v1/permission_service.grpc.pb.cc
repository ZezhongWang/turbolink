#if defined(_MSC_VER)
  #pragma warning (disable:4018) // 'expression' : signed/unsigned mismatch
  #pragma warning (disable:4065) // switch statement contains 'default' but no 'case' labels
  #pragma warning (disable:4146) // unary minus operator applied to unsigned type, result still unsigned
  #pragma warning (disable:4244) // 'conversion' conversion from 'type1' to 'type2', possible loss of data
  #pragma warning (disable:4251) // 'identifier' : class 'type' needs to have dll-interface to be used by clients of class 'type2'
  #pragma warning (disable:4267) // 'var' : conversion from 'size_t' to 'type', possible loss of data
  #pragma warning (disable:4305) // 'identifier' : truncation from 'type1' to 'type2'
  #pragma warning (disable:4307) // 'operator' : integral constant overflow
  #pragma warning (disable:4309) // 'conversion' : truncation of constant value
  #pragma warning (disable:4334) // 'operator' : result of 32-bit shift implicitly converted to 64 bits (was 64-bit shift intended?)
  #pragma warning (disable:4355) // 'this' : used in base member initializer list
  #pragma warning (disable:4506) // no definition for inline function 'function'
  #pragma warning (disable:4800) // 'type' : forcing value to bool 'true' or 'false' (performance warning)
  #pragma warning (disable:4996) // The compiler encountered a deprecated declaration.
  #pragma warning (disable:4125) // decimal digit terminates octal escape sequence
#endif
// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: authzed/api/v1/permission_service.proto

#include "pb/authzed/api/v1/permission_service.pb.h"
#include "pb/authzed/api/v1/permission_service.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace authzed {
namespace api {
namespace v1 {

static const char* PermissionsService_method_names[] = {
  "/authzed.api.v1.PermissionsService/ReadRelationships",
  "/authzed.api.v1.PermissionsService/WriteRelationships",
  "/authzed.api.v1.PermissionsService/DeleteRelationships",
  "/authzed.api.v1.PermissionsService/CheckPermission",
  "/authzed.api.v1.PermissionsService/ExpandPermissionTree",
  "/authzed.api.v1.PermissionsService/LookupResources",
  "/authzed.api.v1.PermissionsService/LookupSubjects",
};

std::unique_ptr< PermissionsService::Stub> PermissionsService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< PermissionsService::Stub> stub(new PermissionsService::Stub(channel, options));
  return stub;
}

PermissionsService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_ReadRelationships_(PermissionsService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_WriteRelationships_(PermissionsService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteRelationships_(PermissionsService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CheckPermission_(PermissionsService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExpandPermissionTree_(PermissionsService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LookupResources_(PermissionsService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_LookupSubjects_(PermissionsService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientReader< ::authzed::api::v1::ReadRelationshipsResponse>* PermissionsService::Stub::ReadRelationshipsRaw(::grpc::ClientContext* context, const ::authzed::api::v1::ReadRelationshipsRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::authzed::api::v1::ReadRelationshipsResponse>::Create(channel_.get(), rpcmethod_ReadRelationships_, context, request);
}

void PermissionsService::Stub::async::ReadRelationships(::grpc::ClientContext* context, const ::authzed::api::v1::ReadRelationshipsRequest* request, ::grpc::ClientReadReactor< ::authzed::api::v1::ReadRelationshipsResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::authzed::api::v1::ReadRelationshipsResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_ReadRelationships_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::authzed::api::v1::ReadRelationshipsResponse>* PermissionsService::Stub::AsyncReadRelationshipsRaw(::grpc::ClientContext* context, const ::authzed::api::v1::ReadRelationshipsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::authzed::api::v1::ReadRelationshipsResponse>::Create(channel_.get(), cq, rpcmethod_ReadRelationships_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::authzed::api::v1::ReadRelationshipsResponse>* PermissionsService::Stub::PrepareAsyncReadRelationshipsRaw(::grpc::ClientContext* context, const ::authzed::api::v1::ReadRelationshipsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::authzed::api::v1::ReadRelationshipsResponse>::Create(channel_.get(), cq, rpcmethod_ReadRelationships_, context, request, false, nullptr);
}

::grpc::Status PermissionsService::Stub::WriteRelationships(::grpc::ClientContext* context, const ::authzed::api::v1::WriteRelationshipsRequest& request, ::authzed::api::v1::WriteRelationshipsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::authzed::api::v1::WriteRelationshipsRequest, ::authzed::api::v1::WriteRelationshipsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_WriteRelationships_, context, request, response);
}

void PermissionsService::Stub::async::WriteRelationships(::grpc::ClientContext* context, const ::authzed::api::v1::WriteRelationshipsRequest* request, ::authzed::api::v1::WriteRelationshipsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::authzed::api::v1::WriteRelationshipsRequest, ::authzed::api::v1::WriteRelationshipsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_WriteRelationships_, context, request, response, std::move(f));
}

void PermissionsService::Stub::async::WriteRelationships(::grpc::ClientContext* context, const ::authzed::api::v1::WriteRelationshipsRequest* request, ::authzed::api::v1::WriteRelationshipsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_WriteRelationships_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::authzed::api::v1::WriteRelationshipsResponse>* PermissionsService::Stub::PrepareAsyncWriteRelationshipsRaw(::grpc::ClientContext* context, const ::authzed::api::v1::WriteRelationshipsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::authzed::api::v1::WriteRelationshipsResponse, ::authzed::api::v1::WriteRelationshipsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_WriteRelationships_, context, request);
}

::grpc::ClientAsyncResponseReader< ::authzed::api::v1::WriteRelationshipsResponse>* PermissionsService::Stub::AsyncWriteRelationshipsRaw(::grpc::ClientContext* context, const ::authzed::api::v1::WriteRelationshipsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncWriteRelationshipsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PermissionsService::Stub::DeleteRelationships(::grpc::ClientContext* context, const ::authzed::api::v1::DeleteRelationshipsRequest& request, ::authzed::api::v1::DeleteRelationshipsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::authzed::api::v1::DeleteRelationshipsRequest, ::authzed::api::v1::DeleteRelationshipsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteRelationships_, context, request, response);
}

void PermissionsService::Stub::async::DeleteRelationships(::grpc::ClientContext* context, const ::authzed::api::v1::DeleteRelationshipsRequest* request, ::authzed::api::v1::DeleteRelationshipsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::authzed::api::v1::DeleteRelationshipsRequest, ::authzed::api::v1::DeleteRelationshipsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteRelationships_, context, request, response, std::move(f));
}

void PermissionsService::Stub::async::DeleteRelationships(::grpc::ClientContext* context, const ::authzed::api::v1::DeleteRelationshipsRequest* request, ::authzed::api::v1::DeleteRelationshipsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteRelationships_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::authzed::api::v1::DeleteRelationshipsResponse>* PermissionsService::Stub::PrepareAsyncDeleteRelationshipsRaw(::grpc::ClientContext* context, const ::authzed::api::v1::DeleteRelationshipsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::authzed::api::v1::DeleteRelationshipsResponse, ::authzed::api::v1::DeleteRelationshipsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteRelationships_, context, request);
}

::grpc::ClientAsyncResponseReader< ::authzed::api::v1::DeleteRelationshipsResponse>* PermissionsService::Stub::AsyncDeleteRelationshipsRaw(::grpc::ClientContext* context, const ::authzed::api::v1::DeleteRelationshipsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteRelationshipsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PermissionsService::Stub::CheckPermission(::grpc::ClientContext* context, const ::authzed::api::v1::CheckPermissionRequest& request, ::authzed::api::v1::CheckPermissionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::authzed::api::v1::CheckPermissionRequest, ::authzed::api::v1::CheckPermissionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CheckPermission_, context, request, response);
}

void PermissionsService::Stub::async::CheckPermission(::grpc::ClientContext* context, const ::authzed::api::v1::CheckPermissionRequest* request, ::authzed::api::v1::CheckPermissionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::authzed::api::v1::CheckPermissionRequest, ::authzed::api::v1::CheckPermissionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CheckPermission_, context, request, response, std::move(f));
}

void PermissionsService::Stub::async::CheckPermission(::grpc::ClientContext* context, const ::authzed::api::v1::CheckPermissionRequest* request, ::authzed::api::v1::CheckPermissionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CheckPermission_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::authzed::api::v1::CheckPermissionResponse>* PermissionsService::Stub::PrepareAsyncCheckPermissionRaw(::grpc::ClientContext* context, const ::authzed::api::v1::CheckPermissionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::authzed::api::v1::CheckPermissionResponse, ::authzed::api::v1::CheckPermissionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CheckPermission_, context, request);
}

::grpc::ClientAsyncResponseReader< ::authzed::api::v1::CheckPermissionResponse>* PermissionsService::Stub::AsyncCheckPermissionRaw(::grpc::ClientContext* context, const ::authzed::api::v1::CheckPermissionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCheckPermissionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PermissionsService::Stub::ExpandPermissionTree(::grpc::ClientContext* context, const ::authzed::api::v1::ExpandPermissionTreeRequest& request, ::authzed::api::v1::ExpandPermissionTreeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::authzed::api::v1::ExpandPermissionTreeRequest, ::authzed::api::v1::ExpandPermissionTreeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ExpandPermissionTree_, context, request, response);
}

void PermissionsService::Stub::async::ExpandPermissionTree(::grpc::ClientContext* context, const ::authzed::api::v1::ExpandPermissionTreeRequest* request, ::authzed::api::v1::ExpandPermissionTreeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::authzed::api::v1::ExpandPermissionTreeRequest, ::authzed::api::v1::ExpandPermissionTreeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExpandPermissionTree_, context, request, response, std::move(f));
}

void PermissionsService::Stub::async::ExpandPermissionTree(::grpc::ClientContext* context, const ::authzed::api::v1::ExpandPermissionTreeRequest* request, ::authzed::api::v1::ExpandPermissionTreeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExpandPermissionTree_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::authzed::api::v1::ExpandPermissionTreeResponse>* PermissionsService::Stub::PrepareAsyncExpandPermissionTreeRaw(::grpc::ClientContext* context, const ::authzed::api::v1::ExpandPermissionTreeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::authzed::api::v1::ExpandPermissionTreeResponse, ::authzed::api::v1::ExpandPermissionTreeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ExpandPermissionTree_, context, request);
}

::grpc::ClientAsyncResponseReader< ::authzed::api::v1::ExpandPermissionTreeResponse>* PermissionsService::Stub::AsyncExpandPermissionTreeRaw(::grpc::ClientContext* context, const ::authzed::api::v1::ExpandPermissionTreeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExpandPermissionTreeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::authzed::api::v1::LookupResourcesResponse>* PermissionsService::Stub::LookupResourcesRaw(::grpc::ClientContext* context, const ::authzed::api::v1::LookupResourcesRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::authzed::api::v1::LookupResourcesResponse>::Create(channel_.get(), rpcmethod_LookupResources_, context, request);
}

void PermissionsService::Stub::async::LookupResources(::grpc::ClientContext* context, const ::authzed::api::v1::LookupResourcesRequest* request, ::grpc::ClientReadReactor< ::authzed::api::v1::LookupResourcesResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::authzed::api::v1::LookupResourcesResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_LookupResources_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::authzed::api::v1::LookupResourcesResponse>* PermissionsService::Stub::AsyncLookupResourcesRaw(::grpc::ClientContext* context, const ::authzed::api::v1::LookupResourcesRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::authzed::api::v1::LookupResourcesResponse>::Create(channel_.get(), cq, rpcmethod_LookupResources_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::authzed::api::v1::LookupResourcesResponse>* PermissionsService::Stub::PrepareAsyncLookupResourcesRaw(::grpc::ClientContext* context, const ::authzed::api::v1::LookupResourcesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::authzed::api::v1::LookupResourcesResponse>::Create(channel_.get(), cq, rpcmethod_LookupResources_, context, request, false, nullptr);
}

::grpc::ClientReader< ::authzed::api::v1::LookupSubjectsResponse>* PermissionsService::Stub::LookupSubjectsRaw(::grpc::ClientContext* context, const ::authzed::api::v1::LookupSubjectsRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::authzed::api::v1::LookupSubjectsResponse>::Create(channel_.get(), rpcmethod_LookupSubjects_, context, request);
}

void PermissionsService::Stub::async::LookupSubjects(::grpc::ClientContext* context, const ::authzed::api::v1::LookupSubjectsRequest* request, ::grpc::ClientReadReactor< ::authzed::api::v1::LookupSubjectsResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::authzed::api::v1::LookupSubjectsResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_LookupSubjects_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::authzed::api::v1::LookupSubjectsResponse>* PermissionsService::Stub::AsyncLookupSubjectsRaw(::grpc::ClientContext* context, const ::authzed::api::v1::LookupSubjectsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::authzed::api::v1::LookupSubjectsResponse>::Create(channel_.get(), cq, rpcmethod_LookupSubjects_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::authzed::api::v1::LookupSubjectsResponse>* PermissionsService::Stub::PrepareAsyncLookupSubjectsRaw(::grpc::ClientContext* context, const ::authzed::api::v1::LookupSubjectsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::authzed::api::v1::LookupSubjectsResponse>::Create(channel_.get(), cq, rpcmethod_LookupSubjects_, context, request, false, nullptr);
}

PermissionsService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PermissionsService_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< PermissionsService::Service, ::authzed::api::v1::ReadRelationshipsRequest, ::authzed::api::v1::ReadRelationshipsResponse>(
          [](PermissionsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::authzed::api::v1::ReadRelationshipsRequest* req,
             ::grpc::ServerWriter<::authzed::api::v1::ReadRelationshipsResponse>* writer) {
               return service->ReadRelationships(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PermissionsService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PermissionsService::Service, ::authzed::api::v1::WriteRelationshipsRequest, ::authzed::api::v1::WriteRelationshipsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PermissionsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::authzed::api::v1::WriteRelationshipsRequest* req,
             ::authzed::api::v1::WriteRelationshipsResponse* resp) {
               return service->WriteRelationships(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PermissionsService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PermissionsService::Service, ::authzed::api::v1::DeleteRelationshipsRequest, ::authzed::api::v1::DeleteRelationshipsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PermissionsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::authzed::api::v1::DeleteRelationshipsRequest* req,
             ::authzed::api::v1::DeleteRelationshipsResponse* resp) {
               return service->DeleteRelationships(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PermissionsService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PermissionsService::Service, ::authzed::api::v1::CheckPermissionRequest, ::authzed::api::v1::CheckPermissionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PermissionsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::authzed::api::v1::CheckPermissionRequest* req,
             ::authzed::api::v1::CheckPermissionResponse* resp) {
               return service->CheckPermission(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PermissionsService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PermissionsService::Service, ::authzed::api::v1::ExpandPermissionTreeRequest, ::authzed::api::v1::ExpandPermissionTreeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PermissionsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::authzed::api::v1::ExpandPermissionTreeRequest* req,
             ::authzed::api::v1::ExpandPermissionTreeResponse* resp) {
               return service->ExpandPermissionTree(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PermissionsService_method_names[5],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< PermissionsService::Service, ::authzed::api::v1::LookupResourcesRequest, ::authzed::api::v1::LookupResourcesResponse>(
          [](PermissionsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::authzed::api::v1::LookupResourcesRequest* req,
             ::grpc::ServerWriter<::authzed::api::v1::LookupResourcesResponse>* writer) {
               return service->LookupResources(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PermissionsService_method_names[6],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< PermissionsService::Service, ::authzed::api::v1::LookupSubjectsRequest, ::authzed::api::v1::LookupSubjectsResponse>(
          [](PermissionsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::authzed::api::v1::LookupSubjectsRequest* req,
             ::grpc::ServerWriter<::authzed::api::v1::LookupSubjectsResponse>* writer) {
               return service->LookupSubjects(ctx, req, writer);
             }, this)));
}

PermissionsService::Service::~Service() {
}

::grpc::Status PermissionsService::Service::ReadRelationships(::grpc::ServerContext* context, const ::authzed::api::v1::ReadRelationshipsRequest* request, ::grpc::ServerWriter< ::authzed::api::v1::ReadRelationshipsResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PermissionsService::Service::WriteRelationships(::grpc::ServerContext* context, const ::authzed::api::v1::WriteRelationshipsRequest* request, ::authzed::api::v1::WriteRelationshipsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PermissionsService::Service::DeleteRelationships(::grpc::ServerContext* context, const ::authzed::api::v1::DeleteRelationshipsRequest* request, ::authzed::api::v1::DeleteRelationshipsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PermissionsService::Service::CheckPermission(::grpc::ServerContext* context, const ::authzed::api::v1::CheckPermissionRequest* request, ::authzed::api::v1::CheckPermissionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PermissionsService::Service::ExpandPermissionTree(::grpc::ServerContext* context, const ::authzed::api::v1::ExpandPermissionTreeRequest* request, ::authzed::api::v1::ExpandPermissionTreeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PermissionsService::Service::LookupResources(::grpc::ServerContext* context, const ::authzed::api::v1::LookupResourcesRequest* request, ::grpc::ServerWriter< ::authzed::api::v1::LookupResourcesResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PermissionsService::Service::LookupSubjects(::grpc::ServerContext* context, const ::authzed::api::v1::LookupSubjectsRequest* request, ::grpc::ServerWriter< ::authzed::api::v1::LookupSubjectsResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace authzed
}  // namespace api
}  // namespace v1

