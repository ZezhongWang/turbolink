// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: authzed/api/v1/permission_service.proto

#include "pb/authzed/api/v1/permission_service.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace authzed {
namespace api {
namespace v1 {
PROTOBUF_CONSTEXPR Consistency::Consistency(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.requirement_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ConsistencyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConsistencyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConsistencyDefaultTypeInternal() {}
  union {
    Consistency _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConsistencyDefaultTypeInternal _Consistency_default_instance_;
PROTOBUF_CONSTEXPR RelationshipFilter::RelationshipFilter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.resource_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.optional_resource_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.optional_relation_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.optional_subject_filter_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RelationshipFilterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RelationshipFilterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RelationshipFilterDefaultTypeInternal() {}
  union {
    RelationshipFilter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RelationshipFilterDefaultTypeInternal _RelationshipFilter_default_instance_;
PROTOBUF_CONSTEXPR SubjectFilter_RelationFilter::SubjectFilter_RelationFilter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.relation_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SubjectFilter_RelationFilterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubjectFilter_RelationFilterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubjectFilter_RelationFilterDefaultTypeInternal() {}
  union {
    SubjectFilter_RelationFilter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubjectFilter_RelationFilterDefaultTypeInternal _SubjectFilter_RelationFilter_default_instance_;
PROTOBUF_CONSTEXPR SubjectFilter::SubjectFilter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.subject_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.optional_subject_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.optional_relation_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SubjectFilterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubjectFilterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubjectFilterDefaultTypeInternal() {}
  union {
    SubjectFilter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubjectFilterDefaultTypeInternal _SubjectFilter_default_instance_;
PROTOBUF_CONSTEXPR ReadRelationshipsRequest::ReadRelationshipsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.consistency_)*/nullptr
  , /*decltype(_impl_.relationship_filter_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ReadRelationshipsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReadRelationshipsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReadRelationshipsRequestDefaultTypeInternal() {}
  union {
    ReadRelationshipsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReadRelationshipsRequestDefaultTypeInternal _ReadRelationshipsRequest_default_instance_;
PROTOBUF_CONSTEXPR ReadRelationshipsResponse::ReadRelationshipsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.read_at_)*/nullptr
  , /*decltype(_impl_.relationship_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ReadRelationshipsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReadRelationshipsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReadRelationshipsResponseDefaultTypeInternal() {}
  union {
    ReadRelationshipsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReadRelationshipsResponseDefaultTypeInternal _ReadRelationshipsResponse_default_instance_;
PROTOBUF_CONSTEXPR Precondition::Precondition(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.filter_)*/nullptr
  , /*decltype(_impl_.operation_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PreconditionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PreconditionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PreconditionDefaultTypeInternal() {}
  union {
    Precondition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PreconditionDefaultTypeInternal _Precondition_default_instance_;
PROTOBUF_CONSTEXPR WriteRelationshipsRequest::WriteRelationshipsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.updates_)*/{}
  , /*decltype(_impl_.optional_preconditions_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WriteRelationshipsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WriteRelationshipsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WriteRelationshipsRequestDefaultTypeInternal() {}
  union {
    WriteRelationshipsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WriteRelationshipsRequestDefaultTypeInternal _WriteRelationshipsRequest_default_instance_;
PROTOBUF_CONSTEXPR WriteRelationshipsResponse::WriteRelationshipsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.written_at_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WriteRelationshipsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WriteRelationshipsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WriteRelationshipsResponseDefaultTypeInternal() {}
  union {
    WriteRelationshipsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WriteRelationshipsResponseDefaultTypeInternal _WriteRelationshipsResponse_default_instance_;
PROTOBUF_CONSTEXPR DeleteRelationshipsRequest::DeleteRelationshipsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.optional_preconditions_)*/{}
  , /*decltype(_impl_.relationship_filter_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeleteRelationshipsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteRelationshipsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteRelationshipsRequestDefaultTypeInternal() {}
  union {
    DeleteRelationshipsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteRelationshipsRequestDefaultTypeInternal _DeleteRelationshipsRequest_default_instance_;
PROTOBUF_CONSTEXPR DeleteRelationshipsResponse::DeleteRelationshipsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.deleted_at_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeleteRelationshipsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteRelationshipsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteRelationshipsResponseDefaultTypeInternal() {}
  union {
    DeleteRelationshipsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteRelationshipsResponseDefaultTypeInternal _DeleteRelationshipsResponse_default_instance_;
PROTOBUF_CONSTEXPR CheckPermissionRequest::CheckPermissionRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.permission_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.consistency_)*/nullptr
  , /*decltype(_impl_.resource_)*/nullptr
  , /*decltype(_impl_.subject_)*/nullptr
  , /*decltype(_impl_.context_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CheckPermissionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CheckPermissionRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CheckPermissionRequestDefaultTypeInternal() {}
  union {
    CheckPermissionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CheckPermissionRequestDefaultTypeInternal _CheckPermissionRequest_default_instance_;
PROTOBUF_CONSTEXPR CheckPermissionResponse::CheckPermissionResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.checked_at_)*/nullptr
  , /*decltype(_impl_.partial_caveat_info_)*/nullptr
  , /*decltype(_impl_.permissionship_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CheckPermissionResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CheckPermissionResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CheckPermissionResponseDefaultTypeInternal() {}
  union {
    CheckPermissionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CheckPermissionResponseDefaultTypeInternal _CheckPermissionResponse_default_instance_;
PROTOBUF_CONSTEXPR ExpandPermissionTreeRequest::ExpandPermissionTreeRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.permission_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.consistency_)*/nullptr
  , /*decltype(_impl_.resource_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ExpandPermissionTreeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExpandPermissionTreeRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExpandPermissionTreeRequestDefaultTypeInternal() {}
  union {
    ExpandPermissionTreeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExpandPermissionTreeRequestDefaultTypeInternal _ExpandPermissionTreeRequest_default_instance_;
PROTOBUF_CONSTEXPR ExpandPermissionTreeResponse::ExpandPermissionTreeResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.expanded_at_)*/nullptr
  , /*decltype(_impl_.tree_root_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ExpandPermissionTreeResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExpandPermissionTreeResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExpandPermissionTreeResponseDefaultTypeInternal() {}
  union {
    ExpandPermissionTreeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExpandPermissionTreeResponseDefaultTypeInternal _ExpandPermissionTreeResponse_default_instance_;
PROTOBUF_CONSTEXPR LookupResourcesRequest::LookupResourcesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.resource_object_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.permission_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.consistency_)*/nullptr
  , /*decltype(_impl_.subject_)*/nullptr
  , /*decltype(_impl_.context_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LookupResourcesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LookupResourcesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LookupResourcesRequestDefaultTypeInternal() {}
  union {
    LookupResourcesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LookupResourcesRequestDefaultTypeInternal _LookupResourcesRequest_default_instance_;
PROTOBUF_CONSTEXPR LookupResourcesResponse::LookupResourcesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.resource_object_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.looked_up_at_)*/nullptr
  , /*decltype(_impl_.partial_caveat_info_)*/nullptr
  , /*decltype(_impl_.permissionship_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LookupResourcesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LookupResourcesResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LookupResourcesResponseDefaultTypeInternal() {}
  union {
    LookupResourcesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LookupResourcesResponseDefaultTypeInternal _LookupResourcesResponse_default_instance_;
PROTOBUF_CONSTEXPR LookupSubjectsRequest::LookupSubjectsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.permission_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.subject_object_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.optional_subject_relation_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.consistency_)*/nullptr
  , /*decltype(_impl_.resource_)*/nullptr
  , /*decltype(_impl_.context_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LookupSubjectsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LookupSubjectsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LookupSubjectsRequestDefaultTypeInternal() {}
  union {
    LookupSubjectsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LookupSubjectsRequestDefaultTypeInternal _LookupSubjectsRequest_default_instance_;
PROTOBUF_CONSTEXPR LookupSubjectsResponse::LookupSubjectsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.excluded_subject_ids_)*/{}
  , /*decltype(_impl_.excluded_subjects_)*/{}
  , /*decltype(_impl_.subject_object_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.looked_up_at_)*/nullptr
  , /*decltype(_impl_.partial_caveat_info_)*/nullptr
  , /*decltype(_impl_.subject_)*/nullptr
  , /*decltype(_impl_.permissionship_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LookupSubjectsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LookupSubjectsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LookupSubjectsResponseDefaultTypeInternal() {}
  union {
    LookupSubjectsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LookupSubjectsResponseDefaultTypeInternal _LookupSubjectsResponse_default_instance_;
PROTOBUF_CONSTEXPR ResolvedSubject::ResolvedSubject(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.subject_object_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.partial_caveat_info_)*/nullptr
  , /*decltype(_impl_.permissionship_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ResolvedSubjectDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedSubjectDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedSubjectDefaultTypeInternal() {}
  union {
    ResolvedSubject _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedSubjectDefaultTypeInternal _ResolvedSubject_default_instance_;
}  // namespace v1
}  // namespace api
}  // namespace authzed
static ::_pb::Metadata file_level_metadata_authzed_2fapi_2fv1_2fpermission_5fservice_2eproto[20];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_authzed_2fapi_2fv1_2fpermission_5fservice_2eproto[3];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_authzed_2fapi_2fv1_2fpermission_5fservice_2eproto = nullptr;

const uint32_t TableStruct_authzed_2fapi_2fv1_2fpermission_5fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::Consistency, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::Consistency, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::Consistency, _impl_.requirement_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::RelationshipFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::RelationshipFilter, _impl_.resource_type_),
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::RelationshipFilter, _impl_.optional_resource_id_),
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::RelationshipFilter, _impl_.optional_relation_),
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::RelationshipFilter, _impl_.optional_subject_filter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::SubjectFilter_RelationFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::SubjectFilter_RelationFilter, _impl_.relation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::SubjectFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::SubjectFilter, _impl_.subject_type_),
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::SubjectFilter, _impl_.optional_subject_id_),
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::SubjectFilter, _impl_.optional_relation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::ReadRelationshipsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::ReadRelationshipsRequest, _impl_.consistency_),
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::ReadRelationshipsRequest, _impl_.relationship_filter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::ReadRelationshipsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::ReadRelationshipsResponse, _impl_.read_at_),
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::ReadRelationshipsResponse, _impl_.relationship_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::Precondition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::Precondition, _impl_.operation_),
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::Precondition, _impl_.filter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::WriteRelationshipsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::WriteRelationshipsRequest, _impl_.updates_),
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::WriteRelationshipsRequest, _impl_.optional_preconditions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::WriteRelationshipsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::WriteRelationshipsResponse, _impl_.written_at_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::DeleteRelationshipsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::DeleteRelationshipsRequest, _impl_.relationship_filter_),
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::DeleteRelationshipsRequest, _impl_.optional_preconditions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::DeleteRelationshipsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::DeleteRelationshipsResponse, _impl_.deleted_at_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::CheckPermissionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::CheckPermissionRequest, _impl_.consistency_),
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::CheckPermissionRequest, _impl_.resource_),
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::CheckPermissionRequest, _impl_.permission_),
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::CheckPermissionRequest, _impl_.subject_),
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::CheckPermissionRequest, _impl_.context_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::CheckPermissionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::CheckPermissionResponse, _impl_.checked_at_),
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::CheckPermissionResponse, _impl_.permissionship_),
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::CheckPermissionResponse, _impl_.partial_caveat_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::ExpandPermissionTreeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::ExpandPermissionTreeRequest, _impl_.consistency_),
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::ExpandPermissionTreeRequest, _impl_.resource_),
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::ExpandPermissionTreeRequest, _impl_.permission_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::ExpandPermissionTreeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::ExpandPermissionTreeResponse, _impl_.expanded_at_),
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::ExpandPermissionTreeResponse, _impl_.tree_root_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::LookupResourcesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::LookupResourcesRequest, _impl_.consistency_),
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::LookupResourcesRequest, _impl_.resource_object_type_),
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::LookupResourcesRequest, _impl_.permission_),
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::LookupResourcesRequest, _impl_.subject_),
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::LookupResourcesRequest, _impl_.context_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::LookupResourcesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::LookupResourcesResponse, _impl_.looked_up_at_),
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::LookupResourcesResponse, _impl_.resource_object_id_),
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::LookupResourcesResponse, _impl_.permissionship_),
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::LookupResourcesResponse, _impl_.partial_caveat_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::LookupSubjectsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::LookupSubjectsRequest, _impl_.consistency_),
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::LookupSubjectsRequest, _impl_.resource_),
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::LookupSubjectsRequest, _impl_.permission_),
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::LookupSubjectsRequest, _impl_.subject_object_type_),
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::LookupSubjectsRequest, _impl_.optional_subject_relation_),
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::LookupSubjectsRequest, _impl_.context_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::LookupSubjectsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::LookupSubjectsResponse, _impl_.looked_up_at_),
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::LookupSubjectsResponse, _impl_.subject_object_id_),
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::LookupSubjectsResponse, _impl_.excluded_subject_ids_),
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::LookupSubjectsResponse, _impl_.permissionship_),
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::LookupSubjectsResponse, _impl_.partial_caveat_info_),
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::LookupSubjectsResponse, _impl_.subject_),
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::LookupSubjectsResponse, _impl_.excluded_subjects_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::ResolvedSubject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::ResolvedSubject, _impl_.subject_object_id_),
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::ResolvedSubject, _impl_.permissionship_),
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::ResolvedSubject, _impl_.partial_caveat_info_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::authzed::api::v1::Consistency)},
  { 11, -1, -1, sizeof(::authzed::api::v1::RelationshipFilter)},
  { 21, -1, -1, sizeof(::authzed::api::v1::SubjectFilter_RelationFilter)},
  { 28, -1, -1, sizeof(::authzed::api::v1::SubjectFilter)},
  { 37, -1, -1, sizeof(::authzed::api::v1::ReadRelationshipsRequest)},
  { 45, -1, -1, sizeof(::authzed::api::v1::ReadRelationshipsResponse)},
  { 53, -1, -1, sizeof(::authzed::api::v1::Precondition)},
  { 61, -1, -1, sizeof(::authzed::api::v1::WriteRelationshipsRequest)},
  { 69, -1, -1, sizeof(::authzed::api::v1::WriteRelationshipsResponse)},
  { 76, -1, -1, sizeof(::authzed::api::v1::DeleteRelationshipsRequest)},
  { 84, -1, -1, sizeof(::authzed::api::v1::DeleteRelationshipsResponse)},
  { 91, -1, -1, sizeof(::authzed::api::v1::CheckPermissionRequest)},
  { 102, -1, -1, sizeof(::authzed::api::v1::CheckPermissionResponse)},
  { 111, -1, -1, sizeof(::authzed::api::v1::ExpandPermissionTreeRequest)},
  { 120, -1, -1, sizeof(::authzed::api::v1::ExpandPermissionTreeResponse)},
  { 128, -1, -1, sizeof(::authzed::api::v1::LookupResourcesRequest)},
  { 139, -1, -1, sizeof(::authzed::api::v1::LookupResourcesResponse)},
  { 149, -1, -1, sizeof(::authzed::api::v1::LookupSubjectsRequest)},
  { 161, -1, -1, sizeof(::authzed::api::v1::LookupSubjectsResponse)},
  { 174, -1, -1, sizeof(::authzed::api::v1::ResolvedSubject)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::authzed::api::v1::_Consistency_default_instance_._instance,
  &::authzed::api::v1::_RelationshipFilter_default_instance_._instance,
  &::authzed::api::v1::_SubjectFilter_RelationFilter_default_instance_._instance,
  &::authzed::api::v1::_SubjectFilter_default_instance_._instance,
  &::authzed::api::v1::_ReadRelationshipsRequest_default_instance_._instance,
  &::authzed::api::v1::_ReadRelationshipsResponse_default_instance_._instance,
  &::authzed::api::v1::_Precondition_default_instance_._instance,
  &::authzed::api::v1::_WriteRelationshipsRequest_default_instance_._instance,
  &::authzed::api::v1::_WriteRelationshipsResponse_default_instance_._instance,
  &::authzed::api::v1::_DeleteRelationshipsRequest_default_instance_._instance,
  &::authzed::api::v1::_DeleteRelationshipsResponse_default_instance_._instance,
  &::authzed::api::v1::_CheckPermissionRequest_default_instance_._instance,
  &::authzed::api::v1::_CheckPermissionResponse_default_instance_._instance,
  &::authzed::api::v1::_ExpandPermissionTreeRequest_default_instance_._instance,
  &::authzed::api::v1::_ExpandPermissionTreeResponse_default_instance_._instance,
  &::authzed::api::v1::_LookupResourcesRequest_default_instance_._instance,
  &::authzed::api::v1::_LookupResourcesResponse_default_instance_._instance,
  &::authzed::api::v1::_LookupSubjectsRequest_default_instance_._instance,
  &::authzed::api::v1::_LookupSubjectsResponse_default_instance_._instance,
  &::authzed::api::v1::_ResolvedSubject_default_instance_._instance,
};

const char descriptor_table_protodef_authzed_2fapi_2fv1_2fpermission_5fservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\'authzed/api/v1/permission_service.prot"
  "o\022\016authzed.api.v1\032\034google/protobuf/struc"
  "t.proto\032\034google/api/annotations.proto\032\027v"
  "alidate/validate.proto\032\031authzed/api/v1/c"
  "ore.proto\"\234\002\n\013Consistency\0224\n\020minimize_la"
  "tency\030\001 \001(\010B\007\372B\004j\002\010\001H\000R\017minimizeLatency\022"
  "E\n\021at_least_as_fresh\030\002 \001(\0132\030.authzed.api"
  ".v1.ZedTokenH\000R\016atLeastAsFresh\022F\n\021at_exa"
  "ct_snapshot\030\003 \001(\0132\030.authzed.api.v1.ZedTo"
  "kenH\000R\017atExactSnapshot\0224\n\020fully_consiste"
  "nt\030\004 \001(\010B\007\372B\004j\002\010\001H\000R\017fullyConsistentB\022\n\013"
  "requirement\022\003\370B\001\"\230\003\n\022RelationshipFilter\022"
  "m\n\rresource_type\030\001 \001(\tBH\372BErC(\200\0012>^([a-z"
  "][a-z0-9_]{1,61}[a-z0-9]/)\?[a-z][a-z0-9_"
  "]{1,62}[a-z0-9]$R\014resourceType\022c\n\024option"
  "al_resource_id\030\002 \001(\tB1\372B.r,(\200\0012\'^([a-zA-"
  "Z0-9_][a-zA-Z0-9/_|-]{0,127})\?$R\022optiona"
  "lResourceId\022W\n\021optional_relation\030\003 \001(\tB*"
  "\372B\'r%(@2!^([a-z][a-z0-9_]{1,62}[a-z0-9])"
  "\?$R\020optionalRelation\022U\n\027optional_subject"
  "_filter\030\004 \001(\0132\035.authzed.api.v1.SubjectFi"
  "lterR\025optionalSubjectFilter\"\231\003\n\rSubjectF"
  "ilter\022k\n\014subject_type\030\001 \001(\tBH\372BErC(\200\0012>^"
  "([a-z][a-z0-9_]{1,61}[a-z0-9]/)\?[a-z][a-"
  "z0-9_]{1,62}[a-z0-9]$R\013subjectType\022f\n\023op"
  "tional_subject_id\030\002 \001(\tB6\372B3r1(\200\0012,^(([a"
  "-zA-Z0-9_][a-zA-Z0-9/_|-]{0,127})|\\*)\?$R"
  "\021optionalSubjectId\022Y\n\021optional_relation\030"
  "\003 \001(\0132,.authzed.api.v1.SubjectFilter.Rel"
  "ationFilterR\020optionalRelation\032X\n\016Relatio"
  "nFilter\022F\n\010relation\030\001 \001(\tB*\372B\'r%(@2!^([a"
  "-z][a-z0-9_]{1,62}[a-z0-9])\?$R\010relation\""
  "\270\001\n\030ReadRelationshipsRequest\022=\n\013consiste"
  "ncy\030\001 \001(\0132\033.authzed.api.v1.ConsistencyR\013"
  "consistency\022]\n\023relationship_filter\030\002 \001(\013"
  "2\".authzed.api.v1.RelationshipFilterB\010\372B"
  "\005\212\001\002\020\001R\022relationshipFilter\"\244\001\n\031ReadRelat"
  "ionshipsResponse\022;\n\007read_at\030\001 \001(\0132\030.auth"
  "zed.api.v1.ZedTokenB\010\372B\005\212\001\002\020\001R\006readAt\022J\n"
  "\014relationship\030\002 \001(\0132\034.authzed.api.v1.Rel"
  "ationshipB\010\372B\005\212\001\002\020\001R\014relationship\"\206\002\n\014Pr"
  "econdition\022P\n\toperation\030\001 \001(\0162&.authzed."
  "api.v1.Precondition.OperationB\n\372B\007\202\001\004\020\001 "
  "\000R\toperation\022D\n\006filter\030\002 \001(\0132\".authzed.a"
  "pi.v1.RelationshipFilterB\010\372B\005\212\001\002\020\001R\006filt"
  "er\"^\n\tOperation\022\031\n\025OPERATION_UNSPECIFIED"
  "\020\000\022\034\n\030OPERATION_MUST_NOT_MATCH\020\001\022\030\n\024OPER"
  "ATION_MUST_MATCH\020\002\"\314\001\n\031WriteRelationship"
  "sRequest\022K\n\007updates\030\001 \003(\0132\".authzed.api."
  "v1.RelationshipUpdateB\r\372B\n\222\001\007\"\005\212\001\002\020\001R\007up"
  "dates\022b\n\026optional_preconditions\030\002 \003(\0132\034."
  "authzed.api.v1.PreconditionB\r\372B\n\222\001\007\"\005\212\001\002"
  "\020\001R\025optionalPreconditions\"U\n\032WriteRelati"
  "onshipsResponse\0227\n\nwritten_at\030\001 \001(\0132\030.au"
  "thzed.api.v1.ZedTokenR\twrittenAt\"\337\001\n\032Del"
  "eteRelationshipsRequest\022]\n\023relationship_"
  "filter\030\001 \001(\0132\".authzed.api.v1.Relationsh"
  "ipFilterB\010\372B\005\212\001\002\020\001R\022relationshipFilter\022b"
  "\n\026optional_preconditions\030\002 \003(\0132\034.authzed"
  ".api.v1.PreconditionB\r\372B\n\222\001\007\"\005\212\001\002\020\001R\025opt"
  "ionalPreconditions\"V\n\033DeleteRelationship"
  "sResponse\0227\n\ndeleted_at\030\001 \001(\0132\030.authzed."
  "api.v1.ZedTokenR\tdeletedAt\"\355\002\n\026CheckPerm"
  "issionRequest\022=\n\013consistency\030\001 \001(\0132\033.aut"
  "hzed.api.v1.ConsistencyR\013consistency\022E\n\010"
  "resource\030\002 \001(\0132\037.authzed.api.v1.ObjectRe"
  "ferenceB\010\372B\005\212\001\002\020\001R\010resource\022J\n\npermissio"
  "n\030\003 \001(\tB*\372B\'r%(@2!^([a-z][a-z0-9_]{1,62}"
  "[a-z0-9])\?$R\npermission\022D\n\007subject\030\004 \001(\013"
  "2 .authzed.api.v1.SubjectReferenceB\010\372B\005\212"
  "\001\002\020\001R\007subject\022;\n\007context\030\005 \001(\0132\027.google."
  "protobuf.StructB\010\372B\005\212\001\002\020\000R\007context\"\310\003\n\027C"
  "heckPermissionResponse\022A\n\nchecked_at\030\001 \001"
  "(\0132\030.authzed.api.v1.ZedTokenB\010\372B\005\212\001\002\020\000R\t"
  "checkedAt\022j\n\016permissionship\030\002 \001(\01626.auth"
  "zed.api.v1.CheckPermissionResponse.Permi"
  "ssionshipB\n\372B\007\202\001\004\020\001 \000R\016permissionship\022[\n"
  "\023partial_caveat_info\030\003 \001(\0132!.authzed.api"
  ".v1.PartialCaveatInfoB\010\372B\005\212\001\002\020\000R\021partial"
  "CaveatInfo\"\240\001\n\016Permissionship\022\036\n\032PERMISS"
  "IONSHIP_UNSPECIFIED\020\000\022 \n\034PERMISSIONSHIP_"
  "NO_PERMISSION\020\001\022!\n\035PERMISSIONSHIP_HAS_PE"
  "RMISSION\020\002\022)\n%PERMISSIONSHIP_CONDITIONAL"
  "_PERMISSION\020\003\"\357\001\n\033ExpandPermissionTreeRe"
  "quest\022=\n\013consistency\030\001 \001(\0132\033.authzed.api"
  ".v1.ConsistencyR\013consistency\022E\n\010resource"
  "\030\002 \001(\0132\037.authzed.api.v1.ObjectReferenceB"
  "\010\372B\005\212\001\002\020\001R\010resource\022J\n\npermission\030\003 \001(\tB"
  "*\372B\'r%(@2!^([a-z][a-z0-9_]{1,62}[a-z0-9]"
  ")\?$R\npermission\"\242\001\n\034ExpandPermissionTree"
  "Response\0229\n\013expanded_at\030\001 \001(\0132\030.authzed."
  "api.v1.ZedTokenR\nexpandedAt\022G\n\ttree_root"
  "\030\002 \001(\0132*.authzed.api.v1.PermissionRelati"
  "onshipTreeR\010treeRoot\"\237\003\n\026LookupResources"
  "Request\022=\n\013consistency\030\001 \001(\0132\033.authzed.a"
  "pi.v1.ConsistencyR\013consistency\022z\n\024resour"
  "ce_object_type\030\002 \001(\tBH\372BErC(\200\0012>^([a-z]["
  "a-z0-9_]{1,61}[a-z0-9]/)\?[a-z][a-z0-9_]{"
  "1,62}[a-z0-9]$R\022resourceObjectType\022G\n\npe"
  "rmission\030\003 \001(\tB\'\372B$r\"(@2\036^[a-z][a-z0-9_]"
  "{1,62}[a-z0-9]$R\npermission\022D\n\007subject\030\004"
  " \001(\0132 .authzed.api.v1.SubjectReferenceB\010"
  "\372B\005\212\001\002\020\001R\007subject\022;\n\007context\030\005 \001(\0132\027.goo"
  "gle.protobuf.StructB\010\372B\005\212\001\002\020\000R\007context\"\272"
  "\002\n\027LookupResourcesResponse\022:\n\014looked_up_"
  "at\030\001 \001(\0132\030.authzed.api.v1.ZedTokenR\nlook"
  "edUpAt\022,\n\022resource_object_id\030\002 \001(\tR\020reso"
  "urceObjectId\022X\n\016permissionship\030\003 \001(\0162$.a"
  "uthzed.api.v1.LookupPermissionshipB\n\372B\007\202"
  "\001\004\020\001 \000R\016permissionship\022[\n\023partial_caveat"
  "_info\030\004 \001(\0132!.authzed.api.v1.PartialCave"
  "atInfoB\010\372B\005\212\001\002\020\000R\021partialCaveatInfo\"\210\004\n\025"
  "LookupSubjectsRequest\022=\n\013consistency\030\001 \001"
  "(\0132\033.authzed.api.v1.ConsistencyR\013consist"
  "ency\022E\n\010resource\030\002 \001(\0132\037.authzed.api.v1."
  "ObjectReferenceB\010\372B\005\212\001\002\020\001R\010resource\022J\n\np"
  "ermission\030\003 \001(\tB*\372B\'r%(@2!^([a-z][a-z0-9"
  "_]{1,62}[a-z0-9])\?$R\npermission\022x\n\023subje"
  "ct_object_type\030\004 \001(\tBH\372BErC(\200\0012>^([a-z]["
  "a-z0-9_]{1,61}[a-z0-9]/)\?[a-z][a-z0-9_]{"
  "1,62}[a-z0-9]$R\021subjectObjectType\022f\n\031opt"
  "ional_subject_relation\030\005 \001(\tB*\372B\'r%(@2!^"
  "([a-z][a-z0-9_]{1,62}[a-z0-9])\?$R\027option"
  "alSubjectRelation\022;\n\007context\030\006 \001(\0132\027.goo"
  "gle.protobuf.StructB\010\372B\005\212\001\002\020\000R\007context\"\376"
  "\003\n\026LookupSubjectsResponse\022:\n\014looked_up_a"
  "t\030\001 \001(\0132\030.authzed.api.v1.ZedTokenR\nlooke"
  "dUpAt\022.\n\021subject_object_id\030\002 \001(\tB\002\030\001R\017su"
  "bjectObjectId\0224\n\024excluded_subject_ids\030\003 "
  "\003(\tB\002\030\001R\022excludedSubjectIds\022Z\n\016permissio"
  "nship\030\004 \001(\0162$.authzed.api.v1.LookupPermi"
  "ssionshipB\014\030\001\372B\007\202\001\004\020\001 \000R\016permissionship\022"
  "]\n\023partial_caveat_info\030\005 \001(\0132!.authzed.a"
  "pi.v1.PartialCaveatInfoB\n\030\001\372B\005\212\001\002\020\000R\021par"
  "tialCaveatInfo\0229\n\007subject\030\006 \001(\0132\037.authze"
  "d.api.v1.ResolvedSubjectR\007subject\022L\n\021exc"
  "luded_subjects\030\007 \003(\0132\037.authzed.api.v1.Re"
  "solvedSubjectR\020excludedSubjects\"\364\001\n\017Reso"
  "lvedSubject\022*\n\021subject_object_id\030\001 \001(\tR\017"
  "subjectObjectId\022X\n\016permissionship\030\002 \001(\0162"
  "$.authzed.api.v1.LookupPermissionshipB\n\372"
  "B\007\202\001\004\020\001 \000R\016permissionship\022[\n\023partial_cav"
  "eat_info\030\003 \001(\0132!.authzed.api.v1.PartialC"
  "aveatInfoB\010\372B\005\212\001\002\020\000R\021partialCaveatInfo*\231"
  "\001\n\024LookupPermissionship\022%\n!LOOKUP_PERMIS"
  "SIONSHIP_UNSPECIFIED\020\000\022(\n$LOOKUP_PERMISS"
  "IONSHIP_HAS_PERMISSION\020\001\0220\n,LOOKUP_PERMI"
  "SSIONSHIP_CONDITIONAL_PERMISSION\020\0022\200\010\n\022P"
  "ermissionsService\022\215\001\n\021ReadRelationships\022"
  "(.authzed.api.v1.ReadRelationshipsReques"
  "t\032).authzed.api.v1.ReadRelationshipsResp"
  "onse\"!\202\323\344\223\002\033:\001*\"\026/v1/relationships/read0"
  "\001\022\217\001\n\022WriteRelationships\022).authzed.api.v"
  "1.WriteRelationshipsRequest\032*.authzed.ap"
  "i.v1.WriteRelationshipsResponse\"\"\202\323\344\223\002\034:"
  "\001*\"\027/v1/relationships/write\022\223\001\n\023DeleteRe"
  "lationships\022*.authzed.api.v1.DeleteRelat"
  "ionshipsRequest\032+.authzed.api.v1.DeleteR"
  "elationshipsResponse\"#\202\323\344\223\002\035:\001*\"\030/v1/rel"
  "ationships/delete\022\204\001\n\017CheckPermission\022&."
  "authzed.api.v1.CheckPermissionRequest\032\'."
  "authzed.api.v1.CheckPermissionResponse\" "
  "\202\323\344\223\002\032:\001*\"\025/v1/permissions/check\022\224\001\n\024Exp"
  "andPermissionTree\022+.authzed.api.v1.Expan"
  "dPermissionTreeRequest\032,.authzed.api.v1."
  "ExpandPermissionTreeResponse\"!\202\323\344\223\002\033:\001*\""
  "\026/v1/permissions/expand\022\212\001\n\017LookupResour"
  "ces\022&.authzed.api.v1.LookupResourcesRequ"
  "est\032\'.authzed.api.v1.LookupResourcesResp"
  "onse\"$\202\323\344\223\002\036:\001*\"\031/v1/permissions/resourc"
  "es0\001\022\206\001\n\016LookupSubjects\022%.authzed.api.v1"
  ".LookupSubjectsRequest\032&.authzed.api.v1."
  "LookupSubjectsResponse\"#\202\323\344\223\002\035:\001*\"\030/v1/p"
  "ermissions/subjects0\001BH\n\022com.authzed.api"
  ".v1Z2github.com/authzed/authzed-go/proto"
  "/authzed/api/v1b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_authzed_2fapi_2fv1_2fpermission_5fservice_2eproto_deps[4] = {
  &::descriptor_table_authzed_2fapi_2fv1_2fcore_2eproto,
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
  &::descriptor_table_google_2fprotobuf_2fstruct_2eproto,
  &::descriptor_table_validate_2fvalidate_2eproto,
};
static ::_pbi::once_flag descriptor_table_authzed_2fapi_2fv1_2fpermission_5fservice_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_authzed_2fapi_2fv1_2fpermission_5fservice_2eproto = {
    false, false, 7023, descriptor_table_protodef_authzed_2fapi_2fv1_2fpermission_5fservice_2eproto,
    "authzed/api/v1/permission_service.proto",
    &descriptor_table_authzed_2fapi_2fv1_2fpermission_5fservice_2eproto_once, descriptor_table_authzed_2fapi_2fv1_2fpermission_5fservice_2eproto_deps, 4, 20,
    schemas, file_default_instances, TableStruct_authzed_2fapi_2fv1_2fpermission_5fservice_2eproto::offsets,
    file_level_metadata_authzed_2fapi_2fv1_2fpermission_5fservice_2eproto, file_level_enum_descriptors_authzed_2fapi_2fv1_2fpermission_5fservice_2eproto,
    file_level_service_descriptors_authzed_2fapi_2fv1_2fpermission_5fservice_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_authzed_2fapi_2fv1_2fpermission_5fservice_2eproto_getter() {
  return &descriptor_table_authzed_2fapi_2fv1_2fpermission_5fservice_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_authzed_2fapi_2fv1_2fpermission_5fservice_2eproto(&descriptor_table_authzed_2fapi_2fv1_2fpermission_5fservice_2eproto);
namespace authzed {
namespace api {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Precondition_Operation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_authzed_2fapi_2fv1_2fpermission_5fservice_2eproto);
  return file_level_enum_descriptors_authzed_2fapi_2fv1_2fpermission_5fservice_2eproto[0];
}
bool Precondition_Operation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Precondition_Operation Precondition::OPERATION_UNSPECIFIED;
constexpr Precondition_Operation Precondition::OPERATION_MUST_NOT_MATCH;
constexpr Precondition_Operation Precondition::OPERATION_MUST_MATCH;
constexpr Precondition_Operation Precondition::Operation_MIN;
constexpr Precondition_Operation Precondition::Operation_MAX;
constexpr int Precondition::Operation_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CheckPermissionResponse_Permissionship_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_authzed_2fapi_2fv1_2fpermission_5fservice_2eproto);
  return file_level_enum_descriptors_authzed_2fapi_2fv1_2fpermission_5fservice_2eproto[1];
}
bool CheckPermissionResponse_Permissionship_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CheckPermissionResponse_Permissionship CheckPermissionResponse::PERMISSIONSHIP_UNSPECIFIED;
constexpr CheckPermissionResponse_Permissionship CheckPermissionResponse::PERMISSIONSHIP_NO_PERMISSION;
constexpr CheckPermissionResponse_Permissionship CheckPermissionResponse::PERMISSIONSHIP_HAS_PERMISSION;
constexpr CheckPermissionResponse_Permissionship CheckPermissionResponse::PERMISSIONSHIP_CONDITIONAL_PERMISSION;
constexpr CheckPermissionResponse_Permissionship CheckPermissionResponse::Permissionship_MIN;
constexpr CheckPermissionResponse_Permissionship CheckPermissionResponse::Permissionship_MAX;
constexpr int CheckPermissionResponse::Permissionship_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LookupPermissionship_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_authzed_2fapi_2fv1_2fpermission_5fservice_2eproto);
  return file_level_enum_descriptors_authzed_2fapi_2fv1_2fpermission_5fservice_2eproto[2];
}
bool LookupPermissionship_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Consistency::_Internal {
 public:
  static const ::authzed::api::v1::ZedToken& at_least_as_fresh(const Consistency* msg);
  static const ::authzed::api::v1::ZedToken& at_exact_snapshot(const Consistency* msg);
};

const ::authzed::api::v1::ZedToken&
Consistency::_Internal::at_least_as_fresh(const Consistency* msg) {
  return *msg->_impl_.requirement_.at_least_as_fresh_;
}
const ::authzed::api::v1::ZedToken&
Consistency::_Internal::at_exact_snapshot(const Consistency* msg) {
  return *msg->_impl_.requirement_.at_exact_snapshot_;
}
void Consistency::set_allocated_at_least_as_fresh(::authzed::api::v1::ZedToken* at_least_as_fresh) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_requirement();
  if (at_least_as_fresh) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(at_least_as_fresh));
    if (message_arena != submessage_arena) {
      at_least_as_fresh = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, at_least_as_fresh, submessage_arena);
    }
    set_has_at_least_as_fresh();
    _impl_.requirement_.at_least_as_fresh_ = at_least_as_fresh;
  }
  // @@protoc_insertion_point(field_set_allocated:authzed.api.v1.Consistency.at_least_as_fresh)
}
void Consistency::clear_at_least_as_fresh() {
  if (_internal_has_at_least_as_fresh()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.requirement_.at_least_as_fresh_;
    }
    clear_has_requirement();
  }
}
void Consistency::set_allocated_at_exact_snapshot(::authzed::api::v1::ZedToken* at_exact_snapshot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_requirement();
  if (at_exact_snapshot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(at_exact_snapshot));
    if (message_arena != submessage_arena) {
      at_exact_snapshot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, at_exact_snapshot, submessage_arena);
    }
    set_has_at_exact_snapshot();
    _impl_.requirement_.at_exact_snapshot_ = at_exact_snapshot;
  }
  // @@protoc_insertion_point(field_set_allocated:authzed.api.v1.Consistency.at_exact_snapshot)
}
void Consistency::clear_at_exact_snapshot() {
  if (_internal_has_at_exact_snapshot()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.requirement_.at_exact_snapshot_;
    }
    clear_has_requirement();
  }
}
Consistency::Consistency(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:authzed.api.v1.Consistency)
}
Consistency::Consistency(const Consistency& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Consistency* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.requirement_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_requirement();
  switch (from.requirement_case()) {
    case kMinimizeLatency: {
      _this->_internal_set_minimize_latency(from._internal_minimize_latency());
      break;
    }
    case kAtLeastAsFresh: {
      _this->_internal_mutable_at_least_as_fresh()->::authzed::api::v1::ZedToken::MergeFrom(
          from._internal_at_least_as_fresh());
      break;
    }
    case kAtExactSnapshot: {
      _this->_internal_mutable_at_exact_snapshot()->::authzed::api::v1::ZedToken::MergeFrom(
          from._internal_at_exact_snapshot());
      break;
    }
    case kFullyConsistent: {
      _this->_internal_set_fully_consistent(from._internal_fully_consistent());
      break;
    }
    case REQUIREMENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:authzed.api.v1.Consistency)
}

inline void Consistency::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.requirement_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_requirement();
}

Consistency::~Consistency() {
  // @@protoc_insertion_point(destructor:authzed.api.v1.Consistency)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Consistency::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_requirement()) {
    clear_requirement();
  }
}

void Consistency::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Consistency::clear_requirement() {
// @@protoc_insertion_point(one_of_clear_start:authzed.api.v1.Consistency)
  switch (requirement_case()) {
    case kMinimizeLatency: {
      // No need to clear
      break;
    }
    case kAtLeastAsFresh: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.requirement_.at_least_as_fresh_;
      }
      break;
    }
    case kAtExactSnapshot: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.requirement_.at_exact_snapshot_;
      }
      break;
    }
    case kFullyConsistent: {
      // No need to clear
      break;
    }
    case REQUIREMENT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = REQUIREMENT_NOT_SET;
}


void Consistency::Clear() {
// @@protoc_insertion_point(message_clear_start:authzed.api.v1.Consistency)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_requirement();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Consistency::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool minimize_latency = 1 [json_name = "minimizeLatency", (.validate.rules) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _internal_set_minimize_latency(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .authzed.api.v1.ZedToken at_least_as_fresh = 2 [json_name = "atLeastAsFresh"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_at_least_as_fresh(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .authzed.api.v1.ZedToken at_exact_snapshot = 3 [json_name = "atExactSnapshot"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_at_exact_snapshot(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool fully_consistent = 4 [json_name = "fullyConsistent", (.validate.rules) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _internal_set_fully_consistent(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Consistency::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:authzed.api.v1.Consistency)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool minimize_latency = 1 [json_name = "minimizeLatency", (.validate.rules) = {
  if (_internal_has_minimize_latency()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_minimize_latency(), target);
  }

  // .authzed.api.v1.ZedToken at_least_as_fresh = 2 [json_name = "atLeastAsFresh"];
  if (_internal_has_at_least_as_fresh()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::at_least_as_fresh(this),
        _Internal::at_least_as_fresh(this).GetCachedSize(), target, stream);
  }

  // .authzed.api.v1.ZedToken at_exact_snapshot = 3 [json_name = "atExactSnapshot"];
  if (_internal_has_at_exact_snapshot()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::at_exact_snapshot(this),
        _Internal::at_exact_snapshot(this).GetCachedSize(), target, stream);
  }

  // bool fully_consistent = 4 [json_name = "fullyConsistent", (.validate.rules) = {
  if (_internal_has_fully_consistent()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_fully_consistent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:authzed.api.v1.Consistency)
  return target;
}

size_t Consistency::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:authzed.api.v1.Consistency)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (requirement_case()) {
    // bool minimize_latency = 1 [json_name = "minimizeLatency", (.validate.rules) = {
    case kMinimizeLatency: {
      total_size += 1 + 1;
      break;
    }
    // .authzed.api.v1.ZedToken at_least_as_fresh = 2 [json_name = "atLeastAsFresh"];
    case kAtLeastAsFresh: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.requirement_.at_least_as_fresh_);
      break;
    }
    // .authzed.api.v1.ZedToken at_exact_snapshot = 3 [json_name = "atExactSnapshot"];
    case kAtExactSnapshot: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.requirement_.at_exact_snapshot_);
      break;
    }
    // bool fully_consistent = 4 [json_name = "fullyConsistent", (.validate.rules) = {
    case kFullyConsistent: {
      total_size += 1 + 1;
      break;
    }
    case REQUIREMENT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Consistency::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Consistency::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Consistency::GetClassData() const { return &_class_data_; }


void Consistency::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Consistency*>(&to_msg);
  auto& from = static_cast<const Consistency&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:authzed.api.v1.Consistency)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.requirement_case()) {
    case kMinimizeLatency: {
      _this->_internal_set_minimize_latency(from._internal_minimize_latency());
      break;
    }
    case kAtLeastAsFresh: {
      _this->_internal_mutable_at_least_as_fresh()->::authzed::api::v1::ZedToken::MergeFrom(
          from._internal_at_least_as_fresh());
      break;
    }
    case kAtExactSnapshot: {
      _this->_internal_mutable_at_exact_snapshot()->::authzed::api::v1::ZedToken::MergeFrom(
          from._internal_at_exact_snapshot());
      break;
    }
    case kFullyConsistent: {
      _this->_internal_set_fully_consistent(from._internal_fully_consistent());
      break;
    }
    case REQUIREMENT_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Consistency::CopyFrom(const Consistency& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:authzed.api.v1.Consistency)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Consistency::IsInitialized() const {
  return true;
}

void Consistency::InternalSwap(Consistency* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.requirement_, other->_impl_.requirement_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Consistency::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_authzed_2fapi_2fv1_2fpermission_5fservice_2eproto_getter, &descriptor_table_authzed_2fapi_2fv1_2fpermission_5fservice_2eproto_once,
      file_level_metadata_authzed_2fapi_2fv1_2fpermission_5fservice_2eproto[0]);
}

// ===================================================================

class RelationshipFilter::_Internal {
 public:
  static const ::authzed::api::v1::SubjectFilter& optional_subject_filter(const RelationshipFilter* msg);
};

const ::authzed::api::v1::SubjectFilter&
RelationshipFilter::_Internal::optional_subject_filter(const RelationshipFilter* msg) {
  return *msg->_impl_.optional_subject_filter_;
}
RelationshipFilter::RelationshipFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:authzed.api.v1.RelationshipFilter)
}
RelationshipFilter::RelationshipFilter(const RelationshipFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RelationshipFilter* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.resource_type_){}
    , decltype(_impl_.optional_resource_id_){}
    , decltype(_impl_.optional_relation_){}
    , decltype(_impl_.optional_subject_filter_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.resource_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.resource_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_resource_type().empty()) {
    _this->_impl_.resource_type_.Set(from._internal_resource_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.optional_resource_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.optional_resource_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_optional_resource_id().empty()) {
    _this->_impl_.optional_resource_id_.Set(from._internal_optional_resource_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.optional_relation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.optional_relation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_optional_relation().empty()) {
    _this->_impl_.optional_relation_.Set(from._internal_optional_relation(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_optional_subject_filter()) {
    _this->_impl_.optional_subject_filter_ = new ::authzed::api::v1::SubjectFilter(*from._impl_.optional_subject_filter_);
  }
  // @@protoc_insertion_point(copy_constructor:authzed.api.v1.RelationshipFilter)
}

inline void RelationshipFilter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.resource_type_){}
    , decltype(_impl_.optional_resource_id_){}
    , decltype(_impl_.optional_relation_){}
    , decltype(_impl_.optional_subject_filter_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.resource_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.resource_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.optional_resource_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.optional_resource_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.optional_relation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.optional_relation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RelationshipFilter::~RelationshipFilter() {
  // @@protoc_insertion_point(destructor:authzed.api.v1.RelationshipFilter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RelationshipFilter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.resource_type_.Destroy();
  _impl_.optional_resource_id_.Destroy();
  _impl_.optional_relation_.Destroy();
  if (this != internal_default_instance()) delete _impl_.optional_subject_filter_;
}

void RelationshipFilter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RelationshipFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:authzed.api.v1.RelationshipFilter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.resource_type_.ClearToEmpty();
  _impl_.optional_resource_id_.ClearToEmpty();
  _impl_.optional_relation_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.optional_subject_filter_ != nullptr) {
    delete _impl_.optional_subject_filter_;
  }
  _impl_.optional_subject_filter_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RelationshipFilter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string resource_type = 1 [json_name = "resourceType", (.validate.rules) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_resource_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "authzed.api.v1.RelationshipFilter.resource_type"));
        } else
          goto handle_unusual;
        continue;
      // string optional_resource_id = 2 [json_name = "optionalResourceId", (.validate.rules) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_optional_resource_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "authzed.api.v1.RelationshipFilter.optional_resource_id"));
        } else
          goto handle_unusual;
        continue;
      // string optional_relation = 3 [json_name = "optionalRelation", (.validate.rules) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_optional_relation();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "authzed.api.v1.RelationshipFilter.optional_relation"));
        } else
          goto handle_unusual;
        continue;
      // .authzed.api.v1.SubjectFilter optional_subject_filter = 4 [json_name = "optionalSubjectFilter"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_optional_subject_filter(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RelationshipFilter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:authzed.api.v1.RelationshipFilter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string resource_type = 1 [json_name = "resourceType", (.validate.rules) = {
  if (!this->_internal_resource_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resource_type().data(), static_cast<int>(this->_internal_resource_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "authzed.api.v1.RelationshipFilter.resource_type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_resource_type(), target);
  }

  // string optional_resource_id = 2 [json_name = "optionalResourceId", (.validate.rules) = {
  if (!this->_internal_optional_resource_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_optional_resource_id().data(), static_cast<int>(this->_internal_optional_resource_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "authzed.api.v1.RelationshipFilter.optional_resource_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_optional_resource_id(), target);
  }

  // string optional_relation = 3 [json_name = "optionalRelation", (.validate.rules) = {
  if (!this->_internal_optional_relation().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_optional_relation().data(), static_cast<int>(this->_internal_optional_relation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "authzed.api.v1.RelationshipFilter.optional_relation");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_optional_relation(), target);
  }

  // .authzed.api.v1.SubjectFilter optional_subject_filter = 4 [json_name = "optionalSubjectFilter"];
  if (this->_internal_has_optional_subject_filter()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::optional_subject_filter(this),
        _Internal::optional_subject_filter(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:authzed.api.v1.RelationshipFilter)
  return target;
}

size_t RelationshipFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:authzed.api.v1.RelationshipFilter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string resource_type = 1 [json_name = "resourceType", (.validate.rules) = {
  if (!this->_internal_resource_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_resource_type());
  }

  // string optional_resource_id = 2 [json_name = "optionalResourceId", (.validate.rules) = {
  if (!this->_internal_optional_resource_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_optional_resource_id());
  }

  // string optional_relation = 3 [json_name = "optionalRelation", (.validate.rules) = {
  if (!this->_internal_optional_relation().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_optional_relation());
  }

  // .authzed.api.v1.SubjectFilter optional_subject_filter = 4 [json_name = "optionalSubjectFilter"];
  if (this->_internal_has_optional_subject_filter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.optional_subject_filter_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RelationshipFilter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RelationshipFilter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RelationshipFilter::GetClassData() const { return &_class_data_; }


void RelationshipFilter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RelationshipFilter*>(&to_msg);
  auto& from = static_cast<const RelationshipFilter&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:authzed.api.v1.RelationshipFilter)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_resource_type().empty()) {
    _this->_internal_set_resource_type(from._internal_resource_type());
  }
  if (!from._internal_optional_resource_id().empty()) {
    _this->_internal_set_optional_resource_id(from._internal_optional_resource_id());
  }
  if (!from._internal_optional_relation().empty()) {
    _this->_internal_set_optional_relation(from._internal_optional_relation());
  }
  if (from._internal_has_optional_subject_filter()) {
    _this->_internal_mutable_optional_subject_filter()->::authzed::api::v1::SubjectFilter::MergeFrom(
        from._internal_optional_subject_filter());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RelationshipFilter::CopyFrom(const RelationshipFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:authzed.api.v1.RelationshipFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelationshipFilter::IsInitialized() const {
  return true;
}

void RelationshipFilter::InternalSwap(RelationshipFilter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.resource_type_, lhs_arena,
      &other->_impl_.resource_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.optional_resource_id_, lhs_arena,
      &other->_impl_.optional_resource_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.optional_relation_, lhs_arena,
      &other->_impl_.optional_relation_, rhs_arena
  );
  swap(_impl_.optional_subject_filter_, other->_impl_.optional_subject_filter_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RelationshipFilter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_authzed_2fapi_2fv1_2fpermission_5fservice_2eproto_getter, &descriptor_table_authzed_2fapi_2fv1_2fpermission_5fservice_2eproto_once,
      file_level_metadata_authzed_2fapi_2fv1_2fpermission_5fservice_2eproto[1]);
}

// ===================================================================

class SubjectFilter_RelationFilter::_Internal {
 public:
};

SubjectFilter_RelationFilter::SubjectFilter_RelationFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:authzed.api.v1.SubjectFilter.RelationFilter)
}
SubjectFilter_RelationFilter::SubjectFilter_RelationFilter(const SubjectFilter_RelationFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SubjectFilter_RelationFilter* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.relation_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.relation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.relation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_relation().empty()) {
    _this->_impl_.relation_.Set(from._internal_relation(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:authzed.api.v1.SubjectFilter.RelationFilter)
}

inline void SubjectFilter_RelationFilter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.relation_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.relation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.relation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SubjectFilter_RelationFilter::~SubjectFilter_RelationFilter() {
  // @@protoc_insertion_point(destructor:authzed.api.v1.SubjectFilter.RelationFilter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SubjectFilter_RelationFilter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.relation_.Destroy();
}

void SubjectFilter_RelationFilter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SubjectFilter_RelationFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:authzed.api.v1.SubjectFilter.RelationFilter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.relation_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubjectFilter_RelationFilter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string relation = 1 [json_name = "relation", (.validate.rules) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_relation();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "authzed.api.v1.SubjectFilter.RelationFilter.relation"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubjectFilter_RelationFilter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:authzed.api.v1.SubjectFilter.RelationFilter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string relation = 1 [json_name = "relation", (.validate.rules) = {
  if (!this->_internal_relation().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_relation().data(), static_cast<int>(this->_internal_relation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "authzed.api.v1.SubjectFilter.RelationFilter.relation");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_relation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:authzed.api.v1.SubjectFilter.RelationFilter)
  return target;
}

size_t SubjectFilter_RelationFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:authzed.api.v1.SubjectFilter.RelationFilter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string relation = 1 [json_name = "relation", (.validate.rules) = {
  if (!this->_internal_relation().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_relation());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubjectFilter_RelationFilter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SubjectFilter_RelationFilter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubjectFilter_RelationFilter::GetClassData() const { return &_class_data_; }


void SubjectFilter_RelationFilter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SubjectFilter_RelationFilter*>(&to_msg);
  auto& from = static_cast<const SubjectFilter_RelationFilter&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:authzed.api.v1.SubjectFilter.RelationFilter)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_relation().empty()) {
    _this->_internal_set_relation(from._internal_relation());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubjectFilter_RelationFilter::CopyFrom(const SubjectFilter_RelationFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:authzed.api.v1.SubjectFilter.RelationFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubjectFilter_RelationFilter::IsInitialized() const {
  return true;
}

void SubjectFilter_RelationFilter::InternalSwap(SubjectFilter_RelationFilter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.relation_, lhs_arena,
      &other->_impl_.relation_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SubjectFilter_RelationFilter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_authzed_2fapi_2fv1_2fpermission_5fservice_2eproto_getter, &descriptor_table_authzed_2fapi_2fv1_2fpermission_5fservice_2eproto_once,
      file_level_metadata_authzed_2fapi_2fv1_2fpermission_5fservice_2eproto[2]);
}

// ===================================================================

class SubjectFilter::_Internal {
 public:
  static const ::authzed::api::v1::SubjectFilter_RelationFilter& optional_relation(const SubjectFilter* msg);
};

const ::authzed::api::v1::SubjectFilter_RelationFilter&
SubjectFilter::_Internal::optional_relation(const SubjectFilter* msg) {
  return *msg->_impl_.optional_relation_;
}
SubjectFilter::SubjectFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:authzed.api.v1.SubjectFilter)
}
SubjectFilter::SubjectFilter(const SubjectFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SubjectFilter* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.subject_type_){}
    , decltype(_impl_.optional_subject_id_){}
    , decltype(_impl_.optional_relation_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.subject_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subject_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subject_type().empty()) {
    _this->_impl_.subject_type_.Set(from._internal_subject_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.optional_subject_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.optional_subject_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_optional_subject_id().empty()) {
    _this->_impl_.optional_subject_id_.Set(from._internal_optional_subject_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_optional_relation()) {
    _this->_impl_.optional_relation_ = new ::authzed::api::v1::SubjectFilter_RelationFilter(*from._impl_.optional_relation_);
  }
  // @@protoc_insertion_point(copy_constructor:authzed.api.v1.SubjectFilter)
}

inline void SubjectFilter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.subject_type_){}
    , decltype(_impl_.optional_subject_id_){}
    , decltype(_impl_.optional_relation_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.subject_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subject_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.optional_subject_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.optional_subject_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SubjectFilter::~SubjectFilter() {
  // @@protoc_insertion_point(destructor:authzed.api.v1.SubjectFilter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SubjectFilter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.subject_type_.Destroy();
  _impl_.optional_subject_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.optional_relation_;
}

void SubjectFilter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SubjectFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:authzed.api.v1.SubjectFilter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.subject_type_.ClearToEmpty();
  _impl_.optional_subject_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.optional_relation_ != nullptr) {
    delete _impl_.optional_relation_;
  }
  _impl_.optional_relation_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubjectFilter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string subject_type = 1 [json_name = "subjectType", (.validate.rules) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_subject_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "authzed.api.v1.SubjectFilter.subject_type"));
        } else
          goto handle_unusual;
        continue;
      // string optional_subject_id = 2 [json_name = "optionalSubjectId", (.validate.rules) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_optional_subject_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "authzed.api.v1.SubjectFilter.optional_subject_id"));
        } else
          goto handle_unusual;
        continue;
      // .authzed.api.v1.SubjectFilter.RelationFilter optional_relation = 3 [json_name = "optionalRelation"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_optional_relation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubjectFilter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:authzed.api.v1.SubjectFilter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string subject_type = 1 [json_name = "subjectType", (.validate.rules) = {
  if (!this->_internal_subject_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subject_type().data(), static_cast<int>(this->_internal_subject_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "authzed.api.v1.SubjectFilter.subject_type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_subject_type(), target);
  }

  // string optional_subject_id = 2 [json_name = "optionalSubjectId", (.validate.rules) = {
  if (!this->_internal_optional_subject_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_optional_subject_id().data(), static_cast<int>(this->_internal_optional_subject_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "authzed.api.v1.SubjectFilter.optional_subject_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_optional_subject_id(), target);
  }

  // .authzed.api.v1.SubjectFilter.RelationFilter optional_relation = 3 [json_name = "optionalRelation"];
  if (this->_internal_has_optional_relation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::optional_relation(this),
        _Internal::optional_relation(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:authzed.api.v1.SubjectFilter)
  return target;
}

size_t SubjectFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:authzed.api.v1.SubjectFilter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string subject_type = 1 [json_name = "subjectType", (.validate.rules) = {
  if (!this->_internal_subject_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subject_type());
  }

  // string optional_subject_id = 2 [json_name = "optionalSubjectId", (.validate.rules) = {
  if (!this->_internal_optional_subject_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_optional_subject_id());
  }

  // .authzed.api.v1.SubjectFilter.RelationFilter optional_relation = 3 [json_name = "optionalRelation"];
  if (this->_internal_has_optional_relation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.optional_relation_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubjectFilter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SubjectFilter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubjectFilter::GetClassData() const { return &_class_data_; }


void SubjectFilter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SubjectFilter*>(&to_msg);
  auto& from = static_cast<const SubjectFilter&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:authzed.api.v1.SubjectFilter)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_subject_type().empty()) {
    _this->_internal_set_subject_type(from._internal_subject_type());
  }
  if (!from._internal_optional_subject_id().empty()) {
    _this->_internal_set_optional_subject_id(from._internal_optional_subject_id());
  }
  if (from._internal_has_optional_relation()) {
    _this->_internal_mutable_optional_relation()->::authzed::api::v1::SubjectFilter_RelationFilter::MergeFrom(
        from._internal_optional_relation());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubjectFilter::CopyFrom(const SubjectFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:authzed.api.v1.SubjectFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubjectFilter::IsInitialized() const {
  return true;
}

void SubjectFilter::InternalSwap(SubjectFilter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.subject_type_, lhs_arena,
      &other->_impl_.subject_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.optional_subject_id_, lhs_arena,
      &other->_impl_.optional_subject_id_, rhs_arena
  );
  swap(_impl_.optional_relation_, other->_impl_.optional_relation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubjectFilter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_authzed_2fapi_2fv1_2fpermission_5fservice_2eproto_getter, &descriptor_table_authzed_2fapi_2fv1_2fpermission_5fservice_2eproto_once,
      file_level_metadata_authzed_2fapi_2fv1_2fpermission_5fservice_2eproto[3]);
}

// ===================================================================

class ReadRelationshipsRequest::_Internal {
 public:
  static const ::authzed::api::v1::Consistency& consistency(const ReadRelationshipsRequest* msg);
  static const ::authzed::api::v1::RelationshipFilter& relationship_filter(const ReadRelationshipsRequest* msg);
};

const ::authzed::api::v1::Consistency&
ReadRelationshipsRequest::_Internal::consistency(const ReadRelationshipsRequest* msg) {
  return *msg->_impl_.consistency_;
}
const ::authzed::api::v1::RelationshipFilter&
ReadRelationshipsRequest::_Internal::relationship_filter(const ReadRelationshipsRequest* msg) {
  return *msg->_impl_.relationship_filter_;
}
ReadRelationshipsRequest::ReadRelationshipsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:authzed.api.v1.ReadRelationshipsRequest)
}
ReadRelationshipsRequest::ReadRelationshipsRequest(const ReadRelationshipsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReadRelationshipsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.consistency_){nullptr}
    , decltype(_impl_.relationship_filter_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_consistency()) {
    _this->_impl_.consistency_ = new ::authzed::api::v1::Consistency(*from._impl_.consistency_);
  }
  if (from._internal_has_relationship_filter()) {
    _this->_impl_.relationship_filter_ = new ::authzed::api::v1::RelationshipFilter(*from._impl_.relationship_filter_);
  }
  // @@protoc_insertion_point(copy_constructor:authzed.api.v1.ReadRelationshipsRequest)
}

inline void ReadRelationshipsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.consistency_){nullptr}
    , decltype(_impl_.relationship_filter_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ReadRelationshipsRequest::~ReadRelationshipsRequest() {
  // @@protoc_insertion_point(destructor:authzed.api.v1.ReadRelationshipsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReadRelationshipsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.consistency_;
  if (this != internal_default_instance()) delete _impl_.relationship_filter_;
}

void ReadRelationshipsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReadRelationshipsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:authzed.api.v1.ReadRelationshipsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.consistency_ != nullptr) {
    delete _impl_.consistency_;
  }
  _impl_.consistency_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.relationship_filter_ != nullptr) {
    delete _impl_.relationship_filter_;
  }
  _impl_.relationship_filter_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadRelationshipsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .authzed.api.v1.Consistency consistency = 1 [json_name = "consistency"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_consistency(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .authzed.api.v1.RelationshipFilter relationship_filter = 2 [json_name = "relationshipFilter", (.validate.rules) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_relationship_filter(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReadRelationshipsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:authzed.api.v1.ReadRelationshipsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .authzed.api.v1.Consistency consistency = 1 [json_name = "consistency"];
  if (this->_internal_has_consistency()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::consistency(this),
        _Internal::consistency(this).GetCachedSize(), target, stream);
  }

  // .authzed.api.v1.RelationshipFilter relationship_filter = 2 [json_name = "relationshipFilter", (.validate.rules) = {
  if (this->_internal_has_relationship_filter()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::relationship_filter(this),
        _Internal::relationship_filter(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:authzed.api.v1.ReadRelationshipsRequest)
  return target;
}

size_t ReadRelationshipsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:authzed.api.v1.ReadRelationshipsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .authzed.api.v1.Consistency consistency = 1 [json_name = "consistency"];
  if (this->_internal_has_consistency()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.consistency_);
  }

  // .authzed.api.v1.RelationshipFilter relationship_filter = 2 [json_name = "relationshipFilter", (.validate.rules) = {
  if (this->_internal_has_relationship_filter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.relationship_filter_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReadRelationshipsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReadRelationshipsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReadRelationshipsRequest::GetClassData() const { return &_class_data_; }


void ReadRelationshipsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReadRelationshipsRequest*>(&to_msg);
  auto& from = static_cast<const ReadRelationshipsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:authzed.api.v1.ReadRelationshipsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_consistency()) {
    _this->_internal_mutable_consistency()->::authzed::api::v1::Consistency::MergeFrom(
        from._internal_consistency());
  }
  if (from._internal_has_relationship_filter()) {
    _this->_internal_mutable_relationship_filter()->::authzed::api::v1::RelationshipFilter::MergeFrom(
        from._internal_relationship_filter());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReadRelationshipsRequest::CopyFrom(const ReadRelationshipsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:authzed.api.v1.ReadRelationshipsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadRelationshipsRequest::IsInitialized() const {
  return true;
}

void ReadRelationshipsRequest::InternalSwap(ReadRelationshipsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReadRelationshipsRequest, _impl_.relationship_filter_)
      + sizeof(ReadRelationshipsRequest::_impl_.relationship_filter_)
      - PROTOBUF_FIELD_OFFSET(ReadRelationshipsRequest, _impl_.consistency_)>(
          reinterpret_cast<char*>(&_impl_.consistency_),
          reinterpret_cast<char*>(&other->_impl_.consistency_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadRelationshipsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_authzed_2fapi_2fv1_2fpermission_5fservice_2eproto_getter, &descriptor_table_authzed_2fapi_2fv1_2fpermission_5fservice_2eproto_once,
      file_level_metadata_authzed_2fapi_2fv1_2fpermission_5fservice_2eproto[4]);
}

// ===================================================================

class ReadRelationshipsResponse::_Internal {
 public:
  static const ::authzed::api::v1::ZedToken& read_at(const ReadRelationshipsResponse* msg);
  static const ::authzed::api::v1::Relationship& relationship(const ReadRelationshipsResponse* msg);
};

const ::authzed::api::v1::ZedToken&
ReadRelationshipsResponse::_Internal::read_at(const ReadRelationshipsResponse* msg) {
  return *msg->_impl_.read_at_;
}
const ::authzed::api::v1::Relationship&
ReadRelationshipsResponse::_Internal::relationship(const ReadRelationshipsResponse* msg) {
  return *msg->_impl_.relationship_;
}
void ReadRelationshipsResponse::clear_read_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.read_at_ != nullptr) {
    delete _impl_.read_at_;
  }
  _impl_.read_at_ = nullptr;
}
void ReadRelationshipsResponse::clear_relationship() {
  if (GetArenaForAllocation() == nullptr && _impl_.relationship_ != nullptr) {
    delete _impl_.relationship_;
  }
  _impl_.relationship_ = nullptr;
}
ReadRelationshipsResponse::ReadRelationshipsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:authzed.api.v1.ReadRelationshipsResponse)
}
ReadRelationshipsResponse::ReadRelationshipsResponse(const ReadRelationshipsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReadRelationshipsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.read_at_){nullptr}
    , decltype(_impl_.relationship_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_read_at()) {
    _this->_impl_.read_at_ = new ::authzed::api::v1::ZedToken(*from._impl_.read_at_);
  }
  if (from._internal_has_relationship()) {
    _this->_impl_.relationship_ = new ::authzed::api::v1::Relationship(*from._impl_.relationship_);
  }
  // @@protoc_insertion_point(copy_constructor:authzed.api.v1.ReadRelationshipsResponse)
}

inline void ReadRelationshipsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.read_at_){nullptr}
    , decltype(_impl_.relationship_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ReadRelationshipsResponse::~ReadRelationshipsResponse() {
  // @@protoc_insertion_point(destructor:authzed.api.v1.ReadRelationshipsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReadRelationshipsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.read_at_;
  if (this != internal_default_instance()) delete _impl_.relationship_;
}

void ReadRelationshipsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReadRelationshipsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:authzed.api.v1.ReadRelationshipsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.read_at_ != nullptr) {
    delete _impl_.read_at_;
  }
  _impl_.read_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.relationship_ != nullptr) {
    delete _impl_.relationship_;
  }
  _impl_.relationship_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadRelationshipsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .authzed.api.v1.ZedToken read_at = 1 [json_name = "readAt", (.validate.rules) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_read_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .authzed.api.v1.Relationship relationship = 2 [json_name = "relationship", (.validate.rules) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_relationship(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReadRelationshipsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:authzed.api.v1.ReadRelationshipsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .authzed.api.v1.ZedToken read_at = 1 [json_name = "readAt", (.validate.rules) = {
  if (this->_internal_has_read_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::read_at(this),
        _Internal::read_at(this).GetCachedSize(), target, stream);
  }

  // .authzed.api.v1.Relationship relationship = 2 [json_name = "relationship", (.validate.rules) = {
  if (this->_internal_has_relationship()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::relationship(this),
        _Internal::relationship(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:authzed.api.v1.ReadRelationshipsResponse)
  return target;
}

size_t ReadRelationshipsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:authzed.api.v1.ReadRelationshipsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .authzed.api.v1.ZedToken read_at = 1 [json_name = "readAt", (.validate.rules) = {
  if (this->_internal_has_read_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.read_at_);
  }

  // .authzed.api.v1.Relationship relationship = 2 [json_name = "relationship", (.validate.rules) = {
  if (this->_internal_has_relationship()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.relationship_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReadRelationshipsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReadRelationshipsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReadRelationshipsResponse::GetClassData() const { return &_class_data_; }


void ReadRelationshipsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReadRelationshipsResponse*>(&to_msg);
  auto& from = static_cast<const ReadRelationshipsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:authzed.api.v1.ReadRelationshipsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_read_at()) {
    _this->_internal_mutable_read_at()->::authzed::api::v1::ZedToken::MergeFrom(
        from._internal_read_at());
  }
  if (from._internal_has_relationship()) {
    _this->_internal_mutable_relationship()->::authzed::api::v1::Relationship::MergeFrom(
        from._internal_relationship());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReadRelationshipsResponse::CopyFrom(const ReadRelationshipsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:authzed.api.v1.ReadRelationshipsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadRelationshipsResponse::IsInitialized() const {
  return true;
}

void ReadRelationshipsResponse::InternalSwap(ReadRelationshipsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReadRelationshipsResponse, _impl_.relationship_)
      + sizeof(ReadRelationshipsResponse::_impl_.relationship_)
      - PROTOBUF_FIELD_OFFSET(ReadRelationshipsResponse, _impl_.read_at_)>(
          reinterpret_cast<char*>(&_impl_.read_at_),
          reinterpret_cast<char*>(&other->_impl_.read_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadRelationshipsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_authzed_2fapi_2fv1_2fpermission_5fservice_2eproto_getter, &descriptor_table_authzed_2fapi_2fv1_2fpermission_5fservice_2eproto_once,
      file_level_metadata_authzed_2fapi_2fv1_2fpermission_5fservice_2eproto[5]);
}

// ===================================================================

class Precondition::_Internal {
 public:
  static const ::authzed::api::v1::RelationshipFilter& filter(const Precondition* msg);
};

const ::authzed::api::v1::RelationshipFilter&
Precondition::_Internal::filter(const Precondition* msg) {
  return *msg->_impl_.filter_;
}
Precondition::Precondition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:authzed.api.v1.Precondition)
}
Precondition::Precondition(const Precondition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Precondition* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.filter_){nullptr}
    , decltype(_impl_.operation_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_filter()) {
    _this->_impl_.filter_ = new ::authzed::api::v1::RelationshipFilter(*from._impl_.filter_);
  }
  _this->_impl_.operation_ = from._impl_.operation_;
  // @@protoc_insertion_point(copy_constructor:authzed.api.v1.Precondition)
}

inline void Precondition::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.filter_){nullptr}
    , decltype(_impl_.operation_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Precondition::~Precondition() {
  // @@protoc_insertion_point(destructor:authzed.api.v1.Precondition)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Precondition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.filter_;
}

void Precondition::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Precondition::Clear() {
// @@protoc_insertion_point(message_clear_start:authzed.api.v1.Precondition)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.filter_ != nullptr) {
    delete _impl_.filter_;
  }
  _impl_.filter_ = nullptr;
  _impl_.operation_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Precondition::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .authzed.api.v1.Precondition.Operation operation = 1 [json_name = "operation", (.validate.rules) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_operation(static_cast<::authzed::api::v1::Precondition_Operation>(val));
        } else
          goto handle_unusual;
        continue;
      // .authzed.api.v1.RelationshipFilter filter = 2 [json_name = "filter", (.validate.rules) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_filter(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Precondition::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:authzed.api.v1.Precondition)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .authzed.api.v1.Precondition.Operation operation = 1 [json_name = "operation", (.validate.rules) = {
  if (this->_internal_operation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_operation(), target);
  }

  // .authzed.api.v1.RelationshipFilter filter = 2 [json_name = "filter", (.validate.rules) = {
  if (this->_internal_has_filter()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::filter(this),
        _Internal::filter(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:authzed.api.v1.Precondition)
  return target;
}

size_t Precondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:authzed.api.v1.Precondition)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .authzed.api.v1.RelationshipFilter filter = 2 [json_name = "filter", (.validate.rules) = {
  if (this->_internal_has_filter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.filter_);
  }

  // .authzed.api.v1.Precondition.Operation operation = 1 [json_name = "operation", (.validate.rules) = {
  if (this->_internal_operation() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_operation());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Precondition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Precondition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Precondition::GetClassData() const { return &_class_data_; }


void Precondition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Precondition*>(&to_msg);
  auto& from = static_cast<const Precondition&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:authzed.api.v1.Precondition)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_filter()) {
    _this->_internal_mutable_filter()->::authzed::api::v1::RelationshipFilter::MergeFrom(
        from._internal_filter());
  }
  if (from._internal_operation() != 0) {
    _this->_internal_set_operation(from._internal_operation());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Precondition::CopyFrom(const Precondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:authzed.api.v1.Precondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Precondition::IsInitialized() const {
  return true;
}

void Precondition::InternalSwap(Precondition* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Precondition, _impl_.operation_)
      + sizeof(Precondition::_impl_.operation_)
      - PROTOBUF_FIELD_OFFSET(Precondition, _impl_.filter_)>(
          reinterpret_cast<char*>(&_impl_.filter_),
          reinterpret_cast<char*>(&other->_impl_.filter_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Precondition::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_authzed_2fapi_2fv1_2fpermission_5fservice_2eproto_getter, &descriptor_table_authzed_2fapi_2fv1_2fpermission_5fservice_2eproto_once,
      file_level_metadata_authzed_2fapi_2fv1_2fpermission_5fservice_2eproto[6]);
}

// ===================================================================

class WriteRelationshipsRequest::_Internal {
 public:
};

void WriteRelationshipsRequest::clear_updates() {
  _impl_.updates_.Clear();
}
WriteRelationshipsRequest::WriteRelationshipsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:authzed.api.v1.WriteRelationshipsRequest)
}
WriteRelationshipsRequest::WriteRelationshipsRequest(const WriteRelationshipsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WriteRelationshipsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.updates_){from._impl_.updates_}
    , decltype(_impl_.optional_preconditions_){from._impl_.optional_preconditions_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:authzed.api.v1.WriteRelationshipsRequest)
}

inline void WriteRelationshipsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.updates_){arena}
    , decltype(_impl_.optional_preconditions_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

WriteRelationshipsRequest::~WriteRelationshipsRequest() {
  // @@protoc_insertion_point(destructor:authzed.api.v1.WriteRelationshipsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WriteRelationshipsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.updates_.~RepeatedPtrField();
  _impl_.optional_preconditions_.~RepeatedPtrField();
}

void WriteRelationshipsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WriteRelationshipsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:authzed.api.v1.WriteRelationshipsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.updates_.Clear();
  _impl_.optional_preconditions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WriteRelationshipsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .authzed.api.v1.RelationshipUpdate updates = 1 [json_name = "updates", (.validate.rules) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_updates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .authzed.api.v1.Precondition optional_preconditions = 2 [json_name = "optionalPreconditions", (.validate.rules) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_optional_preconditions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WriteRelationshipsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:authzed.api.v1.WriteRelationshipsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .authzed.api.v1.RelationshipUpdate updates = 1 [json_name = "updates", (.validate.rules) = {
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_updates_size()); i < n; i++) {
    const auto& repfield = this->_internal_updates(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .authzed.api.v1.Precondition optional_preconditions = 2 [json_name = "optionalPreconditions", (.validate.rules) = {
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_optional_preconditions_size()); i < n; i++) {
    const auto& repfield = this->_internal_optional_preconditions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:authzed.api.v1.WriteRelationshipsRequest)
  return target;
}

size_t WriteRelationshipsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:authzed.api.v1.WriteRelationshipsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .authzed.api.v1.RelationshipUpdate updates = 1 [json_name = "updates", (.validate.rules) = {
  total_size += 1UL * this->_internal_updates_size();
  for (const auto& msg : this->_impl_.updates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .authzed.api.v1.Precondition optional_preconditions = 2 [json_name = "optionalPreconditions", (.validate.rules) = {
  total_size += 1UL * this->_internal_optional_preconditions_size();
  for (const auto& msg : this->_impl_.optional_preconditions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WriteRelationshipsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WriteRelationshipsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WriteRelationshipsRequest::GetClassData() const { return &_class_data_; }


void WriteRelationshipsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WriteRelationshipsRequest*>(&to_msg);
  auto& from = static_cast<const WriteRelationshipsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:authzed.api.v1.WriteRelationshipsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.updates_.MergeFrom(from._impl_.updates_);
  _this->_impl_.optional_preconditions_.MergeFrom(from._impl_.optional_preconditions_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WriteRelationshipsRequest::CopyFrom(const WriteRelationshipsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:authzed.api.v1.WriteRelationshipsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteRelationshipsRequest::IsInitialized() const {
  return true;
}

void WriteRelationshipsRequest::InternalSwap(WriteRelationshipsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.updates_.InternalSwap(&other->_impl_.updates_);
  _impl_.optional_preconditions_.InternalSwap(&other->_impl_.optional_preconditions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WriteRelationshipsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_authzed_2fapi_2fv1_2fpermission_5fservice_2eproto_getter, &descriptor_table_authzed_2fapi_2fv1_2fpermission_5fservice_2eproto_once,
      file_level_metadata_authzed_2fapi_2fv1_2fpermission_5fservice_2eproto[7]);
}

// ===================================================================

class WriteRelationshipsResponse::_Internal {
 public:
  static const ::authzed::api::v1::ZedToken& written_at(const WriteRelationshipsResponse* msg);
};

const ::authzed::api::v1::ZedToken&
WriteRelationshipsResponse::_Internal::written_at(const WriteRelationshipsResponse* msg) {
  return *msg->_impl_.written_at_;
}
void WriteRelationshipsResponse::clear_written_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.written_at_ != nullptr) {
    delete _impl_.written_at_;
  }
  _impl_.written_at_ = nullptr;
}
WriteRelationshipsResponse::WriteRelationshipsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:authzed.api.v1.WriteRelationshipsResponse)
}
WriteRelationshipsResponse::WriteRelationshipsResponse(const WriteRelationshipsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WriteRelationshipsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.written_at_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_written_at()) {
    _this->_impl_.written_at_ = new ::authzed::api::v1::ZedToken(*from._impl_.written_at_);
  }
  // @@protoc_insertion_point(copy_constructor:authzed.api.v1.WriteRelationshipsResponse)
}

inline void WriteRelationshipsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.written_at_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

WriteRelationshipsResponse::~WriteRelationshipsResponse() {
  // @@protoc_insertion_point(destructor:authzed.api.v1.WriteRelationshipsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WriteRelationshipsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.written_at_;
}

void WriteRelationshipsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WriteRelationshipsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:authzed.api.v1.WriteRelationshipsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.written_at_ != nullptr) {
    delete _impl_.written_at_;
  }
  _impl_.written_at_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WriteRelationshipsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .authzed.api.v1.ZedToken written_at = 1 [json_name = "writtenAt"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_written_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WriteRelationshipsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:authzed.api.v1.WriteRelationshipsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .authzed.api.v1.ZedToken written_at = 1 [json_name = "writtenAt"];
  if (this->_internal_has_written_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::written_at(this),
        _Internal::written_at(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:authzed.api.v1.WriteRelationshipsResponse)
  return target;
}

size_t WriteRelationshipsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:authzed.api.v1.WriteRelationshipsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .authzed.api.v1.ZedToken written_at = 1 [json_name = "writtenAt"];
  if (this->_internal_has_written_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.written_at_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WriteRelationshipsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WriteRelationshipsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WriteRelationshipsResponse::GetClassData() const { return &_class_data_; }


void WriteRelationshipsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WriteRelationshipsResponse*>(&to_msg);
  auto& from = static_cast<const WriteRelationshipsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:authzed.api.v1.WriteRelationshipsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_written_at()) {
    _this->_internal_mutable_written_at()->::authzed::api::v1::ZedToken::MergeFrom(
        from._internal_written_at());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WriteRelationshipsResponse::CopyFrom(const WriteRelationshipsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:authzed.api.v1.WriteRelationshipsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteRelationshipsResponse::IsInitialized() const {
  return true;
}

void WriteRelationshipsResponse::InternalSwap(WriteRelationshipsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.written_at_, other->_impl_.written_at_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WriteRelationshipsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_authzed_2fapi_2fv1_2fpermission_5fservice_2eproto_getter, &descriptor_table_authzed_2fapi_2fv1_2fpermission_5fservice_2eproto_once,
      file_level_metadata_authzed_2fapi_2fv1_2fpermission_5fservice_2eproto[8]);
}

// ===================================================================

class DeleteRelationshipsRequest::_Internal {
 public:
  static const ::authzed::api::v1::RelationshipFilter& relationship_filter(const DeleteRelationshipsRequest* msg);
};

const ::authzed::api::v1::RelationshipFilter&
DeleteRelationshipsRequest::_Internal::relationship_filter(const DeleteRelationshipsRequest* msg) {
  return *msg->_impl_.relationship_filter_;
}
DeleteRelationshipsRequest::DeleteRelationshipsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:authzed.api.v1.DeleteRelationshipsRequest)
}
DeleteRelationshipsRequest::DeleteRelationshipsRequest(const DeleteRelationshipsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeleteRelationshipsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.optional_preconditions_){from._impl_.optional_preconditions_}
    , decltype(_impl_.relationship_filter_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_relationship_filter()) {
    _this->_impl_.relationship_filter_ = new ::authzed::api::v1::RelationshipFilter(*from._impl_.relationship_filter_);
  }
  // @@protoc_insertion_point(copy_constructor:authzed.api.v1.DeleteRelationshipsRequest)
}

inline void DeleteRelationshipsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.optional_preconditions_){arena}
    , decltype(_impl_.relationship_filter_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DeleteRelationshipsRequest::~DeleteRelationshipsRequest() {
  // @@protoc_insertion_point(destructor:authzed.api.v1.DeleteRelationshipsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteRelationshipsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.optional_preconditions_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.relationship_filter_;
}

void DeleteRelationshipsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeleteRelationshipsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:authzed.api.v1.DeleteRelationshipsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.optional_preconditions_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.relationship_filter_ != nullptr) {
    delete _impl_.relationship_filter_;
  }
  _impl_.relationship_filter_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteRelationshipsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .authzed.api.v1.RelationshipFilter relationship_filter = 1 [json_name = "relationshipFilter", (.validate.rules) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_relationship_filter(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .authzed.api.v1.Precondition optional_preconditions = 2 [json_name = "optionalPreconditions", (.validate.rules) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_optional_preconditions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteRelationshipsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:authzed.api.v1.DeleteRelationshipsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .authzed.api.v1.RelationshipFilter relationship_filter = 1 [json_name = "relationshipFilter", (.validate.rules) = {
  if (this->_internal_has_relationship_filter()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::relationship_filter(this),
        _Internal::relationship_filter(this).GetCachedSize(), target, stream);
  }

  // repeated .authzed.api.v1.Precondition optional_preconditions = 2 [json_name = "optionalPreconditions", (.validate.rules) = {
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_optional_preconditions_size()); i < n; i++) {
    const auto& repfield = this->_internal_optional_preconditions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:authzed.api.v1.DeleteRelationshipsRequest)
  return target;
}

size_t DeleteRelationshipsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:authzed.api.v1.DeleteRelationshipsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .authzed.api.v1.Precondition optional_preconditions = 2 [json_name = "optionalPreconditions", (.validate.rules) = {
  total_size += 1UL * this->_internal_optional_preconditions_size();
  for (const auto& msg : this->_impl_.optional_preconditions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .authzed.api.v1.RelationshipFilter relationship_filter = 1 [json_name = "relationshipFilter", (.validate.rules) = {
  if (this->_internal_has_relationship_filter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.relationship_filter_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteRelationshipsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeleteRelationshipsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteRelationshipsRequest::GetClassData() const { return &_class_data_; }


void DeleteRelationshipsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeleteRelationshipsRequest*>(&to_msg);
  auto& from = static_cast<const DeleteRelationshipsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:authzed.api.v1.DeleteRelationshipsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.optional_preconditions_.MergeFrom(from._impl_.optional_preconditions_);
  if (from._internal_has_relationship_filter()) {
    _this->_internal_mutable_relationship_filter()->::authzed::api::v1::RelationshipFilter::MergeFrom(
        from._internal_relationship_filter());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteRelationshipsRequest::CopyFrom(const DeleteRelationshipsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:authzed.api.v1.DeleteRelationshipsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteRelationshipsRequest::IsInitialized() const {
  return true;
}

void DeleteRelationshipsRequest::InternalSwap(DeleteRelationshipsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.optional_preconditions_.InternalSwap(&other->_impl_.optional_preconditions_);
  swap(_impl_.relationship_filter_, other->_impl_.relationship_filter_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteRelationshipsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_authzed_2fapi_2fv1_2fpermission_5fservice_2eproto_getter, &descriptor_table_authzed_2fapi_2fv1_2fpermission_5fservice_2eproto_once,
      file_level_metadata_authzed_2fapi_2fv1_2fpermission_5fservice_2eproto[9]);
}

// ===================================================================

class DeleteRelationshipsResponse::_Internal {
 public:
  static const ::authzed::api::v1::ZedToken& deleted_at(const DeleteRelationshipsResponse* msg);
};

const ::authzed::api::v1::ZedToken&
DeleteRelationshipsResponse::_Internal::deleted_at(const DeleteRelationshipsResponse* msg) {
  return *msg->_impl_.deleted_at_;
}
void DeleteRelationshipsResponse::clear_deleted_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.deleted_at_ != nullptr) {
    delete _impl_.deleted_at_;
  }
  _impl_.deleted_at_ = nullptr;
}
DeleteRelationshipsResponse::DeleteRelationshipsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:authzed.api.v1.DeleteRelationshipsResponse)
}
DeleteRelationshipsResponse::DeleteRelationshipsResponse(const DeleteRelationshipsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeleteRelationshipsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.deleted_at_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_deleted_at()) {
    _this->_impl_.deleted_at_ = new ::authzed::api::v1::ZedToken(*from._impl_.deleted_at_);
  }
  // @@protoc_insertion_point(copy_constructor:authzed.api.v1.DeleteRelationshipsResponse)
}

inline void DeleteRelationshipsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.deleted_at_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DeleteRelationshipsResponse::~DeleteRelationshipsResponse() {
  // @@protoc_insertion_point(destructor:authzed.api.v1.DeleteRelationshipsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteRelationshipsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.deleted_at_;
}

void DeleteRelationshipsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeleteRelationshipsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:authzed.api.v1.DeleteRelationshipsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.deleted_at_ != nullptr) {
    delete _impl_.deleted_at_;
  }
  _impl_.deleted_at_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteRelationshipsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .authzed.api.v1.ZedToken deleted_at = 1 [json_name = "deletedAt"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_deleted_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteRelationshipsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:authzed.api.v1.DeleteRelationshipsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .authzed.api.v1.ZedToken deleted_at = 1 [json_name = "deletedAt"];
  if (this->_internal_has_deleted_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::deleted_at(this),
        _Internal::deleted_at(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:authzed.api.v1.DeleteRelationshipsResponse)
  return target;
}

size_t DeleteRelationshipsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:authzed.api.v1.DeleteRelationshipsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .authzed.api.v1.ZedToken deleted_at = 1 [json_name = "deletedAt"];
  if (this->_internal_has_deleted_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.deleted_at_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteRelationshipsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeleteRelationshipsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteRelationshipsResponse::GetClassData() const { return &_class_data_; }


void DeleteRelationshipsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeleteRelationshipsResponse*>(&to_msg);
  auto& from = static_cast<const DeleteRelationshipsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:authzed.api.v1.DeleteRelationshipsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_deleted_at()) {
    _this->_internal_mutable_deleted_at()->::authzed::api::v1::ZedToken::MergeFrom(
        from._internal_deleted_at());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteRelationshipsResponse::CopyFrom(const DeleteRelationshipsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:authzed.api.v1.DeleteRelationshipsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteRelationshipsResponse::IsInitialized() const {
  return true;
}

void DeleteRelationshipsResponse::InternalSwap(DeleteRelationshipsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.deleted_at_, other->_impl_.deleted_at_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteRelationshipsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_authzed_2fapi_2fv1_2fpermission_5fservice_2eproto_getter, &descriptor_table_authzed_2fapi_2fv1_2fpermission_5fservice_2eproto_once,
      file_level_metadata_authzed_2fapi_2fv1_2fpermission_5fservice_2eproto[10]);
}

// ===================================================================

class CheckPermissionRequest::_Internal {
 public:
  static const ::authzed::api::v1::Consistency& consistency(const CheckPermissionRequest* msg);
  static const ::authzed::api::v1::ObjectReference& resource(const CheckPermissionRequest* msg);
  static const ::authzed::api::v1::SubjectReference& subject(const CheckPermissionRequest* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Struct& context(const CheckPermissionRequest* msg);
};

const ::authzed::api::v1::Consistency&
CheckPermissionRequest::_Internal::consistency(const CheckPermissionRequest* msg) {
  return *msg->_impl_.consistency_;
}
const ::authzed::api::v1::ObjectReference&
CheckPermissionRequest::_Internal::resource(const CheckPermissionRequest* msg) {
  return *msg->_impl_.resource_;
}
const ::authzed::api::v1::SubjectReference&
CheckPermissionRequest::_Internal::subject(const CheckPermissionRequest* msg) {
  return *msg->_impl_.subject_;
}
const ::PROTOBUF_NAMESPACE_ID::Struct&
CheckPermissionRequest::_Internal::context(const CheckPermissionRequest* msg) {
  return *msg->_impl_.context_;
}
void CheckPermissionRequest::clear_resource() {
  if (GetArenaForAllocation() == nullptr && _impl_.resource_ != nullptr) {
    delete _impl_.resource_;
  }
  _impl_.resource_ = nullptr;
}
void CheckPermissionRequest::clear_subject() {
  if (GetArenaForAllocation() == nullptr && _impl_.subject_ != nullptr) {
    delete _impl_.subject_;
  }
  _impl_.subject_ = nullptr;
}
void CheckPermissionRequest::clear_context() {
  if (GetArenaForAllocation() == nullptr && _impl_.context_ != nullptr) {
    delete _impl_.context_;
  }
  _impl_.context_ = nullptr;
}
CheckPermissionRequest::CheckPermissionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:authzed.api.v1.CheckPermissionRequest)
}
CheckPermissionRequest::CheckPermissionRequest(const CheckPermissionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CheckPermissionRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.permission_){}
    , decltype(_impl_.consistency_){nullptr}
    , decltype(_impl_.resource_){nullptr}
    , decltype(_impl_.subject_){nullptr}
    , decltype(_impl_.context_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.permission_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.permission_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_permission().empty()) {
    _this->_impl_.permission_.Set(from._internal_permission(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_consistency()) {
    _this->_impl_.consistency_ = new ::authzed::api::v1::Consistency(*from._impl_.consistency_);
  }
  if (from._internal_has_resource()) {
    _this->_impl_.resource_ = new ::authzed::api::v1::ObjectReference(*from._impl_.resource_);
  }
  if (from._internal_has_subject()) {
    _this->_impl_.subject_ = new ::authzed::api::v1::SubjectReference(*from._impl_.subject_);
  }
  if (from._internal_has_context()) {
    _this->_impl_.context_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from._impl_.context_);
  }
  // @@protoc_insertion_point(copy_constructor:authzed.api.v1.CheckPermissionRequest)
}

inline void CheckPermissionRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.permission_){}
    , decltype(_impl_.consistency_){nullptr}
    , decltype(_impl_.resource_){nullptr}
    , decltype(_impl_.subject_){nullptr}
    , decltype(_impl_.context_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.permission_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.permission_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CheckPermissionRequest::~CheckPermissionRequest() {
  // @@protoc_insertion_point(destructor:authzed.api.v1.CheckPermissionRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CheckPermissionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.permission_.Destroy();
  if (this != internal_default_instance()) delete _impl_.consistency_;
  if (this != internal_default_instance()) delete _impl_.resource_;
  if (this != internal_default_instance()) delete _impl_.subject_;
  if (this != internal_default_instance()) delete _impl_.context_;
}

void CheckPermissionRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CheckPermissionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:authzed.api.v1.CheckPermissionRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.permission_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.consistency_ != nullptr) {
    delete _impl_.consistency_;
  }
  _impl_.consistency_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.resource_ != nullptr) {
    delete _impl_.resource_;
  }
  _impl_.resource_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.subject_ != nullptr) {
    delete _impl_.subject_;
  }
  _impl_.subject_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.context_ != nullptr) {
    delete _impl_.context_;
  }
  _impl_.context_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CheckPermissionRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .authzed.api.v1.Consistency consistency = 1 [json_name = "consistency"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_consistency(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .authzed.api.v1.ObjectReference resource = 2 [json_name = "resource", (.validate.rules) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_resource(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string permission = 3 [json_name = "permission", (.validate.rules) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_permission();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "authzed.api.v1.CheckPermissionRequest.permission"));
        } else
          goto handle_unusual;
        continue;
      // .authzed.api.v1.SubjectReference subject = 4 [json_name = "subject", (.validate.rules) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_subject(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct context = 5 [json_name = "context", (.validate.rules) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_context(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CheckPermissionRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:authzed.api.v1.CheckPermissionRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .authzed.api.v1.Consistency consistency = 1 [json_name = "consistency"];
  if (this->_internal_has_consistency()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::consistency(this),
        _Internal::consistency(this).GetCachedSize(), target, stream);
  }

  // .authzed.api.v1.ObjectReference resource = 2 [json_name = "resource", (.validate.rules) = {
  if (this->_internal_has_resource()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::resource(this),
        _Internal::resource(this).GetCachedSize(), target, stream);
  }

  // string permission = 3 [json_name = "permission", (.validate.rules) = {
  if (!this->_internal_permission().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_permission().data(), static_cast<int>(this->_internal_permission().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "authzed.api.v1.CheckPermissionRequest.permission");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_permission(), target);
  }

  // .authzed.api.v1.SubjectReference subject = 4 [json_name = "subject", (.validate.rules) = {
  if (this->_internal_has_subject()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::subject(this),
        _Internal::subject(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Struct context = 5 [json_name = "context", (.validate.rules) = {
  if (this->_internal_has_context()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::context(this),
        _Internal::context(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:authzed.api.v1.CheckPermissionRequest)
  return target;
}

size_t CheckPermissionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:authzed.api.v1.CheckPermissionRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string permission = 3 [json_name = "permission", (.validate.rules) = {
  if (!this->_internal_permission().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_permission());
  }

  // .authzed.api.v1.Consistency consistency = 1 [json_name = "consistency"];
  if (this->_internal_has_consistency()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.consistency_);
  }

  // .authzed.api.v1.ObjectReference resource = 2 [json_name = "resource", (.validate.rules) = {
  if (this->_internal_has_resource()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.resource_);
  }

  // .authzed.api.v1.SubjectReference subject = 4 [json_name = "subject", (.validate.rules) = {
  if (this->_internal_has_subject()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.subject_);
  }

  // .google.protobuf.Struct context = 5 [json_name = "context", (.validate.rules) = {
  if (this->_internal_has_context()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.context_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CheckPermissionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CheckPermissionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CheckPermissionRequest::GetClassData() const { return &_class_data_; }


void CheckPermissionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CheckPermissionRequest*>(&to_msg);
  auto& from = static_cast<const CheckPermissionRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:authzed.api.v1.CheckPermissionRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_permission().empty()) {
    _this->_internal_set_permission(from._internal_permission());
  }
  if (from._internal_has_consistency()) {
    _this->_internal_mutable_consistency()->::authzed::api::v1::Consistency::MergeFrom(
        from._internal_consistency());
  }
  if (from._internal_has_resource()) {
    _this->_internal_mutable_resource()->::authzed::api::v1::ObjectReference::MergeFrom(
        from._internal_resource());
  }
  if (from._internal_has_subject()) {
    _this->_internal_mutable_subject()->::authzed::api::v1::SubjectReference::MergeFrom(
        from._internal_subject());
  }
  if (from._internal_has_context()) {
    _this->_internal_mutable_context()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(
        from._internal_context());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CheckPermissionRequest::CopyFrom(const CheckPermissionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:authzed.api.v1.CheckPermissionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckPermissionRequest::IsInitialized() const {
  return true;
}

void CheckPermissionRequest::InternalSwap(CheckPermissionRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.permission_, lhs_arena,
      &other->_impl_.permission_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CheckPermissionRequest, _impl_.context_)
      + sizeof(CheckPermissionRequest::_impl_.context_)
      - PROTOBUF_FIELD_OFFSET(CheckPermissionRequest, _impl_.consistency_)>(
          reinterpret_cast<char*>(&_impl_.consistency_),
          reinterpret_cast<char*>(&other->_impl_.consistency_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CheckPermissionRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_authzed_2fapi_2fv1_2fpermission_5fservice_2eproto_getter, &descriptor_table_authzed_2fapi_2fv1_2fpermission_5fservice_2eproto_once,
      file_level_metadata_authzed_2fapi_2fv1_2fpermission_5fservice_2eproto[11]);
}

// ===================================================================

class CheckPermissionResponse::_Internal {
 public:
  static const ::authzed::api::v1::ZedToken& checked_at(const CheckPermissionResponse* msg);
  static const ::authzed::api::v1::PartialCaveatInfo& partial_caveat_info(const CheckPermissionResponse* msg);
};

const ::authzed::api::v1::ZedToken&
CheckPermissionResponse::_Internal::checked_at(const CheckPermissionResponse* msg) {
  return *msg->_impl_.checked_at_;
}
const ::authzed::api::v1::PartialCaveatInfo&
CheckPermissionResponse::_Internal::partial_caveat_info(const CheckPermissionResponse* msg) {
  return *msg->_impl_.partial_caveat_info_;
}
void CheckPermissionResponse::clear_checked_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.checked_at_ != nullptr) {
    delete _impl_.checked_at_;
  }
  _impl_.checked_at_ = nullptr;
}
void CheckPermissionResponse::clear_partial_caveat_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.partial_caveat_info_ != nullptr) {
    delete _impl_.partial_caveat_info_;
  }
  _impl_.partial_caveat_info_ = nullptr;
}
CheckPermissionResponse::CheckPermissionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:authzed.api.v1.CheckPermissionResponse)
}
CheckPermissionResponse::CheckPermissionResponse(const CheckPermissionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CheckPermissionResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.checked_at_){nullptr}
    , decltype(_impl_.partial_caveat_info_){nullptr}
    , decltype(_impl_.permissionship_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_checked_at()) {
    _this->_impl_.checked_at_ = new ::authzed::api::v1::ZedToken(*from._impl_.checked_at_);
  }
  if (from._internal_has_partial_caveat_info()) {
    _this->_impl_.partial_caveat_info_ = new ::authzed::api::v1::PartialCaveatInfo(*from._impl_.partial_caveat_info_);
  }
  _this->_impl_.permissionship_ = from._impl_.permissionship_;
  // @@protoc_insertion_point(copy_constructor:authzed.api.v1.CheckPermissionResponse)
}

inline void CheckPermissionResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.checked_at_){nullptr}
    , decltype(_impl_.partial_caveat_info_){nullptr}
    , decltype(_impl_.permissionship_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CheckPermissionResponse::~CheckPermissionResponse() {
  // @@protoc_insertion_point(destructor:authzed.api.v1.CheckPermissionResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CheckPermissionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.checked_at_;
  if (this != internal_default_instance()) delete _impl_.partial_caveat_info_;
}

void CheckPermissionResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CheckPermissionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:authzed.api.v1.CheckPermissionResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.checked_at_ != nullptr) {
    delete _impl_.checked_at_;
  }
  _impl_.checked_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.partial_caveat_info_ != nullptr) {
    delete _impl_.partial_caveat_info_;
  }
  _impl_.partial_caveat_info_ = nullptr;
  _impl_.permissionship_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CheckPermissionResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .authzed.api.v1.ZedToken checked_at = 1 [json_name = "checkedAt", (.validate.rules) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_checked_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .authzed.api.v1.CheckPermissionResponse.Permissionship permissionship = 2 [json_name = "permissionship", (.validate.rules) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_permissionship(static_cast<::authzed::api::v1::CheckPermissionResponse_Permissionship>(val));
        } else
          goto handle_unusual;
        continue;
      // .authzed.api.v1.PartialCaveatInfo partial_caveat_info = 3 [json_name = "partialCaveatInfo", (.validate.rules) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_partial_caveat_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CheckPermissionResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:authzed.api.v1.CheckPermissionResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .authzed.api.v1.ZedToken checked_at = 1 [json_name = "checkedAt", (.validate.rules) = {
  if (this->_internal_has_checked_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::checked_at(this),
        _Internal::checked_at(this).GetCachedSize(), target, stream);
  }

  // .authzed.api.v1.CheckPermissionResponse.Permissionship permissionship = 2 [json_name = "permissionship", (.validate.rules) = {
  if (this->_internal_permissionship() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_permissionship(), target);
  }

  // .authzed.api.v1.PartialCaveatInfo partial_caveat_info = 3 [json_name = "partialCaveatInfo", (.validate.rules) = {
  if (this->_internal_has_partial_caveat_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::partial_caveat_info(this),
        _Internal::partial_caveat_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:authzed.api.v1.CheckPermissionResponse)
  return target;
}

size_t CheckPermissionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:authzed.api.v1.CheckPermissionResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .authzed.api.v1.ZedToken checked_at = 1 [json_name = "checkedAt", (.validate.rules) = {
  if (this->_internal_has_checked_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.checked_at_);
  }

  // .authzed.api.v1.PartialCaveatInfo partial_caveat_info = 3 [json_name = "partialCaveatInfo", (.validate.rules) = {
  if (this->_internal_has_partial_caveat_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.partial_caveat_info_);
  }

  // .authzed.api.v1.CheckPermissionResponse.Permissionship permissionship = 2 [json_name = "permissionship", (.validate.rules) = {
  if (this->_internal_permissionship() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_permissionship());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CheckPermissionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CheckPermissionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CheckPermissionResponse::GetClassData() const { return &_class_data_; }


void CheckPermissionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CheckPermissionResponse*>(&to_msg);
  auto& from = static_cast<const CheckPermissionResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:authzed.api.v1.CheckPermissionResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_checked_at()) {
    _this->_internal_mutable_checked_at()->::authzed::api::v1::ZedToken::MergeFrom(
        from._internal_checked_at());
  }
  if (from._internal_has_partial_caveat_info()) {
    _this->_internal_mutable_partial_caveat_info()->::authzed::api::v1::PartialCaveatInfo::MergeFrom(
        from._internal_partial_caveat_info());
  }
  if (from._internal_permissionship() != 0) {
    _this->_internal_set_permissionship(from._internal_permissionship());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CheckPermissionResponse::CopyFrom(const CheckPermissionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:authzed.api.v1.CheckPermissionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckPermissionResponse::IsInitialized() const {
  return true;
}

void CheckPermissionResponse::InternalSwap(CheckPermissionResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CheckPermissionResponse, _impl_.permissionship_)
      + sizeof(CheckPermissionResponse::_impl_.permissionship_)
      - PROTOBUF_FIELD_OFFSET(CheckPermissionResponse, _impl_.checked_at_)>(
          reinterpret_cast<char*>(&_impl_.checked_at_),
          reinterpret_cast<char*>(&other->_impl_.checked_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CheckPermissionResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_authzed_2fapi_2fv1_2fpermission_5fservice_2eproto_getter, &descriptor_table_authzed_2fapi_2fv1_2fpermission_5fservice_2eproto_once,
      file_level_metadata_authzed_2fapi_2fv1_2fpermission_5fservice_2eproto[12]);
}

// ===================================================================

class ExpandPermissionTreeRequest::_Internal {
 public:
  static const ::authzed::api::v1::Consistency& consistency(const ExpandPermissionTreeRequest* msg);
  static const ::authzed::api::v1::ObjectReference& resource(const ExpandPermissionTreeRequest* msg);
};

const ::authzed::api::v1::Consistency&
ExpandPermissionTreeRequest::_Internal::consistency(const ExpandPermissionTreeRequest* msg) {
  return *msg->_impl_.consistency_;
}
const ::authzed::api::v1::ObjectReference&
ExpandPermissionTreeRequest::_Internal::resource(const ExpandPermissionTreeRequest* msg) {
  return *msg->_impl_.resource_;
}
void ExpandPermissionTreeRequest::clear_resource() {
  if (GetArenaForAllocation() == nullptr && _impl_.resource_ != nullptr) {
    delete _impl_.resource_;
  }
  _impl_.resource_ = nullptr;
}
ExpandPermissionTreeRequest::ExpandPermissionTreeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:authzed.api.v1.ExpandPermissionTreeRequest)
}
ExpandPermissionTreeRequest::ExpandPermissionTreeRequest(const ExpandPermissionTreeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExpandPermissionTreeRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.permission_){}
    , decltype(_impl_.consistency_){nullptr}
    , decltype(_impl_.resource_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.permission_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.permission_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_permission().empty()) {
    _this->_impl_.permission_.Set(from._internal_permission(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_consistency()) {
    _this->_impl_.consistency_ = new ::authzed::api::v1::Consistency(*from._impl_.consistency_);
  }
  if (from._internal_has_resource()) {
    _this->_impl_.resource_ = new ::authzed::api::v1::ObjectReference(*from._impl_.resource_);
  }
  // @@protoc_insertion_point(copy_constructor:authzed.api.v1.ExpandPermissionTreeRequest)
}

inline void ExpandPermissionTreeRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.permission_){}
    , decltype(_impl_.consistency_){nullptr}
    , decltype(_impl_.resource_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.permission_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.permission_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ExpandPermissionTreeRequest::~ExpandPermissionTreeRequest() {
  // @@protoc_insertion_point(destructor:authzed.api.v1.ExpandPermissionTreeRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExpandPermissionTreeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.permission_.Destroy();
  if (this != internal_default_instance()) delete _impl_.consistency_;
  if (this != internal_default_instance()) delete _impl_.resource_;
}

void ExpandPermissionTreeRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExpandPermissionTreeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:authzed.api.v1.ExpandPermissionTreeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.permission_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.consistency_ != nullptr) {
    delete _impl_.consistency_;
  }
  _impl_.consistency_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.resource_ != nullptr) {
    delete _impl_.resource_;
  }
  _impl_.resource_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExpandPermissionTreeRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .authzed.api.v1.Consistency consistency = 1 [json_name = "consistency"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_consistency(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .authzed.api.v1.ObjectReference resource = 2 [json_name = "resource", (.validate.rules) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_resource(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string permission = 3 [json_name = "permission", (.validate.rules) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_permission();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "authzed.api.v1.ExpandPermissionTreeRequest.permission"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExpandPermissionTreeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:authzed.api.v1.ExpandPermissionTreeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .authzed.api.v1.Consistency consistency = 1 [json_name = "consistency"];
  if (this->_internal_has_consistency()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::consistency(this),
        _Internal::consistency(this).GetCachedSize(), target, stream);
  }

  // .authzed.api.v1.ObjectReference resource = 2 [json_name = "resource", (.validate.rules) = {
  if (this->_internal_has_resource()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::resource(this),
        _Internal::resource(this).GetCachedSize(), target, stream);
  }

  // string permission = 3 [json_name = "permission", (.validate.rules) = {
  if (!this->_internal_permission().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_permission().data(), static_cast<int>(this->_internal_permission().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "authzed.api.v1.ExpandPermissionTreeRequest.permission");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_permission(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:authzed.api.v1.ExpandPermissionTreeRequest)
  return target;
}

size_t ExpandPermissionTreeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:authzed.api.v1.ExpandPermissionTreeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string permission = 3 [json_name = "permission", (.validate.rules) = {
  if (!this->_internal_permission().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_permission());
  }

  // .authzed.api.v1.Consistency consistency = 1 [json_name = "consistency"];
  if (this->_internal_has_consistency()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.consistency_);
  }

  // .authzed.api.v1.ObjectReference resource = 2 [json_name = "resource", (.validate.rules) = {
  if (this->_internal_has_resource()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.resource_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExpandPermissionTreeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExpandPermissionTreeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExpandPermissionTreeRequest::GetClassData() const { return &_class_data_; }


void ExpandPermissionTreeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExpandPermissionTreeRequest*>(&to_msg);
  auto& from = static_cast<const ExpandPermissionTreeRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:authzed.api.v1.ExpandPermissionTreeRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_permission().empty()) {
    _this->_internal_set_permission(from._internal_permission());
  }
  if (from._internal_has_consistency()) {
    _this->_internal_mutable_consistency()->::authzed::api::v1::Consistency::MergeFrom(
        from._internal_consistency());
  }
  if (from._internal_has_resource()) {
    _this->_internal_mutable_resource()->::authzed::api::v1::ObjectReference::MergeFrom(
        from._internal_resource());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExpandPermissionTreeRequest::CopyFrom(const ExpandPermissionTreeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:authzed.api.v1.ExpandPermissionTreeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExpandPermissionTreeRequest::IsInitialized() const {
  return true;
}

void ExpandPermissionTreeRequest::InternalSwap(ExpandPermissionTreeRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.permission_, lhs_arena,
      &other->_impl_.permission_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExpandPermissionTreeRequest, _impl_.resource_)
      + sizeof(ExpandPermissionTreeRequest::_impl_.resource_)
      - PROTOBUF_FIELD_OFFSET(ExpandPermissionTreeRequest, _impl_.consistency_)>(
          reinterpret_cast<char*>(&_impl_.consistency_),
          reinterpret_cast<char*>(&other->_impl_.consistency_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExpandPermissionTreeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_authzed_2fapi_2fv1_2fpermission_5fservice_2eproto_getter, &descriptor_table_authzed_2fapi_2fv1_2fpermission_5fservice_2eproto_once,
      file_level_metadata_authzed_2fapi_2fv1_2fpermission_5fservice_2eproto[13]);
}

// ===================================================================

class ExpandPermissionTreeResponse::_Internal {
 public:
  static const ::authzed::api::v1::ZedToken& expanded_at(const ExpandPermissionTreeResponse* msg);
  static const ::authzed::api::v1::PermissionRelationshipTree& tree_root(const ExpandPermissionTreeResponse* msg);
};

const ::authzed::api::v1::ZedToken&
ExpandPermissionTreeResponse::_Internal::expanded_at(const ExpandPermissionTreeResponse* msg) {
  return *msg->_impl_.expanded_at_;
}
const ::authzed::api::v1::PermissionRelationshipTree&
ExpandPermissionTreeResponse::_Internal::tree_root(const ExpandPermissionTreeResponse* msg) {
  return *msg->_impl_.tree_root_;
}
void ExpandPermissionTreeResponse::clear_expanded_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.expanded_at_ != nullptr) {
    delete _impl_.expanded_at_;
  }
  _impl_.expanded_at_ = nullptr;
}
void ExpandPermissionTreeResponse::clear_tree_root() {
  if (GetArenaForAllocation() == nullptr && _impl_.tree_root_ != nullptr) {
    delete _impl_.tree_root_;
  }
  _impl_.tree_root_ = nullptr;
}
ExpandPermissionTreeResponse::ExpandPermissionTreeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:authzed.api.v1.ExpandPermissionTreeResponse)
}
ExpandPermissionTreeResponse::ExpandPermissionTreeResponse(const ExpandPermissionTreeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExpandPermissionTreeResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.expanded_at_){nullptr}
    , decltype(_impl_.tree_root_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_expanded_at()) {
    _this->_impl_.expanded_at_ = new ::authzed::api::v1::ZedToken(*from._impl_.expanded_at_);
  }
  if (from._internal_has_tree_root()) {
    _this->_impl_.tree_root_ = new ::authzed::api::v1::PermissionRelationshipTree(*from._impl_.tree_root_);
  }
  // @@protoc_insertion_point(copy_constructor:authzed.api.v1.ExpandPermissionTreeResponse)
}

inline void ExpandPermissionTreeResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.expanded_at_){nullptr}
    , decltype(_impl_.tree_root_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ExpandPermissionTreeResponse::~ExpandPermissionTreeResponse() {
  // @@protoc_insertion_point(destructor:authzed.api.v1.ExpandPermissionTreeResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExpandPermissionTreeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.expanded_at_;
  if (this != internal_default_instance()) delete _impl_.tree_root_;
}

void ExpandPermissionTreeResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExpandPermissionTreeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:authzed.api.v1.ExpandPermissionTreeResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.expanded_at_ != nullptr) {
    delete _impl_.expanded_at_;
  }
  _impl_.expanded_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.tree_root_ != nullptr) {
    delete _impl_.tree_root_;
  }
  _impl_.tree_root_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExpandPermissionTreeResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .authzed.api.v1.ZedToken expanded_at = 1 [json_name = "expandedAt"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_expanded_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .authzed.api.v1.PermissionRelationshipTree tree_root = 2 [json_name = "treeRoot"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tree_root(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExpandPermissionTreeResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:authzed.api.v1.ExpandPermissionTreeResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .authzed.api.v1.ZedToken expanded_at = 1 [json_name = "expandedAt"];
  if (this->_internal_has_expanded_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::expanded_at(this),
        _Internal::expanded_at(this).GetCachedSize(), target, stream);
  }

  // .authzed.api.v1.PermissionRelationshipTree tree_root = 2 [json_name = "treeRoot"];
  if (this->_internal_has_tree_root()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::tree_root(this),
        _Internal::tree_root(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:authzed.api.v1.ExpandPermissionTreeResponse)
  return target;
}

size_t ExpandPermissionTreeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:authzed.api.v1.ExpandPermissionTreeResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .authzed.api.v1.ZedToken expanded_at = 1 [json_name = "expandedAt"];
  if (this->_internal_has_expanded_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.expanded_at_);
  }

  // .authzed.api.v1.PermissionRelationshipTree tree_root = 2 [json_name = "treeRoot"];
  if (this->_internal_has_tree_root()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tree_root_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExpandPermissionTreeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExpandPermissionTreeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExpandPermissionTreeResponse::GetClassData() const { return &_class_data_; }


void ExpandPermissionTreeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExpandPermissionTreeResponse*>(&to_msg);
  auto& from = static_cast<const ExpandPermissionTreeResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:authzed.api.v1.ExpandPermissionTreeResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_expanded_at()) {
    _this->_internal_mutable_expanded_at()->::authzed::api::v1::ZedToken::MergeFrom(
        from._internal_expanded_at());
  }
  if (from._internal_has_tree_root()) {
    _this->_internal_mutable_tree_root()->::authzed::api::v1::PermissionRelationshipTree::MergeFrom(
        from._internal_tree_root());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExpandPermissionTreeResponse::CopyFrom(const ExpandPermissionTreeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:authzed.api.v1.ExpandPermissionTreeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExpandPermissionTreeResponse::IsInitialized() const {
  return true;
}

void ExpandPermissionTreeResponse::InternalSwap(ExpandPermissionTreeResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExpandPermissionTreeResponse, _impl_.tree_root_)
      + sizeof(ExpandPermissionTreeResponse::_impl_.tree_root_)
      - PROTOBUF_FIELD_OFFSET(ExpandPermissionTreeResponse, _impl_.expanded_at_)>(
          reinterpret_cast<char*>(&_impl_.expanded_at_),
          reinterpret_cast<char*>(&other->_impl_.expanded_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExpandPermissionTreeResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_authzed_2fapi_2fv1_2fpermission_5fservice_2eproto_getter, &descriptor_table_authzed_2fapi_2fv1_2fpermission_5fservice_2eproto_once,
      file_level_metadata_authzed_2fapi_2fv1_2fpermission_5fservice_2eproto[14]);
}

// ===================================================================

class LookupResourcesRequest::_Internal {
 public:
  static const ::authzed::api::v1::Consistency& consistency(const LookupResourcesRequest* msg);
  static const ::authzed::api::v1::SubjectReference& subject(const LookupResourcesRequest* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Struct& context(const LookupResourcesRequest* msg);
};

const ::authzed::api::v1::Consistency&
LookupResourcesRequest::_Internal::consistency(const LookupResourcesRequest* msg) {
  return *msg->_impl_.consistency_;
}
const ::authzed::api::v1::SubjectReference&
LookupResourcesRequest::_Internal::subject(const LookupResourcesRequest* msg) {
  return *msg->_impl_.subject_;
}
const ::PROTOBUF_NAMESPACE_ID::Struct&
LookupResourcesRequest::_Internal::context(const LookupResourcesRequest* msg) {
  return *msg->_impl_.context_;
}
void LookupResourcesRequest::clear_subject() {
  if (GetArenaForAllocation() == nullptr && _impl_.subject_ != nullptr) {
    delete _impl_.subject_;
  }
  _impl_.subject_ = nullptr;
}
void LookupResourcesRequest::clear_context() {
  if (GetArenaForAllocation() == nullptr && _impl_.context_ != nullptr) {
    delete _impl_.context_;
  }
  _impl_.context_ = nullptr;
}
LookupResourcesRequest::LookupResourcesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:authzed.api.v1.LookupResourcesRequest)
}
LookupResourcesRequest::LookupResourcesRequest(const LookupResourcesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LookupResourcesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.resource_object_type_){}
    , decltype(_impl_.permission_){}
    , decltype(_impl_.consistency_){nullptr}
    , decltype(_impl_.subject_){nullptr}
    , decltype(_impl_.context_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.resource_object_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.resource_object_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_resource_object_type().empty()) {
    _this->_impl_.resource_object_type_.Set(from._internal_resource_object_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.permission_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.permission_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_permission().empty()) {
    _this->_impl_.permission_.Set(from._internal_permission(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_consistency()) {
    _this->_impl_.consistency_ = new ::authzed::api::v1::Consistency(*from._impl_.consistency_);
  }
  if (from._internal_has_subject()) {
    _this->_impl_.subject_ = new ::authzed::api::v1::SubjectReference(*from._impl_.subject_);
  }
  if (from._internal_has_context()) {
    _this->_impl_.context_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from._impl_.context_);
  }
  // @@protoc_insertion_point(copy_constructor:authzed.api.v1.LookupResourcesRequest)
}

inline void LookupResourcesRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.resource_object_type_){}
    , decltype(_impl_.permission_){}
    , decltype(_impl_.consistency_){nullptr}
    , decltype(_impl_.subject_){nullptr}
    , decltype(_impl_.context_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.resource_object_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.resource_object_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.permission_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.permission_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LookupResourcesRequest::~LookupResourcesRequest() {
  // @@protoc_insertion_point(destructor:authzed.api.v1.LookupResourcesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LookupResourcesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.resource_object_type_.Destroy();
  _impl_.permission_.Destroy();
  if (this != internal_default_instance()) delete _impl_.consistency_;
  if (this != internal_default_instance()) delete _impl_.subject_;
  if (this != internal_default_instance()) delete _impl_.context_;
}

void LookupResourcesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LookupResourcesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:authzed.api.v1.LookupResourcesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.resource_object_type_.ClearToEmpty();
  _impl_.permission_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.consistency_ != nullptr) {
    delete _impl_.consistency_;
  }
  _impl_.consistency_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.subject_ != nullptr) {
    delete _impl_.subject_;
  }
  _impl_.subject_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.context_ != nullptr) {
    delete _impl_.context_;
  }
  _impl_.context_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LookupResourcesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .authzed.api.v1.Consistency consistency = 1 [json_name = "consistency"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_consistency(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string resource_object_type = 2 [json_name = "resourceObjectType", (.validate.rules) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_resource_object_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "authzed.api.v1.LookupResourcesRequest.resource_object_type"));
        } else
          goto handle_unusual;
        continue;
      // string permission = 3 [json_name = "permission", (.validate.rules) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_permission();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "authzed.api.v1.LookupResourcesRequest.permission"));
        } else
          goto handle_unusual;
        continue;
      // .authzed.api.v1.SubjectReference subject = 4 [json_name = "subject", (.validate.rules) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_subject(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct context = 5 [json_name = "context", (.validate.rules) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_context(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LookupResourcesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:authzed.api.v1.LookupResourcesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .authzed.api.v1.Consistency consistency = 1 [json_name = "consistency"];
  if (this->_internal_has_consistency()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::consistency(this),
        _Internal::consistency(this).GetCachedSize(), target, stream);
  }

  // string resource_object_type = 2 [json_name = "resourceObjectType", (.validate.rules) = {
  if (!this->_internal_resource_object_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resource_object_type().data(), static_cast<int>(this->_internal_resource_object_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "authzed.api.v1.LookupResourcesRequest.resource_object_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_resource_object_type(), target);
  }

  // string permission = 3 [json_name = "permission", (.validate.rules) = {
  if (!this->_internal_permission().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_permission().data(), static_cast<int>(this->_internal_permission().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "authzed.api.v1.LookupResourcesRequest.permission");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_permission(), target);
  }

  // .authzed.api.v1.SubjectReference subject = 4 [json_name = "subject", (.validate.rules) = {
  if (this->_internal_has_subject()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::subject(this),
        _Internal::subject(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Struct context = 5 [json_name = "context", (.validate.rules) = {
  if (this->_internal_has_context()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::context(this),
        _Internal::context(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:authzed.api.v1.LookupResourcesRequest)
  return target;
}

size_t LookupResourcesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:authzed.api.v1.LookupResourcesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string resource_object_type = 2 [json_name = "resourceObjectType", (.validate.rules) = {
  if (!this->_internal_resource_object_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_resource_object_type());
  }

  // string permission = 3 [json_name = "permission", (.validate.rules) = {
  if (!this->_internal_permission().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_permission());
  }

  // .authzed.api.v1.Consistency consistency = 1 [json_name = "consistency"];
  if (this->_internal_has_consistency()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.consistency_);
  }

  // .authzed.api.v1.SubjectReference subject = 4 [json_name = "subject", (.validate.rules) = {
  if (this->_internal_has_subject()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.subject_);
  }

  // .google.protobuf.Struct context = 5 [json_name = "context", (.validate.rules) = {
  if (this->_internal_has_context()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.context_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LookupResourcesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LookupResourcesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LookupResourcesRequest::GetClassData() const { return &_class_data_; }


void LookupResourcesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LookupResourcesRequest*>(&to_msg);
  auto& from = static_cast<const LookupResourcesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:authzed.api.v1.LookupResourcesRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_resource_object_type().empty()) {
    _this->_internal_set_resource_object_type(from._internal_resource_object_type());
  }
  if (!from._internal_permission().empty()) {
    _this->_internal_set_permission(from._internal_permission());
  }
  if (from._internal_has_consistency()) {
    _this->_internal_mutable_consistency()->::authzed::api::v1::Consistency::MergeFrom(
        from._internal_consistency());
  }
  if (from._internal_has_subject()) {
    _this->_internal_mutable_subject()->::authzed::api::v1::SubjectReference::MergeFrom(
        from._internal_subject());
  }
  if (from._internal_has_context()) {
    _this->_internal_mutable_context()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(
        from._internal_context());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LookupResourcesRequest::CopyFrom(const LookupResourcesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:authzed.api.v1.LookupResourcesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LookupResourcesRequest::IsInitialized() const {
  return true;
}

void LookupResourcesRequest::InternalSwap(LookupResourcesRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.resource_object_type_, lhs_arena,
      &other->_impl_.resource_object_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.permission_, lhs_arena,
      &other->_impl_.permission_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LookupResourcesRequest, _impl_.context_)
      + sizeof(LookupResourcesRequest::_impl_.context_)
      - PROTOBUF_FIELD_OFFSET(LookupResourcesRequest, _impl_.consistency_)>(
          reinterpret_cast<char*>(&_impl_.consistency_),
          reinterpret_cast<char*>(&other->_impl_.consistency_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LookupResourcesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_authzed_2fapi_2fv1_2fpermission_5fservice_2eproto_getter, &descriptor_table_authzed_2fapi_2fv1_2fpermission_5fservice_2eproto_once,
      file_level_metadata_authzed_2fapi_2fv1_2fpermission_5fservice_2eproto[15]);
}

// ===================================================================

class LookupResourcesResponse::_Internal {
 public:
  static const ::authzed::api::v1::ZedToken& looked_up_at(const LookupResourcesResponse* msg);
  static const ::authzed::api::v1::PartialCaveatInfo& partial_caveat_info(const LookupResourcesResponse* msg);
};

const ::authzed::api::v1::ZedToken&
LookupResourcesResponse::_Internal::looked_up_at(const LookupResourcesResponse* msg) {
  return *msg->_impl_.looked_up_at_;
}
const ::authzed::api::v1::PartialCaveatInfo&
LookupResourcesResponse::_Internal::partial_caveat_info(const LookupResourcesResponse* msg) {
  return *msg->_impl_.partial_caveat_info_;
}
void LookupResourcesResponse::clear_looked_up_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.looked_up_at_ != nullptr) {
    delete _impl_.looked_up_at_;
  }
  _impl_.looked_up_at_ = nullptr;
}
void LookupResourcesResponse::clear_partial_caveat_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.partial_caveat_info_ != nullptr) {
    delete _impl_.partial_caveat_info_;
  }
  _impl_.partial_caveat_info_ = nullptr;
}
LookupResourcesResponse::LookupResourcesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:authzed.api.v1.LookupResourcesResponse)
}
LookupResourcesResponse::LookupResourcesResponse(const LookupResourcesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LookupResourcesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.resource_object_id_){}
    , decltype(_impl_.looked_up_at_){nullptr}
    , decltype(_impl_.partial_caveat_info_){nullptr}
    , decltype(_impl_.permissionship_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.resource_object_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.resource_object_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_resource_object_id().empty()) {
    _this->_impl_.resource_object_id_.Set(from._internal_resource_object_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_looked_up_at()) {
    _this->_impl_.looked_up_at_ = new ::authzed::api::v1::ZedToken(*from._impl_.looked_up_at_);
  }
  if (from._internal_has_partial_caveat_info()) {
    _this->_impl_.partial_caveat_info_ = new ::authzed::api::v1::PartialCaveatInfo(*from._impl_.partial_caveat_info_);
  }
  _this->_impl_.permissionship_ = from._impl_.permissionship_;
  // @@protoc_insertion_point(copy_constructor:authzed.api.v1.LookupResourcesResponse)
}

inline void LookupResourcesResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.resource_object_id_){}
    , decltype(_impl_.looked_up_at_){nullptr}
    , decltype(_impl_.partial_caveat_info_){nullptr}
    , decltype(_impl_.permissionship_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.resource_object_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.resource_object_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LookupResourcesResponse::~LookupResourcesResponse() {
  // @@protoc_insertion_point(destructor:authzed.api.v1.LookupResourcesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LookupResourcesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.resource_object_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.looked_up_at_;
  if (this != internal_default_instance()) delete _impl_.partial_caveat_info_;
}

void LookupResourcesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LookupResourcesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:authzed.api.v1.LookupResourcesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.resource_object_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.looked_up_at_ != nullptr) {
    delete _impl_.looked_up_at_;
  }
  _impl_.looked_up_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.partial_caveat_info_ != nullptr) {
    delete _impl_.partial_caveat_info_;
  }
  _impl_.partial_caveat_info_ = nullptr;
  _impl_.permissionship_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LookupResourcesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .authzed.api.v1.ZedToken looked_up_at = 1 [json_name = "lookedUpAt"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_looked_up_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string resource_object_id = 2 [json_name = "resourceObjectId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_resource_object_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "authzed.api.v1.LookupResourcesResponse.resource_object_id"));
        } else
          goto handle_unusual;
        continue;
      // .authzed.api.v1.LookupPermissionship permissionship = 3 [json_name = "permissionship", (.validate.rules) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_permissionship(static_cast<::authzed::api::v1::LookupPermissionship>(val));
        } else
          goto handle_unusual;
        continue;
      // .authzed.api.v1.PartialCaveatInfo partial_caveat_info = 4 [json_name = "partialCaveatInfo", (.validate.rules) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_partial_caveat_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LookupResourcesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:authzed.api.v1.LookupResourcesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .authzed.api.v1.ZedToken looked_up_at = 1 [json_name = "lookedUpAt"];
  if (this->_internal_has_looked_up_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::looked_up_at(this),
        _Internal::looked_up_at(this).GetCachedSize(), target, stream);
  }

  // string resource_object_id = 2 [json_name = "resourceObjectId"];
  if (!this->_internal_resource_object_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resource_object_id().data(), static_cast<int>(this->_internal_resource_object_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "authzed.api.v1.LookupResourcesResponse.resource_object_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_resource_object_id(), target);
  }

  // .authzed.api.v1.LookupPermissionship permissionship = 3 [json_name = "permissionship", (.validate.rules) = {
  if (this->_internal_permissionship() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_permissionship(), target);
  }

  // .authzed.api.v1.PartialCaveatInfo partial_caveat_info = 4 [json_name = "partialCaveatInfo", (.validate.rules) = {
  if (this->_internal_has_partial_caveat_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::partial_caveat_info(this),
        _Internal::partial_caveat_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:authzed.api.v1.LookupResourcesResponse)
  return target;
}

size_t LookupResourcesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:authzed.api.v1.LookupResourcesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string resource_object_id = 2 [json_name = "resourceObjectId"];
  if (!this->_internal_resource_object_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_resource_object_id());
  }

  // .authzed.api.v1.ZedToken looked_up_at = 1 [json_name = "lookedUpAt"];
  if (this->_internal_has_looked_up_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.looked_up_at_);
  }

  // .authzed.api.v1.PartialCaveatInfo partial_caveat_info = 4 [json_name = "partialCaveatInfo", (.validate.rules) = {
  if (this->_internal_has_partial_caveat_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.partial_caveat_info_);
  }

  // .authzed.api.v1.LookupPermissionship permissionship = 3 [json_name = "permissionship", (.validate.rules) = {
  if (this->_internal_permissionship() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_permissionship());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LookupResourcesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LookupResourcesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LookupResourcesResponse::GetClassData() const { return &_class_data_; }


void LookupResourcesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LookupResourcesResponse*>(&to_msg);
  auto& from = static_cast<const LookupResourcesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:authzed.api.v1.LookupResourcesResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_resource_object_id().empty()) {
    _this->_internal_set_resource_object_id(from._internal_resource_object_id());
  }
  if (from._internal_has_looked_up_at()) {
    _this->_internal_mutable_looked_up_at()->::authzed::api::v1::ZedToken::MergeFrom(
        from._internal_looked_up_at());
  }
  if (from._internal_has_partial_caveat_info()) {
    _this->_internal_mutable_partial_caveat_info()->::authzed::api::v1::PartialCaveatInfo::MergeFrom(
        from._internal_partial_caveat_info());
  }
  if (from._internal_permissionship() != 0) {
    _this->_internal_set_permissionship(from._internal_permissionship());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LookupResourcesResponse::CopyFrom(const LookupResourcesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:authzed.api.v1.LookupResourcesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LookupResourcesResponse::IsInitialized() const {
  return true;
}

void LookupResourcesResponse::InternalSwap(LookupResourcesResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.resource_object_id_, lhs_arena,
      &other->_impl_.resource_object_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LookupResourcesResponse, _impl_.permissionship_)
      + sizeof(LookupResourcesResponse::_impl_.permissionship_)
      - PROTOBUF_FIELD_OFFSET(LookupResourcesResponse, _impl_.looked_up_at_)>(
          reinterpret_cast<char*>(&_impl_.looked_up_at_),
          reinterpret_cast<char*>(&other->_impl_.looked_up_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LookupResourcesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_authzed_2fapi_2fv1_2fpermission_5fservice_2eproto_getter, &descriptor_table_authzed_2fapi_2fv1_2fpermission_5fservice_2eproto_once,
      file_level_metadata_authzed_2fapi_2fv1_2fpermission_5fservice_2eproto[16]);
}

// ===================================================================

class LookupSubjectsRequest::_Internal {
 public:
  static const ::authzed::api::v1::Consistency& consistency(const LookupSubjectsRequest* msg);
  static const ::authzed::api::v1::ObjectReference& resource(const LookupSubjectsRequest* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Struct& context(const LookupSubjectsRequest* msg);
};

const ::authzed::api::v1::Consistency&
LookupSubjectsRequest::_Internal::consistency(const LookupSubjectsRequest* msg) {
  return *msg->_impl_.consistency_;
}
const ::authzed::api::v1::ObjectReference&
LookupSubjectsRequest::_Internal::resource(const LookupSubjectsRequest* msg) {
  return *msg->_impl_.resource_;
}
const ::PROTOBUF_NAMESPACE_ID::Struct&
LookupSubjectsRequest::_Internal::context(const LookupSubjectsRequest* msg) {
  return *msg->_impl_.context_;
}
void LookupSubjectsRequest::clear_resource() {
  if (GetArenaForAllocation() == nullptr && _impl_.resource_ != nullptr) {
    delete _impl_.resource_;
  }
  _impl_.resource_ = nullptr;
}
void LookupSubjectsRequest::clear_context() {
  if (GetArenaForAllocation() == nullptr && _impl_.context_ != nullptr) {
    delete _impl_.context_;
  }
  _impl_.context_ = nullptr;
}
LookupSubjectsRequest::LookupSubjectsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:authzed.api.v1.LookupSubjectsRequest)
}
LookupSubjectsRequest::LookupSubjectsRequest(const LookupSubjectsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LookupSubjectsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.permission_){}
    , decltype(_impl_.subject_object_type_){}
    , decltype(_impl_.optional_subject_relation_){}
    , decltype(_impl_.consistency_){nullptr}
    , decltype(_impl_.resource_){nullptr}
    , decltype(_impl_.context_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.permission_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.permission_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_permission().empty()) {
    _this->_impl_.permission_.Set(from._internal_permission(), 
      _this->GetArenaForAllocation());
  }
  _impl_.subject_object_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subject_object_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subject_object_type().empty()) {
    _this->_impl_.subject_object_type_.Set(from._internal_subject_object_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.optional_subject_relation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.optional_subject_relation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_optional_subject_relation().empty()) {
    _this->_impl_.optional_subject_relation_.Set(from._internal_optional_subject_relation(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_consistency()) {
    _this->_impl_.consistency_ = new ::authzed::api::v1::Consistency(*from._impl_.consistency_);
  }
  if (from._internal_has_resource()) {
    _this->_impl_.resource_ = new ::authzed::api::v1::ObjectReference(*from._impl_.resource_);
  }
  if (from._internal_has_context()) {
    _this->_impl_.context_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from._impl_.context_);
  }
  // @@protoc_insertion_point(copy_constructor:authzed.api.v1.LookupSubjectsRequest)
}

inline void LookupSubjectsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.permission_){}
    , decltype(_impl_.subject_object_type_){}
    , decltype(_impl_.optional_subject_relation_){}
    , decltype(_impl_.consistency_){nullptr}
    , decltype(_impl_.resource_){nullptr}
    , decltype(_impl_.context_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.permission_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.permission_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.subject_object_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subject_object_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.optional_subject_relation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.optional_subject_relation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LookupSubjectsRequest::~LookupSubjectsRequest() {
  // @@protoc_insertion_point(destructor:authzed.api.v1.LookupSubjectsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LookupSubjectsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.permission_.Destroy();
  _impl_.subject_object_type_.Destroy();
  _impl_.optional_subject_relation_.Destroy();
  if (this != internal_default_instance()) delete _impl_.consistency_;
  if (this != internal_default_instance()) delete _impl_.resource_;
  if (this != internal_default_instance()) delete _impl_.context_;
}

void LookupSubjectsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LookupSubjectsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:authzed.api.v1.LookupSubjectsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.permission_.ClearToEmpty();
  _impl_.subject_object_type_.ClearToEmpty();
  _impl_.optional_subject_relation_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.consistency_ != nullptr) {
    delete _impl_.consistency_;
  }
  _impl_.consistency_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.resource_ != nullptr) {
    delete _impl_.resource_;
  }
  _impl_.resource_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.context_ != nullptr) {
    delete _impl_.context_;
  }
  _impl_.context_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LookupSubjectsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .authzed.api.v1.Consistency consistency = 1 [json_name = "consistency"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_consistency(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .authzed.api.v1.ObjectReference resource = 2 [json_name = "resource", (.validate.rules) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_resource(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string permission = 3 [json_name = "permission", (.validate.rules) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_permission();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "authzed.api.v1.LookupSubjectsRequest.permission"));
        } else
          goto handle_unusual;
        continue;
      // string subject_object_type = 4 [json_name = "subjectObjectType", (.validate.rules) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_subject_object_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "authzed.api.v1.LookupSubjectsRequest.subject_object_type"));
        } else
          goto handle_unusual;
        continue;
      // string optional_subject_relation = 5 [json_name = "optionalSubjectRelation", (.validate.rules) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_optional_subject_relation();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "authzed.api.v1.LookupSubjectsRequest.optional_subject_relation"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct context = 6 [json_name = "context", (.validate.rules) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_context(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LookupSubjectsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:authzed.api.v1.LookupSubjectsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .authzed.api.v1.Consistency consistency = 1 [json_name = "consistency"];
  if (this->_internal_has_consistency()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::consistency(this),
        _Internal::consistency(this).GetCachedSize(), target, stream);
  }

  // .authzed.api.v1.ObjectReference resource = 2 [json_name = "resource", (.validate.rules) = {
  if (this->_internal_has_resource()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::resource(this),
        _Internal::resource(this).GetCachedSize(), target, stream);
  }

  // string permission = 3 [json_name = "permission", (.validate.rules) = {
  if (!this->_internal_permission().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_permission().data(), static_cast<int>(this->_internal_permission().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "authzed.api.v1.LookupSubjectsRequest.permission");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_permission(), target);
  }

  // string subject_object_type = 4 [json_name = "subjectObjectType", (.validate.rules) = {
  if (!this->_internal_subject_object_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subject_object_type().data(), static_cast<int>(this->_internal_subject_object_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "authzed.api.v1.LookupSubjectsRequest.subject_object_type");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_subject_object_type(), target);
  }

  // string optional_subject_relation = 5 [json_name = "optionalSubjectRelation", (.validate.rules) = {
  if (!this->_internal_optional_subject_relation().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_optional_subject_relation().data(), static_cast<int>(this->_internal_optional_subject_relation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "authzed.api.v1.LookupSubjectsRequest.optional_subject_relation");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_optional_subject_relation(), target);
  }

  // .google.protobuf.Struct context = 6 [json_name = "context", (.validate.rules) = {
  if (this->_internal_has_context()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::context(this),
        _Internal::context(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:authzed.api.v1.LookupSubjectsRequest)
  return target;
}

size_t LookupSubjectsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:authzed.api.v1.LookupSubjectsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string permission = 3 [json_name = "permission", (.validate.rules) = {
  if (!this->_internal_permission().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_permission());
  }

  // string subject_object_type = 4 [json_name = "subjectObjectType", (.validate.rules) = {
  if (!this->_internal_subject_object_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subject_object_type());
  }

  // string optional_subject_relation = 5 [json_name = "optionalSubjectRelation", (.validate.rules) = {
  if (!this->_internal_optional_subject_relation().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_optional_subject_relation());
  }

  // .authzed.api.v1.Consistency consistency = 1 [json_name = "consistency"];
  if (this->_internal_has_consistency()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.consistency_);
  }

  // .authzed.api.v1.ObjectReference resource = 2 [json_name = "resource", (.validate.rules) = {
  if (this->_internal_has_resource()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.resource_);
  }

  // .google.protobuf.Struct context = 6 [json_name = "context", (.validate.rules) = {
  if (this->_internal_has_context()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.context_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LookupSubjectsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LookupSubjectsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LookupSubjectsRequest::GetClassData() const { return &_class_data_; }


void LookupSubjectsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LookupSubjectsRequest*>(&to_msg);
  auto& from = static_cast<const LookupSubjectsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:authzed.api.v1.LookupSubjectsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_permission().empty()) {
    _this->_internal_set_permission(from._internal_permission());
  }
  if (!from._internal_subject_object_type().empty()) {
    _this->_internal_set_subject_object_type(from._internal_subject_object_type());
  }
  if (!from._internal_optional_subject_relation().empty()) {
    _this->_internal_set_optional_subject_relation(from._internal_optional_subject_relation());
  }
  if (from._internal_has_consistency()) {
    _this->_internal_mutable_consistency()->::authzed::api::v1::Consistency::MergeFrom(
        from._internal_consistency());
  }
  if (from._internal_has_resource()) {
    _this->_internal_mutable_resource()->::authzed::api::v1::ObjectReference::MergeFrom(
        from._internal_resource());
  }
  if (from._internal_has_context()) {
    _this->_internal_mutable_context()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(
        from._internal_context());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LookupSubjectsRequest::CopyFrom(const LookupSubjectsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:authzed.api.v1.LookupSubjectsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LookupSubjectsRequest::IsInitialized() const {
  return true;
}

void LookupSubjectsRequest::InternalSwap(LookupSubjectsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.permission_, lhs_arena,
      &other->_impl_.permission_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.subject_object_type_, lhs_arena,
      &other->_impl_.subject_object_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.optional_subject_relation_, lhs_arena,
      &other->_impl_.optional_subject_relation_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LookupSubjectsRequest, _impl_.context_)
      + sizeof(LookupSubjectsRequest::_impl_.context_)
      - PROTOBUF_FIELD_OFFSET(LookupSubjectsRequest, _impl_.consistency_)>(
          reinterpret_cast<char*>(&_impl_.consistency_),
          reinterpret_cast<char*>(&other->_impl_.consistency_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LookupSubjectsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_authzed_2fapi_2fv1_2fpermission_5fservice_2eproto_getter, &descriptor_table_authzed_2fapi_2fv1_2fpermission_5fservice_2eproto_once,
      file_level_metadata_authzed_2fapi_2fv1_2fpermission_5fservice_2eproto[17]);
}

// ===================================================================

class LookupSubjectsResponse::_Internal {
 public:
  static const ::authzed::api::v1::ZedToken& looked_up_at(const LookupSubjectsResponse* msg);
  static const ::authzed::api::v1::PartialCaveatInfo& partial_caveat_info(const LookupSubjectsResponse* msg);
  static const ::authzed::api::v1::ResolvedSubject& subject(const LookupSubjectsResponse* msg);
};

const ::authzed::api::v1::ZedToken&
LookupSubjectsResponse::_Internal::looked_up_at(const LookupSubjectsResponse* msg) {
  return *msg->_impl_.looked_up_at_;
}
const ::authzed::api::v1::PartialCaveatInfo&
LookupSubjectsResponse::_Internal::partial_caveat_info(const LookupSubjectsResponse* msg) {
  return *msg->_impl_.partial_caveat_info_;
}
const ::authzed::api::v1::ResolvedSubject&
LookupSubjectsResponse::_Internal::subject(const LookupSubjectsResponse* msg) {
  return *msg->_impl_.subject_;
}
void LookupSubjectsResponse::clear_looked_up_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.looked_up_at_ != nullptr) {
    delete _impl_.looked_up_at_;
  }
  _impl_.looked_up_at_ = nullptr;
}
void LookupSubjectsResponse::clear_partial_caveat_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.partial_caveat_info_ != nullptr) {
    delete _impl_.partial_caveat_info_;
  }
  _impl_.partial_caveat_info_ = nullptr;
}
LookupSubjectsResponse::LookupSubjectsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:authzed.api.v1.LookupSubjectsResponse)
}
LookupSubjectsResponse::LookupSubjectsResponse(const LookupSubjectsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LookupSubjectsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.excluded_subject_ids_){from._impl_.excluded_subject_ids_}
    , decltype(_impl_.excluded_subjects_){from._impl_.excluded_subjects_}
    , decltype(_impl_.subject_object_id_){}
    , decltype(_impl_.looked_up_at_){nullptr}
    , decltype(_impl_.partial_caveat_info_){nullptr}
    , decltype(_impl_.subject_){nullptr}
    , decltype(_impl_.permissionship_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.subject_object_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subject_object_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subject_object_id().empty()) {
    _this->_impl_.subject_object_id_.Set(from._internal_subject_object_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_looked_up_at()) {
    _this->_impl_.looked_up_at_ = new ::authzed::api::v1::ZedToken(*from._impl_.looked_up_at_);
  }
  if (from._internal_has_partial_caveat_info()) {
    _this->_impl_.partial_caveat_info_ = new ::authzed::api::v1::PartialCaveatInfo(*from._impl_.partial_caveat_info_);
  }
  if (from._internal_has_subject()) {
    _this->_impl_.subject_ = new ::authzed::api::v1::ResolvedSubject(*from._impl_.subject_);
  }
  _this->_impl_.permissionship_ = from._impl_.permissionship_;
  // @@protoc_insertion_point(copy_constructor:authzed.api.v1.LookupSubjectsResponse)
}

inline void LookupSubjectsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.excluded_subject_ids_){arena}
    , decltype(_impl_.excluded_subjects_){arena}
    , decltype(_impl_.subject_object_id_){}
    , decltype(_impl_.looked_up_at_){nullptr}
    , decltype(_impl_.partial_caveat_info_){nullptr}
    , decltype(_impl_.subject_){nullptr}
    , decltype(_impl_.permissionship_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.subject_object_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subject_object_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LookupSubjectsResponse::~LookupSubjectsResponse() {
  // @@protoc_insertion_point(destructor:authzed.api.v1.LookupSubjectsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LookupSubjectsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.excluded_subject_ids_.~RepeatedPtrField();
  _impl_.excluded_subjects_.~RepeatedPtrField();
  _impl_.subject_object_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.looked_up_at_;
  if (this != internal_default_instance()) delete _impl_.partial_caveat_info_;
  if (this != internal_default_instance()) delete _impl_.subject_;
}

void LookupSubjectsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LookupSubjectsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:authzed.api.v1.LookupSubjectsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.excluded_subject_ids_.Clear();
  _impl_.excluded_subjects_.Clear();
  _impl_.subject_object_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.looked_up_at_ != nullptr) {
    delete _impl_.looked_up_at_;
  }
  _impl_.looked_up_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.partial_caveat_info_ != nullptr) {
    delete _impl_.partial_caveat_info_;
  }
  _impl_.partial_caveat_info_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.subject_ != nullptr) {
    delete _impl_.subject_;
  }
  _impl_.subject_ = nullptr;
  _impl_.permissionship_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LookupSubjectsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .authzed.api.v1.ZedToken looked_up_at = 1 [json_name = "lookedUpAt"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_looked_up_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string subject_object_id = 2 [json_name = "subjectObjectId", deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_subject_object_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "authzed.api.v1.LookupSubjectsResponse.subject_object_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated string excluded_subject_ids = 3 [json_name = "excludedSubjectIds", deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_excluded_subject_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "authzed.api.v1.LookupSubjectsResponse.excluded_subject_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .authzed.api.v1.LookupPermissionship permissionship = 4 [json_name = "permissionship", deprecated = true, (.validate.rules) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_permissionship(static_cast<::authzed::api::v1::LookupPermissionship>(val));
        } else
          goto handle_unusual;
        continue;
      // .authzed.api.v1.PartialCaveatInfo partial_caveat_info = 5 [json_name = "partialCaveatInfo", deprecated = true, (.validate.rules) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_partial_caveat_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .authzed.api.v1.ResolvedSubject subject = 6 [json_name = "subject"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_subject(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .authzed.api.v1.ResolvedSubject excluded_subjects = 7 [json_name = "excludedSubjects"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_excluded_subjects(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LookupSubjectsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:authzed.api.v1.LookupSubjectsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .authzed.api.v1.ZedToken looked_up_at = 1 [json_name = "lookedUpAt"];
  if (this->_internal_has_looked_up_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::looked_up_at(this),
        _Internal::looked_up_at(this).GetCachedSize(), target, stream);
  }

  // string subject_object_id = 2 [json_name = "subjectObjectId", deprecated = true];
  if (!this->_internal_subject_object_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subject_object_id().data(), static_cast<int>(this->_internal_subject_object_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "authzed.api.v1.LookupSubjectsResponse.subject_object_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_subject_object_id(), target);
  }

  // repeated string excluded_subject_ids = 3 [json_name = "excludedSubjectIds", deprecated = true];
  for (int i = 0, n = this->_internal_excluded_subject_ids_size(); i < n; i++) {
    const auto& s = this->_internal_excluded_subject_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "authzed.api.v1.LookupSubjectsResponse.excluded_subject_ids");
    target = stream->WriteString(3, s, target);
  }

  // .authzed.api.v1.LookupPermissionship permissionship = 4 [json_name = "permissionship", deprecated = true, (.validate.rules) = {
  if (this->_internal_permissionship() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_permissionship(), target);
  }

  // .authzed.api.v1.PartialCaveatInfo partial_caveat_info = 5 [json_name = "partialCaveatInfo", deprecated = true, (.validate.rules) = {
  if (this->_internal_has_partial_caveat_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::partial_caveat_info(this),
        _Internal::partial_caveat_info(this).GetCachedSize(), target, stream);
  }

  // .authzed.api.v1.ResolvedSubject subject = 6 [json_name = "subject"];
  if (this->_internal_has_subject()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::subject(this),
        _Internal::subject(this).GetCachedSize(), target, stream);
  }

  // repeated .authzed.api.v1.ResolvedSubject excluded_subjects = 7 [json_name = "excludedSubjects"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_excluded_subjects_size()); i < n; i++) {
    const auto& repfield = this->_internal_excluded_subjects(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:authzed.api.v1.LookupSubjectsResponse)
  return target;
}

size_t LookupSubjectsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:authzed.api.v1.LookupSubjectsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string excluded_subject_ids = 3 [json_name = "excludedSubjectIds", deprecated = true];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.excluded_subject_ids_.size());
  for (int i = 0, n = _impl_.excluded_subject_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.excluded_subject_ids_.Get(i));
  }

  // repeated .authzed.api.v1.ResolvedSubject excluded_subjects = 7 [json_name = "excludedSubjects"];
  total_size += 1UL * this->_internal_excluded_subjects_size();
  for (const auto& msg : this->_impl_.excluded_subjects_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string subject_object_id = 2 [json_name = "subjectObjectId", deprecated = true];
  if (!this->_internal_subject_object_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subject_object_id());
  }

  // .authzed.api.v1.ZedToken looked_up_at = 1 [json_name = "lookedUpAt"];
  if (this->_internal_has_looked_up_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.looked_up_at_);
  }

  // .authzed.api.v1.PartialCaveatInfo partial_caveat_info = 5 [json_name = "partialCaveatInfo", deprecated = true, (.validate.rules) = {
  if (this->_internal_has_partial_caveat_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.partial_caveat_info_);
  }

  // .authzed.api.v1.ResolvedSubject subject = 6 [json_name = "subject"];
  if (this->_internal_has_subject()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.subject_);
  }

  // .authzed.api.v1.LookupPermissionship permissionship = 4 [json_name = "permissionship", deprecated = true, (.validate.rules) = {
  if (this->_internal_permissionship() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_permissionship());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LookupSubjectsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LookupSubjectsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LookupSubjectsResponse::GetClassData() const { return &_class_data_; }


void LookupSubjectsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LookupSubjectsResponse*>(&to_msg);
  auto& from = static_cast<const LookupSubjectsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:authzed.api.v1.LookupSubjectsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.excluded_subject_ids_.MergeFrom(from._impl_.excluded_subject_ids_);
  _this->_impl_.excluded_subjects_.MergeFrom(from._impl_.excluded_subjects_);
  if (!from._internal_subject_object_id().empty()) {
    _this->_internal_set_subject_object_id(from._internal_subject_object_id());
  }
  if (from._internal_has_looked_up_at()) {
    _this->_internal_mutable_looked_up_at()->::authzed::api::v1::ZedToken::MergeFrom(
        from._internal_looked_up_at());
  }
  if (from._internal_has_partial_caveat_info()) {
    _this->_internal_mutable_partial_caveat_info()->::authzed::api::v1::PartialCaveatInfo::MergeFrom(
        from._internal_partial_caveat_info());
  }
  if (from._internal_has_subject()) {
    _this->_internal_mutable_subject()->::authzed::api::v1::ResolvedSubject::MergeFrom(
        from._internal_subject());
  }
  if (from._internal_permissionship() != 0) {
    _this->_internal_set_permissionship(from._internal_permissionship());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LookupSubjectsResponse::CopyFrom(const LookupSubjectsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:authzed.api.v1.LookupSubjectsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LookupSubjectsResponse::IsInitialized() const {
  return true;
}

void LookupSubjectsResponse::InternalSwap(LookupSubjectsResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.excluded_subject_ids_.InternalSwap(&other->_impl_.excluded_subject_ids_);
  _impl_.excluded_subjects_.InternalSwap(&other->_impl_.excluded_subjects_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.subject_object_id_, lhs_arena,
      &other->_impl_.subject_object_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LookupSubjectsResponse, _impl_.permissionship_)
      + sizeof(LookupSubjectsResponse::_impl_.permissionship_)
      - PROTOBUF_FIELD_OFFSET(LookupSubjectsResponse, _impl_.looked_up_at_)>(
          reinterpret_cast<char*>(&_impl_.looked_up_at_),
          reinterpret_cast<char*>(&other->_impl_.looked_up_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LookupSubjectsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_authzed_2fapi_2fv1_2fpermission_5fservice_2eproto_getter, &descriptor_table_authzed_2fapi_2fv1_2fpermission_5fservice_2eproto_once,
      file_level_metadata_authzed_2fapi_2fv1_2fpermission_5fservice_2eproto[18]);
}

// ===================================================================

class ResolvedSubject::_Internal {
 public:
  static const ::authzed::api::v1::PartialCaveatInfo& partial_caveat_info(const ResolvedSubject* msg);
};

const ::authzed::api::v1::PartialCaveatInfo&
ResolvedSubject::_Internal::partial_caveat_info(const ResolvedSubject* msg) {
  return *msg->_impl_.partial_caveat_info_;
}
void ResolvedSubject::clear_partial_caveat_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.partial_caveat_info_ != nullptr) {
    delete _impl_.partial_caveat_info_;
  }
  _impl_.partial_caveat_info_ = nullptr;
}
ResolvedSubject::ResolvedSubject(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:authzed.api.v1.ResolvedSubject)
}
ResolvedSubject::ResolvedSubject(const ResolvedSubject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedSubject* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.subject_object_id_){}
    , decltype(_impl_.partial_caveat_info_){nullptr}
    , decltype(_impl_.permissionship_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.subject_object_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subject_object_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subject_object_id().empty()) {
    _this->_impl_.subject_object_id_.Set(from._internal_subject_object_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_partial_caveat_info()) {
    _this->_impl_.partial_caveat_info_ = new ::authzed::api::v1::PartialCaveatInfo(*from._impl_.partial_caveat_info_);
  }
  _this->_impl_.permissionship_ = from._impl_.permissionship_;
  // @@protoc_insertion_point(copy_constructor:authzed.api.v1.ResolvedSubject)
}

inline void ResolvedSubject::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.subject_object_id_){}
    , decltype(_impl_.partial_caveat_info_){nullptr}
    , decltype(_impl_.permissionship_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.subject_object_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subject_object_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResolvedSubject::~ResolvedSubject() {
  // @@protoc_insertion_point(destructor:authzed.api.v1.ResolvedSubject)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedSubject::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.subject_object_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.partial_caveat_info_;
}

void ResolvedSubject::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedSubject::Clear() {
// @@protoc_insertion_point(message_clear_start:authzed.api.v1.ResolvedSubject)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.subject_object_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.partial_caveat_info_ != nullptr) {
    delete _impl_.partial_caveat_info_;
  }
  _impl_.partial_caveat_info_ = nullptr;
  _impl_.permissionship_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResolvedSubject::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string subject_object_id = 1 [json_name = "subjectObjectId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_subject_object_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "authzed.api.v1.ResolvedSubject.subject_object_id"));
        } else
          goto handle_unusual;
        continue;
      // .authzed.api.v1.LookupPermissionship permissionship = 2 [json_name = "permissionship", (.validate.rules) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_permissionship(static_cast<::authzed::api::v1::LookupPermissionship>(val));
        } else
          goto handle_unusual;
        continue;
      // .authzed.api.v1.PartialCaveatInfo partial_caveat_info = 3 [json_name = "partialCaveatInfo", (.validate.rules) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_partial_caveat_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResolvedSubject::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:authzed.api.v1.ResolvedSubject)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string subject_object_id = 1 [json_name = "subjectObjectId"];
  if (!this->_internal_subject_object_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subject_object_id().data(), static_cast<int>(this->_internal_subject_object_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "authzed.api.v1.ResolvedSubject.subject_object_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_subject_object_id(), target);
  }

  // .authzed.api.v1.LookupPermissionship permissionship = 2 [json_name = "permissionship", (.validate.rules) = {
  if (this->_internal_permissionship() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_permissionship(), target);
  }

  // .authzed.api.v1.PartialCaveatInfo partial_caveat_info = 3 [json_name = "partialCaveatInfo", (.validate.rules) = {
  if (this->_internal_has_partial_caveat_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::partial_caveat_info(this),
        _Internal::partial_caveat_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:authzed.api.v1.ResolvedSubject)
  return target;
}

size_t ResolvedSubject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:authzed.api.v1.ResolvedSubject)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string subject_object_id = 1 [json_name = "subjectObjectId"];
  if (!this->_internal_subject_object_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subject_object_id());
  }

  // .authzed.api.v1.PartialCaveatInfo partial_caveat_info = 3 [json_name = "partialCaveatInfo", (.validate.rules) = {
  if (this->_internal_has_partial_caveat_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.partial_caveat_info_);
  }

  // .authzed.api.v1.LookupPermissionship permissionship = 2 [json_name = "permissionship", (.validate.rules) = {
  if (this->_internal_permissionship() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_permissionship());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResolvedSubject::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResolvedSubject::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResolvedSubject::GetClassData() const { return &_class_data_; }


void ResolvedSubject::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResolvedSubject*>(&to_msg);
  auto& from = static_cast<const ResolvedSubject&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:authzed.api.v1.ResolvedSubject)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_subject_object_id().empty()) {
    _this->_internal_set_subject_object_id(from._internal_subject_object_id());
  }
  if (from._internal_has_partial_caveat_info()) {
    _this->_internal_mutable_partial_caveat_info()->::authzed::api::v1::PartialCaveatInfo::MergeFrom(
        from._internal_partial_caveat_info());
  }
  if (from._internal_permissionship() != 0) {
    _this->_internal_set_permissionship(from._internal_permissionship());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResolvedSubject::CopyFrom(const ResolvedSubject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:authzed.api.v1.ResolvedSubject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResolvedSubject::IsInitialized() const {
  return true;
}

void ResolvedSubject::InternalSwap(ResolvedSubject* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.subject_object_id_, lhs_arena,
      &other->_impl_.subject_object_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResolvedSubject, _impl_.permissionship_)
      + sizeof(ResolvedSubject::_impl_.permissionship_)
      - PROTOBUF_FIELD_OFFSET(ResolvedSubject, _impl_.partial_caveat_info_)>(
          reinterpret_cast<char*>(&_impl_.partial_caveat_info_),
          reinterpret_cast<char*>(&other->_impl_.partial_caveat_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedSubject::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_authzed_2fapi_2fv1_2fpermission_5fservice_2eproto_getter, &descriptor_table_authzed_2fapi_2fv1_2fpermission_5fservice_2eproto_once,
      file_level_metadata_authzed_2fapi_2fv1_2fpermission_5fservice_2eproto[19]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace api
}  // namespace authzed
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::authzed::api::v1::Consistency*
Arena::CreateMaybeMessage< ::authzed::api::v1::Consistency >(Arena* arena) {
  return Arena::CreateMessageInternal< ::authzed::api::v1::Consistency >(arena);
}
template<> PROTOBUF_NOINLINE ::authzed::api::v1::RelationshipFilter*
Arena::CreateMaybeMessage< ::authzed::api::v1::RelationshipFilter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::authzed::api::v1::RelationshipFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::authzed::api::v1::SubjectFilter_RelationFilter*
Arena::CreateMaybeMessage< ::authzed::api::v1::SubjectFilter_RelationFilter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::authzed::api::v1::SubjectFilter_RelationFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::authzed::api::v1::SubjectFilter*
Arena::CreateMaybeMessage< ::authzed::api::v1::SubjectFilter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::authzed::api::v1::SubjectFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::authzed::api::v1::ReadRelationshipsRequest*
Arena::CreateMaybeMessage< ::authzed::api::v1::ReadRelationshipsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::authzed::api::v1::ReadRelationshipsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::authzed::api::v1::ReadRelationshipsResponse*
Arena::CreateMaybeMessage< ::authzed::api::v1::ReadRelationshipsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::authzed::api::v1::ReadRelationshipsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::authzed::api::v1::Precondition*
Arena::CreateMaybeMessage< ::authzed::api::v1::Precondition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::authzed::api::v1::Precondition >(arena);
}
template<> PROTOBUF_NOINLINE ::authzed::api::v1::WriteRelationshipsRequest*
Arena::CreateMaybeMessage< ::authzed::api::v1::WriteRelationshipsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::authzed::api::v1::WriteRelationshipsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::authzed::api::v1::WriteRelationshipsResponse*
Arena::CreateMaybeMessage< ::authzed::api::v1::WriteRelationshipsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::authzed::api::v1::WriteRelationshipsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::authzed::api::v1::DeleteRelationshipsRequest*
Arena::CreateMaybeMessage< ::authzed::api::v1::DeleteRelationshipsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::authzed::api::v1::DeleteRelationshipsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::authzed::api::v1::DeleteRelationshipsResponse*
Arena::CreateMaybeMessage< ::authzed::api::v1::DeleteRelationshipsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::authzed::api::v1::DeleteRelationshipsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::authzed::api::v1::CheckPermissionRequest*
Arena::CreateMaybeMessage< ::authzed::api::v1::CheckPermissionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::authzed::api::v1::CheckPermissionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::authzed::api::v1::CheckPermissionResponse*
Arena::CreateMaybeMessage< ::authzed::api::v1::CheckPermissionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::authzed::api::v1::CheckPermissionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::authzed::api::v1::ExpandPermissionTreeRequest*
Arena::CreateMaybeMessage< ::authzed::api::v1::ExpandPermissionTreeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::authzed::api::v1::ExpandPermissionTreeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::authzed::api::v1::ExpandPermissionTreeResponse*
Arena::CreateMaybeMessage< ::authzed::api::v1::ExpandPermissionTreeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::authzed::api::v1::ExpandPermissionTreeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::authzed::api::v1::LookupResourcesRequest*
Arena::CreateMaybeMessage< ::authzed::api::v1::LookupResourcesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::authzed::api::v1::LookupResourcesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::authzed::api::v1::LookupResourcesResponse*
Arena::CreateMaybeMessage< ::authzed::api::v1::LookupResourcesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::authzed::api::v1::LookupResourcesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::authzed::api::v1::LookupSubjectsRequest*
Arena::CreateMaybeMessage< ::authzed::api::v1::LookupSubjectsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::authzed::api::v1::LookupSubjectsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::authzed::api::v1::LookupSubjectsResponse*
Arena::CreateMaybeMessage< ::authzed::api::v1::LookupSubjectsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::authzed::api::v1::LookupSubjectsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::authzed::api::v1::ResolvedSubject*
Arena::CreateMaybeMessage< ::authzed::api::v1::ResolvedSubject >(Arena* arena) {
  return Arena::CreateMessageInternal< ::authzed::api::v1::ResolvedSubject >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
