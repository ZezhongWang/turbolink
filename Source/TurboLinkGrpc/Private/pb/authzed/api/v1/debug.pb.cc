#if defined(_MSC_VER)
  #pragma warning (disable:4018) // 'expression' : signed/unsigned mismatch
  #pragma warning (disable:4065) // switch statement contains 'default' but no 'case' labels
  #pragma warning (disable:4146) // unary minus operator applied to unsigned type, result still unsigned
  #pragma warning (disable:4244) // 'conversion' conversion from 'type1' to 'type2', possible loss of data
  #pragma warning (disable:4251) // 'identifier' : class 'type' needs to have dll-interface to be used by clients of class 'type2'
  #pragma warning (disable:4267) // 'var' : conversion from 'size_t' to 'type', possible loss of data
  #pragma warning (disable:4305) // 'identifier' : truncation from 'type1' to 'type2'
  #pragma warning (disable:4307) // 'operator' : integral constant overflow
  #pragma warning (disable:4309) // 'conversion' : truncation of constant value
  #pragma warning (disable:4334) // 'operator' : result of 32-bit shift implicitly converted to 64 bits (was 64-bit shift intended?)
  #pragma warning (disable:4355) // 'this' : used in base member initializer list
  #pragma warning (disable:4506) // no definition for inline function 'function'
  #pragma warning (disable:4800) // 'type' : forcing value to bool 'true' or 'false' (performance warning)
  #pragma warning (disable:4996) // The compiler encountered a deprecated declaration.
  #pragma warning (disable:4125) // decimal digit terminates octal escape sequence
#endif
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: authzed/api/v1/debug.proto

#include "pb/authzed/api/v1/debug.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace authzed {
namespace api {
namespace v1 {
PROTOBUF_CONSTEXPR DebugInformation::DebugInformation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.schema_used_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.check_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DebugInformationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DebugInformationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DebugInformationDefaultTypeInternal() {}
  union {
    DebugInformation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DebugInformationDefaultTypeInternal _DebugInformation_default_instance_;
PROTOBUF_CONSTEXPR CheckDebugTrace_SubProblems::CheckDebugTrace_SubProblems(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.traces_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CheckDebugTrace_SubProblemsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CheckDebugTrace_SubProblemsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CheckDebugTrace_SubProblemsDefaultTypeInternal() {}
  union {
    CheckDebugTrace_SubProblems _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CheckDebugTrace_SubProblemsDefaultTypeInternal _CheckDebugTrace_SubProblems_default_instance_;
PROTOBUF_CONSTEXPR CheckDebugTrace::CheckDebugTrace(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.permission_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.resource_)*/nullptr
  , /*decltype(_impl_.subject_)*/nullptr
  , /*decltype(_impl_.caveat_evaluation_info_)*/nullptr
  , /*decltype(_impl_.permission_type_)*/0
  , /*decltype(_impl_.result_)*/0
  , /*decltype(_impl_.resolution_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct CheckDebugTraceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CheckDebugTraceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CheckDebugTraceDefaultTypeInternal() {}
  union {
    CheckDebugTrace _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CheckDebugTraceDefaultTypeInternal _CheckDebugTrace_default_instance_;
PROTOBUF_CONSTEXPR CaveatEvalInfo::CaveatEvalInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.expression_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.caveat_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.context_)*/nullptr
  , /*decltype(_impl_.partial_caveat_info_)*/nullptr
  , /*decltype(_impl_.result_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CaveatEvalInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CaveatEvalInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CaveatEvalInfoDefaultTypeInternal() {}
  union {
    CaveatEvalInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CaveatEvalInfoDefaultTypeInternal _CaveatEvalInfo_default_instance_;
}  // namespace v1
}  // namespace api
}  // namespace authzed
static ::_pb::Metadata file_level_metadata_authzed_2fapi_2fv1_2fdebug_2eproto[4];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_authzed_2fapi_2fv1_2fdebug_2eproto[3];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_authzed_2fapi_2fv1_2fdebug_2eproto = nullptr;

const uint32_t TableStruct_authzed_2fapi_2fv1_2fdebug_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::DebugInformation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::DebugInformation, _impl_.check_),
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::DebugInformation, _impl_.schema_used_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::CheckDebugTrace_SubProblems, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::CheckDebugTrace_SubProblems, _impl_.traces_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::CheckDebugTrace, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::CheckDebugTrace, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::CheckDebugTrace, _impl_.resource_),
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::CheckDebugTrace, _impl_.permission_),
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::CheckDebugTrace, _impl_.permission_type_),
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::CheckDebugTrace, _impl_.subject_),
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::CheckDebugTrace, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::CheckDebugTrace, _impl_.caveat_evaluation_info_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::CheckDebugTrace, _impl_.resolution_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::CaveatEvalInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::CaveatEvalInfo, _impl_.expression_),
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::CaveatEvalInfo, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::CaveatEvalInfo, _impl_.context_),
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::CaveatEvalInfo, _impl_.partial_caveat_info_),
  PROTOBUF_FIELD_OFFSET(::authzed::api::v1::CaveatEvalInfo, _impl_.caveat_name_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::authzed::api::v1::DebugInformation)},
  { 8, -1, -1, sizeof(::authzed::api::v1::CheckDebugTrace_SubProblems)},
  { 15, -1, -1, sizeof(::authzed::api::v1::CheckDebugTrace)},
  { 30, -1, -1, sizeof(::authzed::api::v1::CaveatEvalInfo)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::authzed::api::v1::_DebugInformation_default_instance_._instance,
  &::authzed::api::v1::_CheckDebugTrace_SubProblems_default_instance_._instance,
  &::authzed::api::v1::_CheckDebugTrace_default_instance_._instance,
  &::authzed::api::v1::_CaveatEvalInfo_default_instance_._instance,
};

const char descriptor_table_protodef_authzed_2fapi_2fv1_2fdebug_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\032authzed/api/v1/debug.proto\022\016authzed.ap"
  "i.v1\032\031authzed/api/v1/core.proto\032\027validat"
  "e/validate.proto\032\034google/protobuf/struct"
  ".proto\"j\n\020DebugInformation\0225\n\005check\030\001 \001("
  "\0132\037.authzed.api.v1.CheckDebugTraceR\005chec"
  "k\022\037\n\013schema_used\030\002 \001(\tR\nschemaUsed\"\274\007\n\017C"
  "heckDebugTrace\022E\n\010resource\030\001 \001(\0132\037.authz"
  "ed.api.v1.ObjectReferenceB\010\372B\005\212\001\002\020\001R\010res"
  "ource\022\036\n\npermission\030\002 \001(\tR\npermission\022c\n"
  "\017permission_type\030\003 \001(\0162..authzed.api.v1."
  "CheckDebugTrace.PermissionTypeB\n\372B\007\202\001\004\020\001"
  " \000R\016permissionType\022D\n\007subject\030\004 \001(\0132 .au"
  "thzed.api.v1.SubjectReferenceB\010\372B\005\212\001\002\020\001R"
  "\007subject\022R\n\006result\030\005 \001(\0162..authzed.api.v"
  "1.CheckDebugTrace.PermissionshipB\n\372B\007\202\001\004"
  "\020\001 \000R\006result\022T\n\026caveat_evaluation_info\030\010"
  " \001(\0132\036.authzed.api.v1.CaveatEvalInfoR\024ca"
  "veatEvaluationInfo\022,\n\021was_cached_result\030"
  "\006 \001(\010H\000R\017wasCachedResult\022P\n\014sub_problems"
  "\030\007 \001(\0132+.authzed.api.v1.CheckDebugTrace."
  "SubProblemsH\000R\013subProblems\032F\n\013SubProblem"
  "s\0227\n\006traces\030\001 \003(\0132\037.authzed.api.v1.Check"
  "DebugTraceR\006traces\"o\n\016PermissionType\022\037\n\033"
  "PERMISSION_TYPE_UNSPECIFIED\020\000\022\034\n\030PERMISS"
  "ION_TYPE_RELATION\020\001\022\036\n\032PERMISSION_TYPE_P"
  "ERMISSION\020\002\"\240\001\n\016Permissionship\022\036\n\032PERMIS"
  "SIONSHIP_UNSPECIFIED\020\000\022 \n\034PERMISSIONSHIP"
  "_NO_PERMISSION\020\001\022!\n\035PERMISSIONSHIP_HAS_P"
  "ERMISSION\020\002\022)\n%PERMISSIONSHIP_CONDITIONA"
  "L_PERMISSION\020\003B\021\n\nresolution\022\003\370B\001\"\224\003\n\016Ca"
  "veatEvalInfo\022\036\n\nexpression\030\001 \001(\tR\nexpres"
  "sion\022=\n\006result\030\002 \001(\0162%.authzed.api.v1.Ca"
  "veatEvalInfo.ResultR\006result\0221\n\007context\030\003"
  " \001(\0132\027.google.protobuf.StructR\007context\022Q"
  "\n\023partial_caveat_info\030\004 \001(\0132!.authzed.ap"
  "i.v1.PartialCaveatInfoR\021partialCaveatInf"
  "o\022\037\n\013caveat_name\030\005 \001(\tR\ncaveatName\"|\n\006Re"
  "sult\022\026\n\022RESULT_UNSPECIFIED\020\000\022\026\n\022RESULT_U"
  "NEVALUATED\020\001\022\020\n\014RESULT_FALSE\020\002\022\017\n\013RESULT"
  "_TRUE\020\003\022\037\n\033RESULT_MISSING_SOME_CONTEXT\020\004"
  "BH\n\022com.authzed.api.v1Z2github.com/authz"
  "ed/authzed-go/proto/authzed/api/v1b\006prot"
  "o3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_authzed_2fapi_2fv1_2fdebug_2eproto_deps[3] = {
  &::descriptor_table_authzed_2fapi_2fv1_2fcore_2eproto,
  &::descriptor_table_google_2fprotobuf_2fstruct_2eproto,
  &::descriptor_table_validate_2fvalidate_2eproto,
};
static ::_pbi::once_flag descriptor_table_authzed_2fapi_2fv1_2fdebug_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_authzed_2fapi_2fv1_2fdebug_2eproto = {
    false, false, 1682, descriptor_table_protodef_authzed_2fapi_2fv1_2fdebug_2eproto,
    "authzed/api/v1/debug.proto",
    &descriptor_table_authzed_2fapi_2fv1_2fdebug_2eproto_once, descriptor_table_authzed_2fapi_2fv1_2fdebug_2eproto_deps, 3, 4,
    schemas, file_default_instances, TableStruct_authzed_2fapi_2fv1_2fdebug_2eproto::offsets,
    file_level_metadata_authzed_2fapi_2fv1_2fdebug_2eproto, file_level_enum_descriptors_authzed_2fapi_2fv1_2fdebug_2eproto,
    file_level_service_descriptors_authzed_2fapi_2fv1_2fdebug_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_authzed_2fapi_2fv1_2fdebug_2eproto_getter() {
  return &descriptor_table_authzed_2fapi_2fv1_2fdebug_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_authzed_2fapi_2fv1_2fdebug_2eproto(&descriptor_table_authzed_2fapi_2fv1_2fdebug_2eproto);
namespace authzed {
namespace api {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CheckDebugTrace_PermissionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_authzed_2fapi_2fv1_2fdebug_2eproto);
  return file_level_enum_descriptors_authzed_2fapi_2fv1_2fdebug_2eproto[0];
}
bool CheckDebugTrace_PermissionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CheckDebugTrace_PermissionType CheckDebugTrace::PERMISSION_TYPE_UNSPECIFIED;
constexpr CheckDebugTrace_PermissionType CheckDebugTrace::PERMISSION_TYPE_RELATION;
constexpr CheckDebugTrace_PermissionType CheckDebugTrace::PERMISSION_TYPE_PERMISSION;
constexpr CheckDebugTrace_PermissionType CheckDebugTrace::PermissionType_MIN;
constexpr CheckDebugTrace_PermissionType CheckDebugTrace::PermissionType_MAX;
constexpr int CheckDebugTrace::PermissionType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CheckDebugTrace_Permissionship_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_authzed_2fapi_2fv1_2fdebug_2eproto);
  return file_level_enum_descriptors_authzed_2fapi_2fv1_2fdebug_2eproto[1];
}
bool CheckDebugTrace_Permissionship_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CheckDebugTrace_Permissionship CheckDebugTrace::PERMISSIONSHIP_UNSPECIFIED;
constexpr CheckDebugTrace_Permissionship CheckDebugTrace::PERMISSIONSHIP_NO_PERMISSION;
constexpr CheckDebugTrace_Permissionship CheckDebugTrace::PERMISSIONSHIP_HAS_PERMISSION;
constexpr CheckDebugTrace_Permissionship CheckDebugTrace::PERMISSIONSHIP_CONDITIONAL_PERMISSION;
constexpr CheckDebugTrace_Permissionship CheckDebugTrace::Permissionship_MIN;
constexpr CheckDebugTrace_Permissionship CheckDebugTrace::Permissionship_MAX;
constexpr int CheckDebugTrace::Permissionship_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CaveatEvalInfo_Result_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_authzed_2fapi_2fv1_2fdebug_2eproto);
  return file_level_enum_descriptors_authzed_2fapi_2fv1_2fdebug_2eproto[2];
}
bool CaveatEvalInfo_Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CaveatEvalInfo_Result CaveatEvalInfo::RESULT_UNSPECIFIED;
constexpr CaveatEvalInfo_Result CaveatEvalInfo::RESULT_UNEVALUATED;
constexpr CaveatEvalInfo_Result CaveatEvalInfo::RESULT_FALSE;
constexpr CaveatEvalInfo_Result CaveatEvalInfo::RESULT_TRUE;
constexpr CaveatEvalInfo_Result CaveatEvalInfo::RESULT_MISSING_SOME_CONTEXT;
constexpr CaveatEvalInfo_Result CaveatEvalInfo::Result_MIN;
constexpr CaveatEvalInfo_Result CaveatEvalInfo::Result_MAX;
constexpr int CaveatEvalInfo::Result_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class DebugInformation::_Internal {
 public:
  static const ::authzed::api::v1::CheckDebugTrace& check(const DebugInformation* msg);
};

const ::authzed::api::v1::CheckDebugTrace&
DebugInformation::_Internal::check(const DebugInformation* msg) {
  return *msg->_impl_.check_;
}
DebugInformation::DebugInformation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:authzed.api.v1.DebugInformation)
}
DebugInformation::DebugInformation(const DebugInformation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DebugInformation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.schema_used_){}
    , decltype(_impl_.check_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.schema_used_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.schema_used_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_schema_used().empty()) {
    _this->_impl_.schema_used_.Set(from._internal_schema_used(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_check()) {
    _this->_impl_.check_ = new ::authzed::api::v1::CheckDebugTrace(*from._impl_.check_);
  }
  // @@protoc_insertion_point(copy_constructor:authzed.api.v1.DebugInformation)
}

inline void DebugInformation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.schema_used_){}
    , decltype(_impl_.check_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.schema_used_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.schema_used_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DebugInformation::~DebugInformation() {
  // @@protoc_insertion_point(destructor:authzed.api.v1.DebugInformation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DebugInformation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.schema_used_.Destroy();
  if (this != internal_default_instance()) delete _impl_.check_;
}

void DebugInformation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DebugInformation::Clear() {
// @@protoc_insertion_point(message_clear_start:authzed.api.v1.DebugInformation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.schema_used_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.check_ != nullptr) {
    delete _impl_.check_;
  }
  _impl_.check_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DebugInformation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .authzed.api.v1.CheckDebugTrace check = 1 [json_name = "check"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_check(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string schema_used = 2 [json_name = "schemaUsed"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_schema_used();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "authzed.api.v1.DebugInformation.schema_used"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DebugInformation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:authzed.api.v1.DebugInformation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .authzed.api.v1.CheckDebugTrace check = 1 [json_name = "check"];
  if (this->_internal_has_check()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::check(this),
        _Internal::check(this).GetCachedSize(), target, stream);
  }

  // string schema_used = 2 [json_name = "schemaUsed"];
  if (!this->_internal_schema_used().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_schema_used().data(), static_cast<int>(this->_internal_schema_used().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "authzed.api.v1.DebugInformation.schema_used");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_schema_used(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:authzed.api.v1.DebugInformation)
  return target;
}

size_t DebugInformation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:authzed.api.v1.DebugInformation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string schema_used = 2 [json_name = "schemaUsed"];
  if (!this->_internal_schema_used().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_schema_used());
  }

  // .authzed.api.v1.CheckDebugTrace check = 1 [json_name = "check"];
  if (this->_internal_has_check()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.check_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DebugInformation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DebugInformation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DebugInformation::GetClassData() const { return &_class_data_; }


void DebugInformation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DebugInformation*>(&to_msg);
  auto& from = static_cast<const DebugInformation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:authzed.api.v1.DebugInformation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_schema_used().empty()) {
    _this->_internal_set_schema_used(from._internal_schema_used());
  }
  if (from._internal_has_check()) {
    _this->_internal_mutable_check()->::authzed::api::v1::CheckDebugTrace::MergeFrom(
        from._internal_check());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DebugInformation::CopyFrom(const DebugInformation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:authzed.api.v1.DebugInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugInformation::IsInitialized() const {
  return true;
}

void DebugInformation::InternalSwap(DebugInformation* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.schema_used_, lhs_arena,
      &other->_impl_.schema_used_, rhs_arena
  );
  swap(_impl_.check_, other->_impl_.check_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DebugInformation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_authzed_2fapi_2fv1_2fdebug_2eproto_getter, &descriptor_table_authzed_2fapi_2fv1_2fdebug_2eproto_once,
      file_level_metadata_authzed_2fapi_2fv1_2fdebug_2eproto[0]);
}

// ===================================================================

class CheckDebugTrace_SubProblems::_Internal {
 public:
};

CheckDebugTrace_SubProblems::CheckDebugTrace_SubProblems(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:authzed.api.v1.CheckDebugTrace.SubProblems)
}
CheckDebugTrace_SubProblems::CheckDebugTrace_SubProblems(const CheckDebugTrace_SubProblems& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CheckDebugTrace_SubProblems* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.traces_){from._impl_.traces_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:authzed.api.v1.CheckDebugTrace.SubProblems)
}

inline void CheckDebugTrace_SubProblems::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.traces_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CheckDebugTrace_SubProblems::~CheckDebugTrace_SubProblems() {
  // @@protoc_insertion_point(destructor:authzed.api.v1.CheckDebugTrace.SubProblems)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CheckDebugTrace_SubProblems::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.traces_.~RepeatedPtrField();
}

void CheckDebugTrace_SubProblems::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CheckDebugTrace_SubProblems::Clear() {
// @@protoc_insertion_point(message_clear_start:authzed.api.v1.CheckDebugTrace.SubProblems)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.traces_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CheckDebugTrace_SubProblems::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .authzed.api.v1.CheckDebugTrace traces = 1 [json_name = "traces"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_traces(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CheckDebugTrace_SubProblems::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:authzed.api.v1.CheckDebugTrace.SubProblems)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .authzed.api.v1.CheckDebugTrace traces = 1 [json_name = "traces"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_traces_size()); i < n; i++) {
    const auto& repfield = this->_internal_traces(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:authzed.api.v1.CheckDebugTrace.SubProblems)
  return target;
}

size_t CheckDebugTrace_SubProblems::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:authzed.api.v1.CheckDebugTrace.SubProblems)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .authzed.api.v1.CheckDebugTrace traces = 1 [json_name = "traces"];
  total_size += 1UL * this->_internal_traces_size();
  for (const auto& msg : this->_impl_.traces_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CheckDebugTrace_SubProblems::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CheckDebugTrace_SubProblems::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CheckDebugTrace_SubProblems::GetClassData() const { return &_class_data_; }


void CheckDebugTrace_SubProblems::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CheckDebugTrace_SubProblems*>(&to_msg);
  auto& from = static_cast<const CheckDebugTrace_SubProblems&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:authzed.api.v1.CheckDebugTrace.SubProblems)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.traces_.MergeFrom(from._impl_.traces_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CheckDebugTrace_SubProblems::CopyFrom(const CheckDebugTrace_SubProblems& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:authzed.api.v1.CheckDebugTrace.SubProblems)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckDebugTrace_SubProblems::IsInitialized() const {
  return true;
}

void CheckDebugTrace_SubProblems::InternalSwap(CheckDebugTrace_SubProblems* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.traces_.InternalSwap(&other->_impl_.traces_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CheckDebugTrace_SubProblems::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_authzed_2fapi_2fv1_2fdebug_2eproto_getter, &descriptor_table_authzed_2fapi_2fv1_2fdebug_2eproto_once,
      file_level_metadata_authzed_2fapi_2fv1_2fdebug_2eproto[1]);
}

// ===================================================================

class CheckDebugTrace::_Internal {
 public:
  static const ::authzed::api::v1::ObjectReference& resource(const CheckDebugTrace* msg);
  static const ::authzed::api::v1::SubjectReference& subject(const CheckDebugTrace* msg);
  static const ::authzed::api::v1::CaveatEvalInfo& caveat_evaluation_info(const CheckDebugTrace* msg);
  static const ::authzed::api::v1::CheckDebugTrace_SubProblems& sub_problems(const CheckDebugTrace* msg);
};

const ::authzed::api::v1::ObjectReference&
CheckDebugTrace::_Internal::resource(const CheckDebugTrace* msg) {
  return *msg->_impl_.resource_;
}
const ::authzed::api::v1::SubjectReference&
CheckDebugTrace::_Internal::subject(const CheckDebugTrace* msg) {
  return *msg->_impl_.subject_;
}
const ::authzed::api::v1::CaveatEvalInfo&
CheckDebugTrace::_Internal::caveat_evaluation_info(const CheckDebugTrace* msg) {
  return *msg->_impl_.caveat_evaluation_info_;
}
const ::authzed::api::v1::CheckDebugTrace_SubProblems&
CheckDebugTrace::_Internal::sub_problems(const CheckDebugTrace* msg) {
  return *msg->_impl_.resolution_.sub_problems_;
}
void CheckDebugTrace::clear_resource() {
  if (GetArenaForAllocation() == nullptr && _impl_.resource_ != nullptr) {
    delete _impl_.resource_;
  }
  _impl_.resource_ = nullptr;
}
void CheckDebugTrace::clear_subject() {
  if (GetArenaForAllocation() == nullptr && _impl_.subject_ != nullptr) {
    delete _impl_.subject_;
  }
  _impl_.subject_ = nullptr;
}
void CheckDebugTrace::set_allocated_sub_problems(::authzed::api::v1::CheckDebugTrace_SubProblems* sub_problems) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_resolution();
  if (sub_problems) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sub_problems);
    if (message_arena != submessage_arena) {
      sub_problems = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sub_problems, submessage_arena);
    }
    set_has_sub_problems();
    _impl_.resolution_.sub_problems_ = sub_problems;
  }
  // @@protoc_insertion_point(field_set_allocated:authzed.api.v1.CheckDebugTrace.sub_problems)
}
CheckDebugTrace::CheckDebugTrace(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:authzed.api.v1.CheckDebugTrace)
}
CheckDebugTrace::CheckDebugTrace(const CheckDebugTrace& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CheckDebugTrace* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.permission_){}
    , decltype(_impl_.resource_){nullptr}
    , decltype(_impl_.subject_){nullptr}
    , decltype(_impl_.caveat_evaluation_info_){nullptr}
    , decltype(_impl_.permission_type_){}
    , decltype(_impl_.result_){}
    , decltype(_impl_.resolution_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.permission_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.permission_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_permission().empty()) {
    _this->_impl_.permission_.Set(from._internal_permission(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_resource()) {
    _this->_impl_.resource_ = new ::authzed::api::v1::ObjectReference(*from._impl_.resource_);
  }
  if (from._internal_has_subject()) {
    _this->_impl_.subject_ = new ::authzed::api::v1::SubjectReference(*from._impl_.subject_);
  }
  if (from._internal_has_caveat_evaluation_info()) {
    _this->_impl_.caveat_evaluation_info_ = new ::authzed::api::v1::CaveatEvalInfo(*from._impl_.caveat_evaluation_info_);
  }
  ::memcpy(&_impl_.permission_type_, &from._impl_.permission_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.result_) -
    reinterpret_cast<char*>(&_impl_.permission_type_)) + sizeof(_impl_.result_));
  clear_has_resolution();
  switch (from.resolution_case()) {
    case kWasCachedResult: {
      _this->_internal_set_was_cached_result(from._internal_was_cached_result());
      break;
    }
    case kSubProblems: {
      _this->_internal_mutable_sub_problems()->::authzed::api::v1::CheckDebugTrace_SubProblems::MergeFrom(
          from._internal_sub_problems());
      break;
    }
    case RESOLUTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:authzed.api.v1.CheckDebugTrace)
}

inline void CheckDebugTrace::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.permission_){}
    , decltype(_impl_.resource_){nullptr}
    , decltype(_impl_.subject_){nullptr}
    , decltype(_impl_.caveat_evaluation_info_){nullptr}
    , decltype(_impl_.permission_type_){0}
    , decltype(_impl_.result_){0}
    , decltype(_impl_.resolution_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.permission_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.permission_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_resolution();
}

CheckDebugTrace::~CheckDebugTrace() {
  // @@protoc_insertion_point(destructor:authzed.api.v1.CheckDebugTrace)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CheckDebugTrace::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.permission_.Destroy();
  if (this != internal_default_instance()) delete _impl_.resource_;
  if (this != internal_default_instance()) delete _impl_.subject_;
  if (this != internal_default_instance()) delete _impl_.caveat_evaluation_info_;
  if (has_resolution()) {
    clear_resolution();
  }
}

void CheckDebugTrace::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CheckDebugTrace::clear_resolution() {
// @@protoc_insertion_point(one_of_clear_start:authzed.api.v1.CheckDebugTrace)
  switch (resolution_case()) {
    case kWasCachedResult: {
      // No need to clear
      break;
    }
    case kSubProblems: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.resolution_.sub_problems_;
      }
      break;
    }
    case RESOLUTION_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = RESOLUTION_NOT_SET;
}


void CheckDebugTrace::Clear() {
// @@protoc_insertion_point(message_clear_start:authzed.api.v1.CheckDebugTrace)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.permission_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.resource_ != nullptr) {
    delete _impl_.resource_;
  }
  _impl_.resource_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.subject_ != nullptr) {
    delete _impl_.subject_;
  }
  _impl_.subject_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.caveat_evaluation_info_ != nullptr) {
    delete _impl_.caveat_evaluation_info_;
  }
  _impl_.caveat_evaluation_info_ = nullptr;
  ::memset(&_impl_.permission_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.result_) -
      reinterpret_cast<char*>(&_impl_.permission_type_)) + sizeof(_impl_.result_));
  clear_resolution();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CheckDebugTrace::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .authzed.api.v1.ObjectReference resource = 1 [json_name = "resource", (.validate.rules) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_resource(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string permission = 2 [json_name = "permission"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_permission();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "authzed.api.v1.CheckDebugTrace.permission"));
        } else
          goto handle_unusual;
        continue;
      // .authzed.api.v1.CheckDebugTrace.PermissionType permission_type = 3 [json_name = "permissionType", (.validate.rules) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_permission_type(static_cast<::authzed::api::v1::CheckDebugTrace_PermissionType>(val));
        } else
          goto handle_unusual;
        continue;
      // .authzed.api.v1.SubjectReference subject = 4 [json_name = "subject", (.validate.rules) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_subject(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .authzed.api.v1.CheckDebugTrace.Permissionship result = 5 [json_name = "result", (.validate.rules) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::authzed::api::v1::CheckDebugTrace_Permissionship>(val));
        } else
          goto handle_unusual;
        continue;
      // bool was_cached_result = 6 [json_name = "wasCachedResult"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _internal_set_was_cached_result(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .authzed.api.v1.CheckDebugTrace.SubProblems sub_problems = 7 [json_name = "subProblems"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_sub_problems(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .authzed.api.v1.CaveatEvalInfo caveat_evaluation_info = 8 [json_name = "caveatEvaluationInfo"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_caveat_evaluation_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CheckDebugTrace::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:authzed.api.v1.CheckDebugTrace)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .authzed.api.v1.ObjectReference resource = 1 [json_name = "resource", (.validate.rules) = {
  if (this->_internal_has_resource()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::resource(this),
        _Internal::resource(this).GetCachedSize(), target, stream);
  }

  // string permission = 2 [json_name = "permission"];
  if (!this->_internal_permission().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_permission().data(), static_cast<int>(this->_internal_permission().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "authzed.api.v1.CheckDebugTrace.permission");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_permission(), target);
  }

  // .authzed.api.v1.CheckDebugTrace.PermissionType permission_type = 3 [json_name = "permissionType", (.validate.rules) = {
  if (this->_internal_permission_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_permission_type(), target);
  }

  // .authzed.api.v1.SubjectReference subject = 4 [json_name = "subject", (.validate.rules) = {
  if (this->_internal_has_subject()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::subject(this),
        _Internal::subject(this).GetCachedSize(), target, stream);
  }

  // .authzed.api.v1.CheckDebugTrace.Permissionship result = 5 [json_name = "result", (.validate.rules) = {
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_result(), target);
  }

  // bool was_cached_result = 6 [json_name = "wasCachedResult"];
  if (_internal_has_was_cached_result()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_was_cached_result(), target);
  }

  // .authzed.api.v1.CheckDebugTrace.SubProblems sub_problems = 7 [json_name = "subProblems"];
  if (_internal_has_sub_problems()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::sub_problems(this),
        _Internal::sub_problems(this).GetCachedSize(), target, stream);
  }

  // .authzed.api.v1.CaveatEvalInfo caveat_evaluation_info = 8 [json_name = "caveatEvaluationInfo"];
  if (this->_internal_has_caveat_evaluation_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::caveat_evaluation_info(this),
        _Internal::caveat_evaluation_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:authzed.api.v1.CheckDebugTrace)
  return target;
}

size_t CheckDebugTrace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:authzed.api.v1.CheckDebugTrace)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string permission = 2 [json_name = "permission"];
  if (!this->_internal_permission().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_permission());
  }

  // .authzed.api.v1.ObjectReference resource = 1 [json_name = "resource", (.validate.rules) = {
  if (this->_internal_has_resource()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.resource_);
  }

  // .authzed.api.v1.SubjectReference subject = 4 [json_name = "subject", (.validate.rules) = {
  if (this->_internal_has_subject()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.subject_);
  }

  // .authzed.api.v1.CaveatEvalInfo caveat_evaluation_info = 8 [json_name = "caveatEvaluationInfo"];
  if (this->_internal_has_caveat_evaluation_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.caveat_evaluation_info_);
  }

  // .authzed.api.v1.CheckDebugTrace.PermissionType permission_type = 3 [json_name = "permissionType", (.validate.rules) = {
  if (this->_internal_permission_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_permission_type());
  }

  // .authzed.api.v1.CheckDebugTrace.Permissionship result = 5 [json_name = "result", (.validate.rules) = {
  if (this->_internal_result() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
  }

  switch (resolution_case()) {
    // bool was_cached_result = 6 [json_name = "wasCachedResult"];
    case kWasCachedResult: {
      total_size += 1 + 1;
      break;
    }
    // .authzed.api.v1.CheckDebugTrace.SubProblems sub_problems = 7 [json_name = "subProblems"];
    case kSubProblems: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.resolution_.sub_problems_);
      break;
    }
    case RESOLUTION_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CheckDebugTrace::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CheckDebugTrace::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CheckDebugTrace::GetClassData() const { return &_class_data_; }


void CheckDebugTrace::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CheckDebugTrace*>(&to_msg);
  auto& from = static_cast<const CheckDebugTrace&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:authzed.api.v1.CheckDebugTrace)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_permission().empty()) {
    _this->_internal_set_permission(from._internal_permission());
  }
  if (from._internal_has_resource()) {
    _this->_internal_mutable_resource()->::authzed::api::v1::ObjectReference::MergeFrom(
        from._internal_resource());
  }
  if (from._internal_has_subject()) {
    _this->_internal_mutable_subject()->::authzed::api::v1::SubjectReference::MergeFrom(
        from._internal_subject());
  }
  if (from._internal_has_caveat_evaluation_info()) {
    _this->_internal_mutable_caveat_evaluation_info()->::authzed::api::v1::CaveatEvalInfo::MergeFrom(
        from._internal_caveat_evaluation_info());
  }
  if (from._internal_permission_type() != 0) {
    _this->_internal_set_permission_type(from._internal_permission_type());
  }
  if (from._internal_result() != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  switch (from.resolution_case()) {
    case kWasCachedResult: {
      _this->_internal_set_was_cached_result(from._internal_was_cached_result());
      break;
    }
    case kSubProblems: {
      _this->_internal_mutable_sub_problems()->::authzed::api::v1::CheckDebugTrace_SubProblems::MergeFrom(
          from._internal_sub_problems());
      break;
    }
    case RESOLUTION_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CheckDebugTrace::CopyFrom(const CheckDebugTrace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:authzed.api.v1.CheckDebugTrace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckDebugTrace::IsInitialized() const {
  return true;
}

void CheckDebugTrace::InternalSwap(CheckDebugTrace* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.permission_, lhs_arena,
      &other->_impl_.permission_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CheckDebugTrace, _impl_.result_)
      + sizeof(CheckDebugTrace::_impl_.result_)
      - PROTOBUF_FIELD_OFFSET(CheckDebugTrace, _impl_.resource_)>(
          reinterpret_cast<char*>(&_impl_.resource_),
          reinterpret_cast<char*>(&other->_impl_.resource_));
  swap(_impl_.resolution_, other->_impl_.resolution_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata CheckDebugTrace::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_authzed_2fapi_2fv1_2fdebug_2eproto_getter, &descriptor_table_authzed_2fapi_2fv1_2fdebug_2eproto_once,
      file_level_metadata_authzed_2fapi_2fv1_2fdebug_2eproto[2]);
}

// ===================================================================

class CaveatEvalInfo::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& context(const CaveatEvalInfo* msg);
  static const ::authzed::api::v1::PartialCaveatInfo& partial_caveat_info(const CaveatEvalInfo* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
CaveatEvalInfo::_Internal::context(const CaveatEvalInfo* msg) {
  return *msg->_impl_.context_;
}
const ::authzed::api::v1::PartialCaveatInfo&
CaveatEvalInfo::_Internal::partial_caveat_info(const CaveatEvalInfo* msg) {
  return *msg->_impl_.partial_caveat_info_;
}
void CaveatEvalInfo::clear_context() {
  if (GetArenaForAllocation() == nullptr && _impl_.context_ != nullptr) {
    delete _impl_.context_;
  }
  _impl_.context_ = nullptr;
}
void CaveatEvalInfo::clear_partial_caveat_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.partial_caveat_info_ != nullptr) {
    delete _impl_.partial_caveat_info_;
  }
  _impl_.partial_caveat_info_ = nullptr;
}
CaveatEvalInfo::CaveatEvalInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:authzed.api.v1.CaveatEvalInfo)
}
CaveatEvalInfo::CaveatEvalInfo(const CaveatEvalInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CaveatEvalInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.expression_){}
    , decltype(_impl_.caveat_name_){}
    , decltype(_impl_.context_){nullptr}
    , decltype(_impl_.partial_caveat_info_){nullptr}
    , decltype(_impl_.result_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.expression_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.expression_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_expression().empty()) {
    _this->_impl_.expression_.Set(from._internal_expression(), 
      _this->GetArenaForAllocation());
  }
  _impl_.caveat_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.caveat_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_caveat_name().empty()) {
    _this->_impl_.caveat_name_.Set(from._internal_caveat_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_context()) {
    _this->_impl_.context_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from._impl_.context_);
  }
  if (from._internal_has_partial_caveat_info()) {
    _this->_impl_.partial_caveat_info_ = new ::authzed::api::v1::PartialCaveatInfo(*from._impl_.partial_caveat_info_);
  }
  _this->_impl_.result_ = from._impl_.result_;
  // @@protoc_insertion_point(copy_constructor:authzed.api.v1.CaveatEvalInfo)
}

inline void CaveatEvalInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.expression_){}
    , decltype(_impl_.caveat_name_){}
    , decltype(_impl_.context_){nullptr}
    , decltype(_impl_.partial_caveat_info_){nullptr}
    , decltype(_impl_.result_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.expression_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.expression_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.caveat_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.caveat_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CaveatEvalInfo::~CaveatEvalInfo() {
  // @@protoc_insertion_point(destructor:authzed.api.v1.CaveatEvalInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CaveatEvalInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.expression_.Destroy();
  _impl_.caveat_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.context_;
  if (this != internal_default_instance()) delete _impl_.partial_caveat_info_;
}

void CaveatEvalInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CaveatEvalInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:authzed.api.v1.CaveatEvalInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.expression_.ClearToEmpty();
  _impl_.caveat_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.context_ != nullptr) {
    delete _impl_.context_;
  }
  _impl_.context_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.partial_caveat_info_ != nullptr) {
    delete _impl_.partial_caveat_info_;
  }
  _impl_.partial_caveat_info_ = nullptr;
  _impl_.result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CaveatEvalInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string expression = 1 [json_name = "expression"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_expression();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "authzed.api.v1.CaveatEvalInfo.expression"));
        } else
          goto handle_unusual;
        continue;
      // .authzed.api.v1.CaveatEvalInfo.Result result = 2 [json_name = "result"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::authzed::api::v1::CaveatEvalInfo_Result>(val));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct context = 3 [json_name = "context"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_context(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .authzed.api.v1.PartialCaveatInfo partial_caveat_info = 4 [json_name = "partialCaveatInfo"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_partial_caveat_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string caveat_name = 5 [json_name = "caveatName"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_caveat_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "authzed.api.v1.CaveatEvalInfo.caveat_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CaveatEvalInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:authzed.api.v1.CaveatEvalInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string expression = 1 [json_name = "expression"];
  if (!this->_internal_expression().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_expression().data(), static_cast<int>(this->_internal_expression().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "authzed.api.v1.CaveatEvalInfo.expression");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_expression(), target);
  }

  // .authzed.api.v1.CaveatEvalInfo.Result result = 2 [json_name = "result"];
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_result(), target);
  }

  // .google.protobuf.Struct context = 3 [json_name = "context"];
  if (this->_internal_has_context()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::context(this),
        _Internal::context(this).GetCachedSize(), target, stream);
  }

  // .authzed.api.v1.PartialCaveatInfo partial_caveat_info = 4 [json_name = "partialCaveatInfo"];
  if (this->_internal_has_partial_caveat_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::partial_caveat_info(this),
        _Internal::partial_caveat_info(this).GetCachedSize(), target, stream);
  }

  // string caveat_name = 5 [json_name = "caveatName"];
  if (!this->_internal_caveat_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_caveat_name().data(), static_cast<int>(this->_internal_caveat_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "authzed.api.v1.CaveatEvalInfo.caveat_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_caveat_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:authzed.api.v1.CaveatEvalInfo)
  return target;
}

size_t CaveatEvalInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:authzed.api.v1.CaveatEvalInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string expression = 1 [json_name = "expression"];
  if (!this->_internal_expression().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_expression());
  }

  // string caveat_name = 5 [json_name = "caveatName"];
  if (!this->_internal_caveat_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_caveat_name());
  }

  // .google.protobuf.Struct context = 3 [json_name = "context"];
  if (this->_internal_has_context()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.context_);
  }

  // .authzed.api.v1.PartialCaveatInfo partial_caveat_info = 4 [json_name = "partialCaveatInfo"];
  if (this->_internal_has_partial_caveat_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.partial_caveat_info_);
  }

  // .authzed.api.v1.CaveatEvalInfo.Result result = 2 [json_name = "result"];
  if (this->_internal_result() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CaveatEvalInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CaveatEvalInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CaveatEvalInfo::GetClassData() const { return &_class_data_; }


void CaveatEvalInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CaveatEvalInfo*>(&to_msg);
  auto& from = static_cast<const CaveatEvalInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:authzed.api.v1.CaveatEvalInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_expression().empty()) {
    _this->_internal_set_expression(from._internal_expression());
  }
  if (!from._internal_caveat_name().empty()) {
    _this->_internal_set_caveat_name(from._internal_caveat_name());
  }
  if (from._internal_has_context()) {
    _this->_internal_mutable_context()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(
        from._internal_context());
  }
  if (from._internal_has_partial_caveat_info()) {
    _this->_internal_mutable_partial_caveat_info()->::authzed::api::v1::PartialCaveatInfo::MergeFrom(
        from._internal_partial_caveat_info());
  }
  if (from._internal_result() != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CaveatEvalInfo::CopyFrom(const CaveatEvalInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:authzed.api.v1.CaveatEvalInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CaveatEvalInfo::IsInitialized() const {
  return true;
}

void CaveatEvalInfo::InternalSwap(CaveatEvalInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.expression_, lhs_arena,
      &other->_impl_.expression_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.caveat_name_, lhs_arena,
      &other->_impl_.caveat_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CaveatEvalInfo, _impl_.result_)
      + sizeof(CaveatEvalInfo::_impl_.result_)
      - PROTOBUF_FIELD_OFFSET(CaveatEvalInfo, _impl_.context_)>(
          reinterpret_cast<char*>(&_impl_.context_),
          reinterpret_cast<char*>(&other->_impl_.context_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CaveatEvalInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_authzed_2fapi_2fv1_2fdebug_2eproto_getter, &descriptor_table_authzed_2fapi_2fv1_2fdebug_2eproto_once,
      file_level_metadata_authzed_2fapi_2fv1_2fdebug_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace api
}  // namespace authzed
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::authzed::api::v1::DebugInformation*
Arena::CreateMaybeMessage< ::authzed::api::v1::DebugInformation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::authzed::api::v1::DebugInformation >(arena);
}
template<> PROTOBUF_NOINLINE ::authzed::api::v1::CheckDebugTrace_SubProblems*
Arena::CreateMaybeMessage< ::authzed::api::v1::CheckDebugTrace_SubProblems >(Arena* arena) {
  return Arena::CreateMessageInternal< ::authzed::api::v1::CheckDebugTrace_SubProblems >(arena);
}
template<> PROTOBUF_NOINLINE ::authzed::api::v1::CheckDebugTrace*
Arena::CreateMaybeMessage< ::authzed::api::v1::CheckDebugTrace >(Arena* arena) {
  return Arena::CreateMessageInternal< ::authzed::api::v1::CheckDebugTrace >(arena);
}
template<> PROTOBUF_NOINLINE ::authzed::api::v1::CaveatEvalInfo*
Arena::CreateMaybeMessage< ::authzed::api::v1::CaveatEvalInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::authzed::api::v1::CaveatEvalInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
