#if defined(_MSC_VER)
  #pragma warning (disable:4018) // 'expression' : signed/unsigned mismatch
  #pragma warning (disable:4065) // switch statement contains 'default' but no 'case' labels
  #pragma warning (disable:4146) // unary minus operator applied to unsigned type, result still unsigned
  #pragma warning (disable:4244) // 'conversion' conversion from 'type1' to 'type2', possible loss of data
  #pragma warning (disable:4251) // 'identifier' : class 'type' needs to have dll-interface to be used by clients of class 'type2'
  #pragma warning (disable:4267) // 'var' : conversion from 'size_t' to 'type', possible loss of data
  #pragma warning (disable:4305) // 'identifier' : truncation from 'type1' to 'type2'
  #pragma warning (disable:4307) // 'operator' : integral constant overflow
  #pragma warning (disable:4309) // 'conversion' : truncation of constant value
  #pragma warning (disable:4334) // 'operator' : result of 32-bit shift implicitly converted to 64 bits (was 64-bit shift intended?)
  #pragma warning (disable:4355) // 'this' : used in base member initializer list
  #pragma warning (disable:4506) // no definition for inline function 'function'
  #pragma warning (disable:4800) // 'type' : forcing value to bool 'true' or 'false' (performance warning)
  #pragma warning (disable:4996) // The compiler encountered a deprecated declaration.
  #pragma warning (disable:4125) // decimal digit terminates octal escape sequence
#endif
// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: authzed/api/v1/watch_service.proto

#include "pb/authzed/api/v1/watch_service.pb.h"
#include "pb/authzed/api/v1/watch_service.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace authzed {
namespace api {
namespace v1 {

static const char* WatchService_method_names[] = {
  "/authzed.api.v1.WatchService/Watch",
};

std::unique_ptr< WatchService::Stub> WatchService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< WatchService::Stub> stub(new WatchService::Stub(channel, options));
  return stub;
}

WatchService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Watch_(WatchService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientReader< ::authzed::api::v1::WatchResponse>* WatchService::Stub::WatchRaw(::grpc::ClientContext* context, const ::authzed::api::v1::WatchRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::authzed::api::v1::WatchResponse>::Create(channel_.get(), rpcmethod_Watch_, context, request);
}

void WatchService::Stub::async::Watch(::grpc::ClientContext* context, const ::authzed::api::v1::WatchRequest* request, ::grpc::ClientReadReactor< ::authzed::api::v1::WatchResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::authzed::api::v1::WatchResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_Watch_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::authzed::api::v1::WatchResponse>* WatchService::Stub::AsyncWatchRaw(::grpc::ClientContext* context, const ::authzed::api::v1::WatchRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::authzed::api::v1::WatchResponse>::Create(channel_.get(), cq, rpcmethod_Watch_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::authzed::api::v1::WatchResponse>* WatchService::Stub::PrepareAsyncWatchRaw(::grpc::ClientContext* context, const ::authzed::api::v1::WatchRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::authzed::api::v1::WatchResponse>::Create(channel_.get(), cq, rpcmethod_Watch_, context, request, false, nullptr);
}

WatchService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WatchService_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< WatchService::Service, ::authzed::api::v1::WatchRequest, ::authzed::api::v1::WatchResponse>(
          [](WatchService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::authzed::api::v1::WatchRequest* req,
             ::grpc::ServerWriter<::authzed::api::v1::WatchResponse>* writer) {
               return service->Watch(ctx, req, writer);
             }, this)));
}

WatchService::Service::~Service() {
}

::grpc::Status WatchService::Service::Watch(::grpc::ServerContext* context, const ::authzed::api::v1::WatchRequest* request, ::grpc::ServerWriter< ::authzed::api::v1::WatchResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace authzed
}  // namespace api
}  // namespace v1

