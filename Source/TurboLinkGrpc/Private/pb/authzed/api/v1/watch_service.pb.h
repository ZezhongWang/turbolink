// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: authzed/api/v1/watch_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_authzed_2fapi_2fv1_2fwatch_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_authzed_2fapi_2fv1_2fwatch_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "pb/google/api/annotations.pb.h"
#include "pb/validate/validate.pb.h"
#include "pb/authzed/api/v1/core.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_authzed_2fapi_2fv1_2fwatch_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_authzed_2fapi_2fv1_2fwatch_5fservice_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_authzed_2fapi_2fv1_2fwatch_5fservice_2eproto;
namespace authzed {
namespace api {
namespace v1 {
class WatchRequest;
struct WatchRequestDefaultTypeInternal;
extern WatchRequestDefaultTypeInternal _WatchRequest_default_instance_;
class WatchResponse;
struct WatchResponseDefaultTypeInternal;
extern WatchResponseDefaultTypeInternal _WatchResponse_default_instance_;
}  // namespace v1
}  // namespace api
}  // namespace authzed
PROTOBUF_NAMESPACE_OPEN
template<> ::authzed::api::v1::WatchRequest* Arena::CreateMaybeMessage<::authzed::api::v1::WatchRequest>(Arena*);
template<> ::authzed::api::v1::WatchResponse* Arena::CreateMaybeMessage<::authzed::api::v1::WatchResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace authzed {
namespace api {
namespace v1 {

// ===================================================================

class WatchRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:authzed.api.v1.WatchRequest) */ {
 public:
  inline WatchRequest() : WatchRequest(nullptr) {}
  ~WatchRequest() override;
  explicit PROTOBUF_CONSTEXPR WatchRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WatchRequest(const WatchRequest& from);
  WatchRequest(WatchRequest&& from) noexcept
    : WatchRequest() {
    *this = ::std::move(from);
  }

  inline WatchRequest& operator=(const WatchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WatchRequest& operator=(WatchRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WatchRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WatchRequest* internal_default_instance() {
    return reinterpret_cast<const WatchRequest*>(
               &_WatchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(WatchRequest& a, WatchRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WatchRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WatchRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WatchRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WatchRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WatchRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WatchRequest& from) {
    WatchRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WatchRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "authzed.api.v1.WatchRequest";
  }
  protected:
  explicit WatchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOptionalObjectTypesFieldNumber = 1,
    kOptionalStartCursorFieldNumber = 2,
  };
  // repeated string optional_object_types = 1 [json_name = "optionalObjectTypes", (.validate.rules) = {
  int optional_object_types_size() const;
  private:
  int _internal_optional_object_types_size() const;
  public:
  void clear_optional_object_types();
  const std::string& optional_object_types(int index) const;
  std::string* mutable_optional_object_types(int index);
  void set_optional_object_types(int index, const std::string& value);
  void set_optional_object_types(int index, std::string&& value);
  void set_optional_object_types(int index, const char* value);
  void set_optional_object_types(int index, const char* value, size_t size);
  std::string* add_optional_object_types();
  void add_optional_object_types(const std::string& value);
  void add_optional_object_types(std::string&& value);
  void add_optional_object_types(const char* value);
  void add_optional_object_types(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& optional_object_types() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_optional_object_types();
  private:
  const std::string& _internal_optional_object_types(int index) const;
  std::string* _internal_add_optional_object_types();
  public:

  // .authzed.api.v1.ZedToken optional_start_cursor = 2 [json_name = "optionalStartCursor"];
  bool has_optional_start_cursor() const;
  private:
  bool _internal_has_optional_start_cursor() const;
  public:
  void clear_optional_start_cursor();
  const ::authzed::api::v1::ZedToken& optional_start_cursor() const;
  PROTOBUF_NODISCARD ::authzed::api::v1::ZedToken* release_optional_start_cursor();
  ::authzed::api::v1::ZedToken* mutable_optional_start_cursor();
  void set_allocated_optional_start_cursor(::authzed::api::v1::ZedToken* optional_start_cursor);
  private:
  const ::authzed::api::v1::ZedToken& _internal_optional_start_cursor() const;
  ::authzed::api::v1::ZedToken* _internal_mutable_optional_start_cursor();
  public:
  void unsafe_arena_set_allocated_optional_start_cursor(
      ::authzed::api::v1::ZedToken* optional_start_cursor);
  ::authzed::api::v1::ZedToken* unsafe_arena_release_optional_start_cursor();

  // @@protoc_insertion_point(class_scope:authzed.api.v1.WatchRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> optional_object_types_;
    ::authzed::api::v1::ZedToken* optional_start_cursor_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_authzed_2fapi_2fv1_2fwatch_5fservice_2eproto;
};
// -------------------------------------------------------------------

class WatchResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:authzed.api.v1.WatchResponse) */ {
 public:
  inline WatchResponse() : WatchResponse(nullptr) {}
  ~WatchResponse() override;
  explicit PROTOBUF_CONSTEXPR WatchResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WatchResponse(const WatchResponse& from);
  WatchResponse(WatchResponse&& from) noexcept
    : WatchResponse() {
    *this = ::std::move(from);
  }

  inline WatchResponse& operator=(const WatchResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WatchResponse& operator=(WatchResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WatchResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const WatchResponse* internal_default_instance() {
    return reinterpret_cast<const WatchResponse*>(
               &_WatchResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(WatchResponse& a, WatchResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WatchResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WatchResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WatchResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WatchResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WatchResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WatchResponse& from) {
    WatchResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WatchResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "authzed.api.v1.WatchResponse";
  }
  protected:
  explicit WatchResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpdatesFieldNumber = 1,
    kChangesThroughFieldNumber = 2,
  };
  // repeated .authzed.api.v1.RelationshipUpdate updates = 1 [json_name = "updates"];
  int updates_size() const;
  private:
  int _internal_updates_size() const;
  public:
  void clear_updates();
  ::authzed::api::v1::RelationshipUpdate* mutable_updates(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::authzed::api::v1::RelationshipUpdate >*
      mutable_updates();
  private:
  const ::authzed::api::v1::RelationshipUpdate& _internal_updates(int index) const;
  ::authzed::api::v1::RelationshipUpdate* _internal_add_updates();
  public:
  const ::authzed::api::v1::RelationshipUpdate& updates(int index) const;
  ::authzed::api::v1::RelationshipUpdate* add_updates();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::authzed::api::v1::RelationshipUpdate >&
      updates() const;

  // .authzed.api.v1.ZedToken changes_through = 2 [json_name = "changesThrough"];
  bool has_changes_through() const;
  private:
  bool _internal_has_changes_through() const;
  public:
  void clear_changes_through();
  const ::authzed::api::v1::ZedToken& changes_through() const;
  PROTOBUF_NODISCARD ::authzed::api::v1::ZedToken* release_changes_through();
  ::authzed::api::v1::ZedToken* mutable_changes_through();
  void set_allocated_changes_through(::authzed::api::v1::ZedToken* changes_through);
  private:
  const ::authzed::api::v1::ZedToken& _internal_changes_through() const;
  ::authzed::api::v1::ZedToken* _internal_mutable_changes_through();
  public:
  void unsafe_arena_set_allocated_changes_through(
      ::authzed::api::v1::ZedToken* changes_through);
  ::authzed::api::v1::ZedToken* unsafe_arena_release_changes_through();

  // @@protoc_insertion_point(class_scope:authzed.api.v1.WatchResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::authzed::api::v1::RelationshipUpdate > updates_;
    ::authzed::api::v1::ZedToken* changes_through_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_authzed_2fapi_2fv1_2fwatch_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WatchRequest

// repeated string optional_object_types = 1 [json_name = "optionalObjectTypes", (.validate.rules) = {
inline int WatchRequest::_internal_optional_object_types_size() const {
  return _impl_.optional_object_types_.size();
}
inline int WatchRequest::optional_object_types_size() const {
  return _internal_optional_object_types_size();
}
inline void WatchRequest::clear_optional_object_types() {
  _impl_.optional_object_types_.Clear();
}
inline std::string* WatchRequest::add_optional_object_types() {
  std::string* _s = _internal_add_optional_object_types();
  // @@protoc_insertion_point(field_add_mutable:authzed.api.v1.WatchRequest.optional_object_types)
  return _s;
}
inline const std::string& WatchRequest::_internal_optional_object_types(int index) const {
  return _impl_.optional_object_types_.Get(index);
}
inline const std::string& WatchRequest::optional_object_types(int index) const {
  // @@protoc_insertion_point(field_get:authzed.api.v1.WatchRequest.optional_object_types)
  return _internal_optional_object_types(index);
}
inline std::string* WatchRequest::mutable_optional_object_types(int index) {
  // @@protoc_insertion_point(field_mutable:authzed.api.v1.WatchRequest.optional_object_types)
  return _impl_.optional_object_types_.Mutable(index);
}
inline void WatchRequest::set_optional_object_types(int index, const std::string& value) {
  _impl_.optional_object_types_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:authzed.api.v1.WatchRequest.optional_object_types)
}
inline void WatchRequest::set_optional_object_types(int index, std::string&& value) {
  _impl_.optional_object_types_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:authzed.api.v1.WatchRequest.optional_object_types)
}
inline void WatchRequest::set_optional_object_types(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.optional_object_types_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:authzed.api.v1.WatchRequest.optional_object_types)
}
inline void WatchRequest::set_optional_object_types(int index, const char* value, size_t size) {
  _impl_.optional_object_types_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:authzed.api.v1.WatchRequest.optional_object_types)
}
inline std::string* WatchRequest::_internal_add_optional_object_types() {
  return _impl_.optional_object_types_.Add();
}
inline void WatchRequest::add_optional_object_types(const std::string& value) {
  _impl_.optional_object_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:authzed.api.v1.WatchRequest.optional_object_types)
}
inline void WatchRequest::add_optional_object_types(std::string&& value) {
  _impl_.optional_object_types_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:authzed.api.v1.WatchRequest.optional_object_types)
}
inline void WatchRequest::add_optional_object_types(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.optional_object_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:authzed.api.v1.WatchRequest.optional_object_types)
}
inline void WatchRequest::add_optional_object_types(const char* value, size_t size) {
  _impl_.optional_object_types_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:authzed.api.v1.WatchRequest.optional_object_types)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
WatchRequest::optional_object_types() const {
  // @@protoc_insertion_point(field_list:authzed.api.v1.WatchRequest.optional_object_types)
  return _impl_.optional_object_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
WatchRequest::mutable_optional_object_types() {
  // @@protoc_insertion_point(field_mutable_list:authzed.api.v1.WatchRequest.optional_object_types)
  return &_impl_.optional_object_types_;
}

// .authzed.api.v1.ZedToken optional_start_cursor = 2 [json_name = "optionalStartCursor"];
inline bool WatchRequest::_internal_has_optional_start_cursor() const {
  return this != internal_default_instance() && _impl_.optional_start_cursor_ != nullptr;
}
inline bool WatchRequest::has_optional_start_cursor() const {
  return _internal_has_optional_start_cursor();
}
inline const ::authzed::api::v1::ZedToken& WatchRequest::_internal_optional_start_cursor() const {
  const ::authzed::api::v1::ZedToken* p = _impl_.optional_start_cursor_;
  return p != nullptr ? *p : reinterpret_cast<const ::authzed::api::v1::ZedToken&>(
      ::authzed::api::v1::_ZedToken_default_instance_);
}
inline const ::authzed::api::v1::ZedToken& WatchRequest::optional_start_cursor() const {
  // @@protoc_insertion_point(field_get:authzed.api.v1.WatchRequest.optional_start_cursor)
  return _internal_optional_start_cursor();
}
inline void WatchRequest::unsafe_arena_set_allocated_optional_start_cursor(
    ::authzed::api::v1::ZedToken* optional_start_cursor) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.optional_start_cursor_);
  }
  _impl_.optional_start_cursor_ = optional_start_cursor;
  if (optional_start_cursor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:authzed.api.v1.WatchRequest.optional_start_cursor)
}
inline ::authzed::api::v1::ZedToken* WatchRequest::release_optional_start_cursor() {
  
  ::authzed::api::v1::ZedToken* temp = _impl_.optional_start_cursor_;
  _impl_.optional_start_cursor_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::authzed::api::v1::ZedToken* WatchRequest::unsafe_arena_release_optional_start_cursor() {
  // @@protoc_insertion_point(field_release:authzed.api.v1.WatchRequest.optional_start_cursor)
  
  ::authzed::api::v1::ZedToken* temp = _impl_.optional_start_cursor_;
  _impl_.optional_start_cursor_ = nullptr;
  return temp;
}
inline ::authzed::api::v1::ZedToken* WatchRequest::_internal_mutable_optional_start_cursor() {
  
  if (_impl_.optional_start_cursor_ == nullptr) {
    auto* p = CreateMaybeMessage<::authzed::api::v1::ZedToken>(GetArenaForAllocation());
    _impl_.optional_start_cursor_ = p;
  }
  return _impl_.optional_start_cursor_;
}
inline ::authzed::api::v1::ZedToken* WatchRequest::mutable_optional_start_cursor() {
  ::authzed::api::v1::ZedToken* _msg = _internal_mutable_optional_start_cursor();
  // @@protoc_insertion_point(field_mutable:authzed.api.v1.WatchRequest.optional_start_cursor)
  return _msg;
}
inline void WatchRequest::set_allocated_optional_start_cursor(::authzed::api::v1::ZedToken* optional_start_cursor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.optional_start_cursor_);
  }
  if (optional_start_cursor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(optional_start_cursor));
    if (message_arena != submessage_arena) {
      optional_start_cursor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, optional_start_cursor, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.optional_start_cursor_ = optional_start_cursor;
  // @@protoc_insertion_point(field_set_allocated:authzed.api.v1.WatchRequest.optional_start_cursor)
}

// -------------------------------------------------------------------

// WatchResponse

// repeated .authzed.api.v1.RelationshipUpdate updates = 1 [json_name = "updates"];
inline int WatchResponse::_internal_updates_size() const {
  return _impl_.updates_.size();
}
inline int WatchResponse::updates_size() const {
  return _internal_updates_size();
}
inline ::authzed::api::v1::RelationshipUpdate* WatchResponse::mutable_updates(int index) {
  // @@protoc_insertion_point(field_mutable:authzed.api.v1.WatchResponse.updates)
  return _impl_.updates_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::authzed::api::v1::RelationshipUpdate >*
WatchResponse::mutable_updates() {
  // @@protoc_insertion_point(field_mutable_list:authzed.api.v1.WatchResponse.updates)
  return &_impl_.updates_;
}
inline const ::authzed::api::v1::RelationshipUpdate& WatchResponse::_internal_updates(int index) const {
  return _impl_.updates_.Get(index);
}
inline const ::authzed::api::v1::RelationshipUpdate& WatchResponse::updates(int index) const {
  // @@protoc_insertion_point(field_get:authzed.api.v1.WatchResponse.updates)
  return _internal_updates(index);
}
inline ::authzed::api::v1::RelationshipUpdate* WatchResponse::_internal_add_updates() {
  return _impl_.updates_.Add();
}
inline ::authzed::api::v1::RelationshipUpdate* WatchResponse::add_updates() {
  ::authzed::api::v1::RelationshipUpdate* _add = _internal_add_updates();
  // @@protoc_insertion_point(field_add:authzed.api.v1.WatchResponse.updates)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::authzed::api::v1::RelationshipUpdate >&
WatchResponse::updates() const {
  // @@protoc_insertion_point(field_list:authzed.api.v1.WatchResponse.updates)
  return _impl_.updates_;
}

// .authzed.api.v1.ZedToken changes_through = 2 [json_name = "changesThrough"];
inline bool WatchResponse::_internal_has_changes_through() const {
  return this != internal_default_instance() && _impl_.changes_through_ != nullptr;
}
inline bool WatchResponse::has_changes_through() const {
  return _internal_has_changes_through();
}
inline const ::authzed::api::v1::ZedToken& WatchResponse::_internal_changes_through() const {
  const ::authzed::api::v1::ZedToken* p = _impl_.changes_through_;
  return p != nullptr ? *p : reinterpret_cast<const ::authzed::api::v1::ZedToken&>(
      ::authzed::api::v1::_ZedToken_default_instance_);
}
inline const ::authzed::api::v1::ZedToken& WatchResponse::changes_through() const {
  // @@protoc_insertion_point(field_get:authzed.api.v1.WatchResponse.changes_through)
  return _internal_changes_through();
}
inline void WatchResponse::unsafe_arena_set_allocated_changes_through(
    ::authzed::api::v1::ZedToken* changes_through) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.changes_through_);
  }
  _impl_.changes_through_ = changes_through;
  if (changes_through) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:authzed.api.v1.WatchResponse.changes_through)
}
inline ::authzed::api::v1::ZedToken* WatchResponse::release_changes_through() {
  
  ::authzed::api::v1::ZedToken* temp = _impl_.changes_through_;
  _impl_.changes_through_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::authzed::api::v1::ZedToken* WatchResponse::unsafe_arena_release_changes_through() {
  // @@protoc_insertion_point(field_release:authzed.api.v1.WatchResponse.changes_through)
  
  ::authzed::api::v1::ZedToken* temp = _impl_.changes_through_;
  _impl_.changes_through_ = nullptr;
  return temp;
}
inline ::authzed::api::v1::ZedToken* WatchResponse::_internal_mutable_changes_through() {
  
  if (_impl_.changes_through_ == nullptr) {
    auto* p = CreateMaybeMessage<::authzed::api::v1::ZedToken>(GetArenaForAllocation());
    _impl_.changes_through_ = p;
  }
  return _impl_.changes_through_;
}
inline ::authzed::api::v1::ZedToken* WatchResponse::mutable_changes_through() {
  ::authzed::api::v1::ZedToken* _msg = _internal_mutable_changes_through();
  // @@protoc_insertion_point(field_mutable:authzed.api.v1.WatchResponse.changes_through)
  return _msg;
}
inline void WatchResponse::set_allocated_changes_through(::authzed::api::v1::ZedToken* changes_through) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.changes_through_);
  }
  if (changes_through) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(changes_through));
    if (message_arena != submessage_arena) {
      changes_through = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, changes_through, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.changes_through_ = changes_through;
  // @@protoc_insertion_point(field_set_allocated:authzed.api.v1.WatchResponse.changes_through)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace api
}  // namespace authzed

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_authzed_2fapi_2fv1_2fwatch_5fservice_2eproto
