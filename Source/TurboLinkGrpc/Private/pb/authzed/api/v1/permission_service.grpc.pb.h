#if defined(_MSC_VER)
  #pragma warning (disable:4946) // reinterpret_cast used between related classes: 'class1' and 'class2'
#endif
// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: authzed/api/v1/permission_service.proto
#ifndef GRPC_authzed_2fapi_2fv1_2fpermission_5fservice_2eproto__INCLUDED
#define GRPC_authzed_2fapi_2fv1_2fpermission_5fservice_2eproto__INCLUDED

#include "pb/authzed/api/v1/permission_service.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace authzed {
namespace api {
namespace v1 {

// PermissionsService implements a set of RPCs that perform operations on
// relationships and permissions.
class PermissionsService final {
 public:
  static constexpr char const* service_full_name() {
    return "authzed.api.v1.PermissionsService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // ReadRelationships reads a set of the relationships matching one or more
    // filters.
    std::unique_ptr< ::grpc::ClientReaderInterface< ::authzed::api::v1::ReadRelationshipsResponse>> ReadRelationships(::grpc::ClientContext* context, const ::authzed::api::v1::ReadRelationshipsRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::authzed::api::v1::ReadRelationshipsResponse>>(ReadRelationshipsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::authzed::api::v1::ReadRelationshipsResponse>> AsyncReadRelationships(::grpc::ClientContext* context, const ::authzed::api::v1::ReadRelationshipsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::authzed::api::v1::ReadRelationshipsResponse>>(AsyncReadRelationshipsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::authzed::api::v1::ReadRelationshipsResponse>> PrepareAsyncReadRelationships(::grpc::ClientContext* context, const ::authzed::api::v1::ReadRelationshipsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::authzed::api::v1::ReadRelationshipsResponse>>(PrepareAsyncReadRelationshipsRaw(context, request, cq));
    }
    // WriteRelationships atomically writes and/or deletes a set of specified
    // relationships. An optional set of preconditions can be provided that must
    // be satisfied for the operation to commit.
    virtual ::grpc::Status WriteRelationships(::grpc::ClientContext* context, const ::authzed::api::v1::WriteRelationshipsRequest& request, ::authzed::api::v1::WriteRelationshipsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::authzed::api::v1::WriteRelationshipsResponse>> AsyncWriteRelationships(::grpc::ClientContext* context, const ::authzed::api::v1::WriteRelationshipsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::authzed::api::v1::WriteRelationshipsResponse>>(AsyncWriteRelationshipsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::authzed::api::v1::WriteRelationshipsResponse>> PrepareAsyncWriteRelationships(::grpc::ClientContext* context, const ::authzed::api::v1::WriteRelationshipsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::authzed::api::v1::WriteRelationshipsResponse>>(PrepareAsyncWriteRelationshipsRaw(context, request, cq));
    }
    // DeleteRelationships atomically bulk deletes all relationships matching the
    // provided filter. If no relationships match, none will be deleted and the
    // operation will succeed. An optional set of preconditions can be provided that must
    // be satisfied for the operation to commit.
    virtual ::grpc::Status DeleteRelationships(::grpc::ClientContext* context, const ::authzed::api::v1::DeleteRelationshipsRequest& request, ::authzed::api::v1::DeleteRelationshipsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::authzed::api::v1::DeleteRelationshipsResponse>> AsyncDeleteRelationships(::grpc::ClientContext* context, const ::authzed::api::v1::DeleteRelationshipsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::authzed::api::v1::DeleteRelationshipsResponse>>(AsyncDeleteRelationshipsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::authzed::api::v1::DeleteRelationshipsResponse>> PrepareAsyncDeleteRelationships(::grpc::ClientContext* context, const ::authzed::api::v1::DeleteRelationshipsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::authzed::api::v1::DeleteRelationshipsResponse>>(PrepareAsyncDeleteRelationshipsRaw(context, request, cq));
    }
    // CheckPermission determines for a given resource whether a subject computes
    // to having a permission or is a direct member of a particular relation.
    virtual ::grpc::Status CheckPermission(::grpc::ClientContext* context, const ::authzed::api::v1::CheckPermissionRequest& request, ::authzed::api::v1::CheckPermissionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::authzed::api::v1::CheckPermissionResponse>> AsyncCheckPermission(::grpc::ClientContext* context, const ::authzed::api::v1::CheckPermissionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::authzed::api::v1::CheckPermissionResponse>>(AsyncCheckPermissionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::authzed::api::v1::CheckPermissionResponse>> PrepareAsyncCheckPermission(::grpc::ClientContext* context, const ::authzed::api::v1::CheckPermissionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::authzed::api::v1::CheckPermissionResponse>>(PrepareAsyncCheckPermissionRaw(context, request, cq));
    }
    // ExpandPermissionTree reveals the graph structure for a resource's
    // permission or relation. This RPC does not recurse infinitely deep and may
    // require multiple calls to fully unnest a deeply nested graph.
    virtual ::grpc::Status ExpandPermissionTree(::grpc::ClientContext* context, const ::authzed::api::v1::ExpandPermissionTreeRequest& request, ::authzed::api::v1::ExpandPermissionTreeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::authzed::api::v1::ExpandPermissionTreeResponse>> AsyncExpandPermissionTree(::grpc::ClientContext* context, const ::authzed::api::v1::ExpandPermissionTreeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::authzed::api::v1::ExpandPermissionTreeResponse>>(AsyncExpandPermissionTreeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::authzed::api::v1::ExpandPermissionTreeResponse>> PrepareAsyncExpandPermissionTree(::grpc::ClientContext* context, const ::authzed::api::v1::ExpandPermissionTreeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::authzed::api::v1::ExpandPermissionTreeResponse>>(PrepareAsyncExpandPermissionTreeRaw(context, request, cq));
    }
    // LookupResources returns all the resources of a given type that a subject
    // can access whether via a computed permission or relation membership.
    std::unique_ptr< ::grpc::ClientReaderInterface< ::authzed::api::v1::LookupResourcesResponse>> LookupResources(::grpc::ClientContext* context, const ::authzed::api::v1::LookupResourcesRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::authzed::api::v1::LookupResourcesResponse>>(LookupResourcesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::authzed::api::v1::LookupResourcesResponse>> AsyncLookupResources(::grpc::ClientContext* context, const ::authzed::api::v1::LookupResourcesRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::authzed::api::v1::LookupResourcesResponse>>(AsyncLookupResourcesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::authzed::api::v1::LookupResourcesResponse>> PrepareAsyncLookupResources(::grpc::ClientContext* context, const ::authzed::api::v1::LookupResourcesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::authzed::api::v1::LookupResourcesResponse>>(PrepareAsyncLookupResourcesRaw(context, request, cq));
    }
    // LookupSubjects returns all the subjects of a given type that
    // have access whether via a computed permission or relation membership.
    std::unique_ptr< ::grpc::ClientReaderInterface< ::authzed::api::v1::LookupSubjectsResponse>> LookupSubjects(::grpc::ClientContext* context, const ::authzed::api::v1::LookupSubjectsRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::authzed::api::v1::LookupSubjectsResponse>>(LookupSubjectsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::authzed::api::v1::LookupSubjectsResponse>> AsyncLookupSubjects(::grpc::ClientContext* context, const ::authzed::api::v1::LookupSubjectsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::authzed::api::v1::LookupSubjectsResponse>>(AsyncLookupSubjectsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::authzed::api::v1::LookupSubjectsResponse>> PrepareAsyncLookupSubjects(::grpc::ClientContext* context, const ::authzed::api::v1::LookupSubjectsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::authzed::api::v1::LookupSubjectsResponse>>(PrepareAsyncLookupSubjectsRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // ReadRelationships reads a set of the relationships matching one or more
      // filters.
      virtual void ReadRelationships(::grpc::ClientContext* context, const ::authzed::api::v1::ReadRelationshipsRequest* request, ::grpc::ClientReadReactor< ::authzed::api::v1::ReadRelationshipsResponse>* reactor) = 0;
      // WriteRelationships atomically writes and/or deletes a set of specified
      // relationships. An optional set of preconditions can be provided that must
      // be satisfied for the operation to commit.
      virtual void WriteRelationships(::grpc::ClientContext* context, const ::authzed::api::v1::WriteRelationshipsRequest* request, ::authzed::api::v1::WriteRelationshipsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void WriteRelationships(::grpc::ClientContext* context, const ::authzed::api::v1::WriteRelationshipsRequest* request, ::authzed::api::v1::WriteRelationshipsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // DeleteRelationships atomically bulk deletes all relationships matching the
      // provided filter. If no relationships match, none will be deleted and the
      // operation will succeed. An optional set of preconditions can be provided that must
      // be satisfied for the operation to commit.
      virtual void DeleteRelationships(::grpc::ClientContext* context, const ::authzed::api::v1::DeleteRelationshipsRequest* request, ::authzed::api::v1::DeleteRelationshipsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteRelationships(::grpc::ClientContext* context, const ::authzed::api::v1::DeleteRelationshipsRequest* request, ::authzed::api::v1::DeleteRelationshipsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // CheckPermission determines for a given resource whether a subject computes
      // to having a permission or is a direct member of a particular relation.
      virtual void CheckPermission(::grpc::ClientContext* context, const ::authzed::api::v1::CheckPermissionRequest* request, ::authzed::api::v1::CheckPermissionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CheckPermission(::grpc::ClientContext* context, const ::authzed::api::v1::CheckPermissionRequest* request, ::authzed::api::v1::CheckPermissionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // ExpandPermissionTree reveals the graph structure for a resource's
      // permission or relation. This RPC does not recurse infinitely deep and may
      // require multiple calls to fully unnest a deeply nested graph.
      virtual void ExpandPermissionTree(::grpc::ClientContext* context, const ::authzed::api::v1::ExpandPermissionTreeRequest* request, ::authzed::api::v1::ExpandPermissionTreeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ExpandPermissionTree(::grpc::ClientContext* context, const ::authzed::api::v1::ExpandPermissionTreeRequest* request, ::authzed::api::v1::ExpandPermissionTreeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // LookupResources returns all the resources of a given type that a subject
      // can access whether via a computed permission or relation membership.
      virtual void LookupResources(::grpc::ClientContext* context, const ::authzed::api::v1::LookupResourcesRequest* request, ::grpc::ClientReadReactor< ::authzed::api::v1::LookupResourcesResponse>* reactor) = 0;
      // LookupSubjects returns all the subjects of a given type that
      // have access whether via a computed permission or relation membership.
      virtual void LookupSubjects(::grpc::ClientContext* context, const ::authzed::api::v1::LookupSubjectsRequest* request, ::grpc::ClientReadReactor< ::authzed::api::v1::LookupSubjectsResponse>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientReaderInterface< ::authzed::api::v1::ReadRelationshipsResponse>* ReadRelationshipsRaw(::grpc::ClientContext* context, const ::authzed::api::v1::ReadRelationshipsRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::authzed::api::v1::ReadRelationshipsResponse>* AsyncReadRelationshipsRaw(::grpc::ClientContext* context, const ::authzed::api::v1::ReadRelationshipsRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::authzed::api::v1::ReadRelationshipsResponse>* PrepareAsyncReadRelationshipsRaw(::grpc::ClientContext* context, const ::authzed::api::v1::ReadRelationshipsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::authzed::api::v1::WriteRelationshipsResponse>* AsyncWriteRelationshipsRaw(::grpc::ClientContext* context, const ::authzed::api::v1::WriteRelationshipsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::authzed::api::v1::WriteRelationshipsResponse>* PrepareAsyncWriteRelationshipsRaw(::grpc::ClientContext* context, const ::authzed::api::v1::WriteRelationshipsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::authzed::api::v1::DeleteRelationshipsResponse>* AsyncDeleteRelationshipsRaw(::grpc::ClientContext* context, const ::authzed::api::v1::DeleteRelationshipsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::authzed::api::v1::DeleteRelationshipsResponse>* PrepareAsyncDeleteRelationshipsRaw(::grpc::ClientContext* context, const ::authzed::api::v1::DeleteRelationshipsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::authzed::api::v1::CheckPermissionResponse>* AsyncCheckPermissionRaw(::grpc::ClientContext* context, const ::authzed::api::v1::CheckPermissionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::authzed::api::v1::CheckPermissionResponse>* PrepareAsyncCheckPermissionRaw(::grpc::ClientContext* context, const ::authzed::api::v1::CheckPermissionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::authzed::api::v1::ExpandPermissionTreeResponse>* AsyncExpandPermissionTreeRaw(::grpc::ClientContext* context, const ::authzed::api::v1::ExpandPermissionTreeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::authzed::api::v1::ExpandPermissionTreeResponse>* PrepareAsyncExpandPermissionTreeRaw(::grpc::ClientContext* context, const ::authzed::api::v1::ExpandPermissionTreeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::authzed::api::v1::LookupResourcesResponse>* LookupResourcesRaw(::grpc::ClientContext* context, const ::authzed::api::v1::LookupResourcesRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::authzed::api::v1::LookupResourcesResponse>* AsyncLookupResourcesRaw(::grpc::ClientContext* context, const ::authzed::api::v1::LookupResourcesRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::authzed::api::v1::LookupResourcesResponse>* PrepareAsyncLookupResourcesRaw(::grpc::ClientContext* context, const ::authzed::api::v1::LookupResourcesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::authzed::api::v1::LookupSubjectsResponse>* LookupSubjectsRaw(::grpc::ClientContext* context, const ::authzed::api::v1::LookupSubjectsRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::authzed::api::v1::LookupSubjectsResponse>* AsyncLookupSubjectsRaw(::grpc::ClientContext* context, const ::authzed::api::v1::LookupSubjectsRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::authzed::api::v1::LookupSubjectsResponse>* PrepareAsyncLookupSubjectsRaw(::grpc::ClientContext* context, const ::authzed::api::v1::LookupSubjectsRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientReader< ::authzed::api::v1::ReadRelationshipsResponse>> ReadRelationships(::grpc::ClientContext* context, const ::authzed::api::v1::ReadRelationshipsRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::authzed::api::v1::ReadRelationshipsResponse>>(ReadRelationshipsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::authzed::api::v1::ReadRelationshipsResponse>> AsyncReadRelationships(::grpc::ClientContext* context, const ::authzed::api::v1::ReadRelationshipsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::authzed::api::v1::ReadRelationshipsResponse>>(AsyncReadRelationshipsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::authzed::api::v1::ReadRelationshipsResponse>> PrepareAsyncReadRelationships(::grpc::ClientContext* context, const ::authzed::api::v1::ReadRelationshipsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::authzed::api::v1::ReadRelationshipsResponse>>(PrepareAsyncReadRelationshipsRaw(context, request, cq));
    }
    ::grpc::Status WriteRelationships(::grpc::ClientContext* context, const ::authzed::api::v1::WriteRelationshipsRequest& request, ::authzed::api::v1::WriteRelationshipsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::authzed::api::v1::WriteRelationshipsResponse>> AsyncWriteRelationships(::grpc::ClientContext* context, const ::authzed::api::v1::WriteRelationshipsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::authzed::api::v1::WriteRelationshipsResponse>>(AsyncWriteRelationshipsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::authzed::api::v1::WriteRelationshipsResponse>> PrepareAsyncWriteRelationships(::grpc::ClientContext* context, const ::authzed::api::v1::WriteRelationshipsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::authzed::api::v1::WriteRelationshipsResponse>>(PrepareAsyncWriteRelationshipsRaw(context, request, cq));
    }
    ::grpc::Status DeleteRelationships(::grpc::ClientContext* context, const ::authzed::api::v1::DeleteRelationshipsRequest& request, ::authzed::api::v1::DeleteRelationshipsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::authzed::api::v1::DeleteRelationshipsResponse>> AsyncDeleteRelationships(::grpc::ClientContext* context, const ::authzed::api::v1::DeleteRelationshipsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::authzed::api::v1::DeleteRelationshipsResponse>>(AsyncDeleteRelationshipsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::authzed::api::v1::DeleteRelationshipsResponse>> PrepareAsyncDeleteRelationships(::grpc::ClientContext* context, const ::authzed::api::v1::DeleteRelationshipsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::authzed::api::v1::DeleteRelationshipsResponse>>(PrepareAsyncDeleteRelationshipsRaw(context, request, cq));
    }
    ::grpc::Status CheckPermission(::grpc::ClientContext* context, const ::authzed::api::v1::CheckPermissionRequest& request, ::authzed::api::v1::CheckPermissionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::authzed::api::v1::CheckPermissionResponse>> AsyncCheckPermission(::grpc::ClientContext* context, const ::authzed::api::v1::CheckPermissionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::authzed::api::v1::CheckPermissionResponse>>(AsyncCheckPermissionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::authzed::api::v1::CheckPermissionResponse>> PrepareAsyncCheckPermission(::grpc::ClientContext* context, const ::authzed::api::v1::CheckPermissionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::authzed::api::v1::CheckPermissionResponse>>(PrepareAsyncCheckPermissionRaw(context, request, cq));
    }
    ::grpc::Status ExpandPermissionTree(::grpc::ClientContext* context, const ::authzed::api::v1::ExpandPermissionTreeRequest& request, ::authzed::api::v1::ExpandPermissionTreeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::authzed::api::v1::ExpandPermissionTreeResponse>> AsyncExpandPermissionTree(::grpc::ClientContext* context, const ::authzed::api::v1::ExpandPermissionTreeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::authzed::api::v1::ExpandPermissionTreeResponse>>(AsyncExpandPermissionTreeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::authzed::api::v1::ExpandPermissionTreeResponse>> PrepareAsyncExpandPermissionTree(::grpc::ClientContext* context, const ::authzed::api::v1::ExpandPermissionTreeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::authzed::api::v1::ExpandPermissionTreeResponse>>(PrepareAsyncExpandPermissionTreeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::authzed::api::v1::LookupResourcesResponse>> LookupResources(::grpc::ClientContext* context, const ::authzed::api::v1::LookupResourcesRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::authzed::api::v1::LookupResourcesResponse>>(LookupResourcesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::authzed::api::v1::LookupResourcesResponse>> AsyncLookupResources(::grpc::ClientContext* context, const ::authzed::api::v1::LookupResourcesRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::authzed::api::v1::LookupResourcesResponse>>(AsyncLookupResourcesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::authzed::api::v1::LookupResourcesResponse>> PrepareAsyncLookupResources(::grpc::ClientContext* context, const ::authzed::api::v1::LookupResourcesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::authzed::api::v1::LookupResourcesResponse>>(PrepareAsyncLookupResourcesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::authzed::api::v1::LookupSubjectsResponse>> LookupSubjects(::grpc::ClientContext* context, const ::authzed::api::v1::LookupSubjectsRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::authzed::api::v1::LookupSubjectsResponse>>(LookupSubjectsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::authzed::api::v1::LookupSubjectsResponse>> AsyncLookupSubjects(::grpc::ClientContext* context, const ::authzed::api::v1::LookupSubjectsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::authzed::api::v1::LookupSubjectsResponse>>(AsyncLookupSubjectsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::authzed::api::v1::LookupSubjectsResponse>> PrepareAsyncLookupSubjects(::grpc::ClientContext* context, const ::authzed::api::v1::LookupSubjectsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::authzed::api::v1::LookupSubjectsResponse>>(PrepareAsyncLookupSubjectsRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void ReadRelationships(::grpc::ClientContext* context, const ::authzed::api::v1::ReadRelationshipsRequest* request, ::grpc::ClientReadReactor< ::authzed::api::v1::ReadRelationshipsResponse>* reactor) override;
      void WriteRelationships(::grpc::ClientContext* context, const ::authzed::api::v1::WriteRelationshipsRequest* request, ::authzed::api::v1::WriteRelationshipsResponse* response, std::function<void(::grpc::Status)>) override;
      void WriteRelationships(::grpc::ClientContext* context, const ::authzed::api::v1::WriteRelationshipsRequest* request, ::authzed::api::v1::WriteRelationshipsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteRelationships(::grpc::ClientContext* context, const ::authzed::api::v1::DeleteRelationshipsRequest* request, ::authzed::api::v1::DeleteRelationshipsResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteRelationships(::grpc::ClientContext* context, const ::authzed::api::v1::DeleteRelationshipsRequest* request, ::authzed::api::v1::DeleteRelationshipsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CheckPermission(::grpc::ClientContext* context, const ::authzed::api::v1::CheckPermissionRequest* request, ::authzed::api::v1::CheckPermissionResponse* response, std::function<void(::grpc::Status)>) override;
      void CheckPermission(::grpc::ClientContext* context, const ::authzed::api::v1::CheckPermissionRequest* request, ::authzed::api::v1::CheckPermissionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ExpandPermissionTree(::grpc::ClientContext* context, const ::authzed::api::v1::ExpandPermissionTreeRequest* request, ::authzed::api::v1::ExpandPermissionTreeResponse* response, std::function<void(::grpc::Status)>) override;
      void ExpandPermissionTree(::grpc::ClientContext* context, const ::authzed::api::v1::ExpandPermissionTreeRequest* request, ::authzed::api::v1::ExpandPermissionTreeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void LookupResources(::grpc::ClientContext* context, const ::authzed::api::v1::LookupResourcesRequest* request, ::grpc::ClientReadReactor< ::authzed::api::v1::LookupResourcesResponse>* reactor) override;
      void LookupSubjects(::grpc::ClientContext* context, const ::authzed::api::v1::LookupSubjectsRequest* request, ::grpc::ClientReadReactor< ::authzed::api::v1::LookupSubjectsResponse>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientReader< ::authzed::api::v1::ReadRelationshipsResponse>* ReadRelationshipsRaw(::grpc::ClientContext* context, const ::authzed::api::v1::ReadRelationshipsRequest& request) override;
    ::grpc::ClientAsyncReader< ::authzed::api::v1::ReadRelationshipsResponse>* AsyncReadRelationshipsRaw(::grpc::ClientContext* context, const ::authzed::api::v1::ReadRelationshipsRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::authzed::api::v1::ReadRelationshipsResponse>* PrepareAsyncReadRelationshipsRaw(::grpc::ClientContext* context, const ::authzed::api::v1::ReadRelationshipsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::authzed::api::v1::WriteRelationshipsResponse>* AsyncWriteRelationshipsRaw(::grpc::ClientContext* context, const ::authzed::api::v1::WriteRelationshipsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::authzed::api::v1::WriteRelationshipsResponse>* PrepareAsyncWriteRelationshipsRaw(::grpc::ClientContext* context, const ::authzed::api::v1::WriteRelationshipsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::authzed::api::v1::DeleteRelationshipsResponse>* AsyncDeleteRelationshipsRaw(::grpc::ClientContext* context, const ::authzed::api::v1::DeleteRelationshipsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::authzed::api::v1::DeleteRelationshipsResponse>* PrepareAsyncDeleteRelationshipsRaw(::grpc::ClientContext* context, const ::authzed::api::v1::DeleteRelationshipsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::authzed::api::v1::CheckPermissionResponse>* AsyncCheckPermissionRaw(::grpc::ClientContext* context, const ::authzed::api::v1::CheckPermissionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::authzed::api::v1::CheckPermissionResponse>* PrepareAsyncCheckPermissionRaw(::grpc::ClientContext* context, const ::authzed::api::v1::CheckPermissionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::authzed::api::v1::ExpandPermissionTreeResponse>* AsyncExpandPermissionTreeRaw(::grpc::ClientContext* context, const ::authzed::api::v1::ExpandPermissionTreeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::authzed::api::v1::ExpandPermissionTreeResponse>* PrepareAsyncExpandPermissionTreeRaw(::grpc::ClientContext* context, const ::authzed::api::v1::ExpandPermissionTreeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::authzed::api::v1::LookupResourcesResponse>* LookupResourcesRaw(::grpc::ClientContext* context, const ::authzed::api::v1::LookupResourcesRequest& request) override;
    ::grpc::ClientAsyncReader< ::authzed::api::v1::LookupResourcesResponse>* AsyncLookupResourcesRaw(::grpc::ClientContext* context, const ::authzed::api::v1::LookupResourcesRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::authzed::api::v1::LookupResourcesResponse>* PrepareAsyncLookupResourcesRaw(::grpc::ClientContext* context, const ::authzed::api::v1::LookupResourcesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::authzed::api::v1::LookupSubjectsResponse>* LookupSubjectsRaw(::grpc::ClientContext* context, const ::authzed::api::v1::LookupSubjectsRequest& request) override;
    ::grpc::ClientAsyncReader< ::authzed::api::v1::LookupSubjectsResponse>* AsyncLookupSubjectsRaw(::grpc::ClientContext* context, const ::authzed::api::v1::LookupSubjectsRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::authzed::api::v1::LookupSubjectsResponse>* PrepareAsyncLookupSubjectsRaw(::grpc::ClientContext* context, const ::authzed::api::v1::LookupSubjectsRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ReadRelationships_;
    const ::grpc::internal::RpcMethod rpcmethod_WriteRelationships_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteRelationships_;
    const ::grpc::internal::RpcMethod rpcmethod_CheckPermission_;
    const ::grpc::internal::RpcMethod rpcmethod_ExpandPermissionTree_;
    const ::grpc::internal::RpcMethod rpcmethod_LookupResources_;
    const ::grpc::internal::RpcMethod rpcmethod_LookupSubjects_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // ReadRelationships reads a set of the relationships matching one or more
    // filters.
    virtual ::grpc::Status ReadRelationships(::grpc::ServerContext* context, const ::authzed::api::v1::ReadRelationshipsRequest* request, ::grpc::ServerWriter< ::authzed::api::v1::ReadRelationshipsResponse>* writer);
    // WriteRelationships atomically writes and/or deletes a set of specified
    // relationships. An optional set of preconditions can be provided that must
    // be satisfied for the operation to commit.
    virtual ::grpc::Status WriteRelationships(::grpc::ServerContext* context, const ::authzed::api::v1::WriteRelationshipsRequest* request, ::authzed::api::v1::WriteRelationshipsResponse* response);
    // DeleteRelationships atomically bulk deletes all relationships matching the
    // provided filter. If no relationships match, none will be deleted and the
    // operation will succeed. An optional set of preconditions can be provided that must
    // be satisfied for the operation to commit.
    virtual ::grpc::Status DeleteRelationships(::grpc::ServerContext* context, const ::authzed::api::v1::DeleteRelationshipsRequest* request, ::authzed::api::v1::DeleteRelationshipsResponse* response);
    // CheckPermission determines for a given resource whether a subject computes
    // to having a permission or is a direct member of a particular relation.
    virtual ::grpc::Status CheckPermission(::grpc::ServerContext* context, const ::authzed::api::v1::CheckPermissionRequest* request, ::authzed::api::v1::CheckPermissionResponse* response);
    // ExpandPermissionTree reveals the graph structure for a resource's
    // permission or relation. This RPC does not recurse infinitely deep and may
    // require multiple calls to fully unnest a deeply nested graph.
    virtual ::grpc::Status ExpandPermissionTree(::grpc::ServerContext* context, const ::authzed::api::v1::ExpandPermissionTreeRequest* request, ::authzed::api::v1::ExpandPermissionTreeResponse* response);
    // LookupResources returns all the resources of a given type that a subject
    // can access whether via a computed permission or relation membership.
    virtual ::grpc::Status LookupResources(::grpc::ServerContext* context, const ::authzed::api::v1::LookupResourcesRequest* request, ::grpc::ServerWriter< ::authzed::api::v1::LookupResourcesResponse>* writer);
    // LookupSubjects returns all the subjects of a given type that
    // have access whether via a computed permission or relation membership.
    virtual ::grpc::Status LookupSubjects(::grpc::ServerContext* context, const ::authzed::api::v1::LookupSubjectsRequest* request, ::grpc::ServerWriter< ::authzed::api::v1::LookupSubjectsResponse>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_ReadRelationships : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReadRelationships() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ReadRelationships() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadRelationships(::grpc::ServerContext* /*context*/, const ::authzed::api::v1::ReadRelationshipsRequest* /*request*/, ::grpc::ServerWriter< ::authzed::api::v1::ReadRelationshipsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReadRelationships(::grpc::ServerContext* context, ::authzed::api::v1::ReadRelationshipsRequest* request, ::grpc::ServerAsyncWriter< ::authzed::api::v1::ReadRelationshipsResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_WriteRelationships : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_WriteRelationships() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_WriteRelationships() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteRelationships(::grpc::ServerContext* /*context*/, const ::authzed::api::v1::WriteRelationshipsRequest* /*request*/, ::authzed::api::v1::WriteRelationshipsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWriteRelationships(::grpc::ServerContext* context, ::authzed::api::v1::WriteRelationshipsRequest* request, ::grpc::ServerAsyncResponseWriter< ::authzed::api::v1::WriteRelationshipsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteRelationships : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteRelationships() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_DeleteRelationships() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRelationships(::grpc::ServerContext* /*context*/, const ::authzed::api::v1::DeleteRelationshipsRequest* /*request*/, ::authzed::api::v1::DeleteRelationshipsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteRelationships(::grpc::ServerContext* context, ::authzed::api::v1::DeleteRelationshipsRequest* request, ::grpc::ServerAsyncResponseWriter< ::authzed::api::v1::DeleteRelationshipsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CheckPermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CheckPermission() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_CheckPermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckPermission(::grpc::ServerContext* /*context*/, const ::authzed::api::v1::CheckPermissionRequest* /*request*/, ::authzed::api::v1::CheckPermissionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckPermission(::grpc::ServerContext* context, ::authzed::api::v1::CheckPermissionRequest* request, ::grpc::ServerAsyncResponseWriter< ::authzed::api::v1::CheckPermissionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ExpandPermissionTree : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ExpandPermissionTree() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_ExpandPermissionTree() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExpandPermissionTree(::grpc::ServerContext* /*context*/, const ::authzed::api::v1::ExpandPermissionTreeRequest* /*request*/, ::authzed::api::v1::ExpandPermissionTreeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExpandPermissionTree(::grpc::ServerContext* context, ::authzed::api::v1::ExpandPermissionTreeRequest* request, ::grpc::ServerAsyncResponseWriter< ::authzed::api::v1::ExpandPermissionTreeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_LookupResources : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_LookupResources() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_LookupResources() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LookupResources(::grpc::ServerContext* /*context*/, const ::authzed::api::v1::LookupResourcesRequest* /*request*/, ::grpc::ServerWriter< ::authzed::api::v1::LookupResourcesResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLookupResources(::grpc::ServerContext* context, ::authzed::api::v1::LookupResourcesRequest* request, ::grpc::ServerAsyncWriter< ::authzed::api::v1::LookupResourcesResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(5, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_LookupSubjects : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_LookupSubjects() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_LookupSubjects() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LookupSubjects(::grpc::ServerContext* /*context*/, const ::authzed::api::v1::LookupSubjectsRequest* /*request*/, ::grpc::ServerWriter< ::authzed::api::v1::LookupSubjectsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLookupSubjects(::grpc::ServerContext* context, ::authzed::api::v1::LookupSubjectsRequest* request, ::grpc::ServerAsyncWriter< ::authzed::api::v1::LookupSubjectsResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(6, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ReadRelationships<WithAsyncMethod_WriteRelationships<WithAsyncMethod_DeleteRelationships<WithAsyncMethod_CheckPermission<WithAsyncMethod_ExpandPermissionTree<WithAsyncMethod_LookupResources<WithAsyncMethod_LookupSubjects<Service > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_ReadRelationships : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ReadRelationships() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::authzed::api::v1::ReadRelationshipsRequest, ::authzed::api::v1::ReadRelationshipsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::authzed::api::v1::ReadRelationshipsRequest* request) { return this->ReadRelationships(context, request); }));
    }
    ~WithCallbackMethod_ReadRelationships() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadRelationships(::grpc::ServerContext* /*context*/, const ::authzed::api::v1::ReadRelationshipsRequest* /*request*/, ::grpc::ServerWriter< ::authzed::api::v1::ReadRelationshipsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::authzed::api::v1::ReadRelationshipsResponse>* ReadRelationships(
      ::grpc::CallbackServerContext* /*context*/, const ::authzed::api::v1::ReadRelationshipsRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_WriteRelationships : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_WriteRelationships() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::authzed::api::v1::WriteRelationshipsRequest, ::authzed::api::v1::WriteRelationshipsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::authzed::api::v1::WriteRelationshipsRequest* request, ::authzed::api::v1::WriteRelationshipsResponse* response) { return this->WriteRelationships(context, request, response); }));}
    void SetMessageAllocatorFor_WriteRelationships(
        ::grpc::MessageAllocator< ::authzed::api::v1::WriteRelationshipsRequest, ::authzed::api::v1::WriteRelationshipsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::authzed::api::v1::WriteRelationshipsRequest, ::authzed::api::v1::WriteRelationshipsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_WriteRelationships() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteRelationships(::grpc::ServerContext* /*context*/, const ::authzed::api::v1::WriteRelationshipsRequest* /*request*/, ::authzed::api::v1::WriteRelationshipsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* WriteRelationships(
      ::grpc::CallbackServerContext* /*context*/, const ::authzed::api::v1::WriteRelationshipsRequest* /*request*/, ::authzed::api::v1::WriteRelationshipsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteRelationships : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteRelationships() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::authzed::api::v1::DeleteRelationshipsRequest, ::authzed::api::v1::DeleteRelationshipsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::authzed::api::v1::DeleteRelationshipsRequest* request, ::authzed::api::v1::DeleteRelationshipsResponse* response) { return this->DeleteRelationships(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteRelationships(
        ::grpc::MessageAllocator< ::authzed::api::v1::DeleteRelationshipsRequest, ::authzed::api::v1::DeleteRelationshipsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::authzed::api::v1::DeleteRelationshipsRequest, ::authzed::api::v1::DeleteRelationshipsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteRelationships() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRelationships(::grpc::ServerContext* /*context*/, const ::authzed::api::v1::DeleteRelationshipsRequest* /*request*/, ::authzed::api::v1::DeleteRelationshipsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteRelationships(
      ::grpc::CallbackServerContext* /*context*/, const ::authzed::api::v1::DeleteRelationshipsRequest* /*request*/, ::authzed::api::v1::DeleteRelationshipsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CheckPermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CheckPermission() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::authzed::api::v1::CheckPermissionRequest, ::authzed::api::v1::CheckPermissionResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::authzed::api::v1::CheckPermissionRequest* request, ::authzed::api::v1::CheckPermissionResponse* response) { return this->CheckPermission(context, request, response); }));}
    void SetMessageAllocatorFor_CheckPermission(
        ::grpc::MessageAllocator< ::authzed::api::v1::CheckPermissionRequest, ::authzed::api::v1::CheckPermissionResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::authzed::api::v1::CheckPermissionRequest, ::authzed::api::v1::CheckPermissionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CheckPermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckPermission(::grpc::ServerContext* /*context*/, const ::authzed::api::v1::CheckPermissionRequest* /*request*/, ::authzed::api::v1::CheckPermissionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CheckPermission(
      ::grpc::CallbackServerContext* /*context*/, const ::authzed::api::v1::CheckPermissionRequest* /*request*/, ::authzed::api::v1::CheckPermissionResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ExpandPermissionTree : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ExpandPermissionTree() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::authzed::api::v1::ExpandPermissionTreeRequest, ::authzed::api::v1::ExpandPermissionTreeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::authzed::api::v1::ExpandPermissionTreeRequest* request, ::authzed::api::v1::ExpandPermissionTreeResponse* response) { return this->ExpandPermissionTree(context, request, response); }));}
    void SetMessageAllocatorFor_ExpandPermissionTree(
        ::grpc::MessageAllocator< ::authzed::api::v1::ExpandPermissionTreeRequest, ::authzed::api::v1::ExpandPermissionTreeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::authzed::api::v1::ExpandPermissionTreeRequest, ::authzed::api::v1::ExpandPermissionTreeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ExpandPermissionTree() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExpandPermissionTree(::grpc::ServerContext* /*context*/, const ::authzed::api::v1::ExpandPermissionTreeRequest* /*request*/, ::authzed::api::v1::ExpandPermissionTreeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExpandPermissionTree(
      ::grpc::CallbackServerContext* /*context*/, const ::authzed::api::v1::ExpandPermissionTreeRequest* /*request*/, ::authzed::api::v1::ExpandPermissionTreeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_LookupResources : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_LookupResources() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackServerStreamingHandler< ::authzed::api::v1::LookupResourcesRequest, ::authzed::api::v1::LookupResourcesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::authzed::api::v1::LookupResourcesRequest* request) { return this->LookupResources(context, request); }));
    }
    ~WithCallbackMethod_LookupResources() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LookupResources(::grpc::ServerContext* /*context*/, const ::authzed::api::v1::LookupResourcesRequest* /*request*/, ::grpc::ServerWriter< ::authzed::api::v1::LookupResourcesResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::authzed::api::v1::LookupResourcesResponse>* LookupResources(
      ::grpc::CallbackServerContext* /*context*/, const ::authzed::api::v1::LookupResourcesRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_LookupSubjects : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_LookupSubjects() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackServerStreamingHandler< ::authzed::api::v1::LookupSubjectsRequest, ::authzed::api::v1::LookupSubjectsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::authzed::api::v1::LookupSubjectsRequest* request) { return this->LookupSubjects(context, request); }));
    }
    ~WithCallbackMethod_LookupSubjects() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LookupSubjects(::grpc::ServerContext* /*context*/, const ::authzed::api::v1::LookupSubjectsRequest* /*request*/, ::grpc::ServerWriter< ::authzed::api::v1::LookupSubjectsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::authzed::api::v1::LookupSubjectsResponse>* LookupSubjects(
      ::grpc::CallbackServerContext* /*context*/, const ::authzed::api::v1::LookupSubjectsRequest* /*request*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_ReadRelationships<WithCallbackMethod_WriteRelationships<WithCallbackMethod_DeleteRelationships<WithCallbackMethod_CheckPermission<WithCallbackMethod_ExpandPermissionTree<WithCallbackMethod_LookupResources<WithCallbackMethod_LookupSubjects<Service > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ReadRelationships : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReadRelationships() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ReadRelationships() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadRelationships(::grpc::ServerContext* /*context*/, const ::authzed::api::v1::ReadRelationshipsRequest* /*request*/, ::grpc::ServerWriter< ::authzed::api::v1::ReadRelationshipsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_WriteRelationships : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_WriteRelationships() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_WriteRelationships() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteRelationships(::grpc::ServerContext* /*context*/, const ::authzed::api::v1::WriteRelationshipsRequest* /*request*/, ::authzed::api::v1::WriteRelationshipsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteRelationships : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteRelationships() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_DeleteRelationships() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRelationships(::grpc::ServerContext* /*context*/, const ::authzed::api::v1::DeleteRelationshipsRequest* /*request*/, ::authzed::api::v1::DeleteRelationshipsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CheckPermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CheckPermission() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_CheckPermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckPermission(::grpc::ServerContext* /*context*/, const ::authzed::api::v1::CheckPermissionRequest* /*request*/, ::authzed::api::v1::CheckPermissionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ExpandPermissionTree : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ExpandPermissionTree() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_ExpandPermissionTree() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExpandPermissionTree(::grpc::ServerContext* /*context*/, const ::authzed::api::v1::ExpandPermissionTreeRequest* /*request*/, ::authzed::api::v1::ExpandPermissionTreeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_LookupResources : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_LookupResources() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_LookupResources() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LookupResources(::grpc::ServerContext* /*context*/, const ::authzed::api::v1::LookupResourcesRequest* /*request*/, ::grpc::ServerWriter< ::authzed::api::v1::LookupResourcesResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_LookupSubjects : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_LookupSubjects() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_LookupSubjects() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LookupSubjects(::grpc::ServerContext* /*context*/, const ::authzed::api::v1::LookupSubjectsRequest* /*request*/, ::grpc::ServerWriter< ::authzed::api::v1::LookupSubjectsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReadRelationships : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReadRelationships() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ReadRelationships() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadRelationships(::grpc::ServerContext* /*context*/, const ::authzed::api::v1::ReadRelationshipsRequest* /*request*/, ::grpc::ServerWriter< ::authzed::api::v1::ReadRelationshipsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReadRelationships(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_WriteRelationships : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_WriteRelationships() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_WriteRelationships() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteRelationships(::grpc::ServerContext* /*context*/, const ::authzed::api::v1::WriteRelationshipsRequest* /*request*/, ::authzed::api::v1::WriteRelationshipsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWriteRelationships(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteRelationships : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteRelationships() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_DeleteRelationships() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRelationships(::grpc::ServerContext* /*context*/, const ::authzed::api::v1::DeleteRelationshipsRequest* /*request*/, ::authzed::api::v1::DeleteRelationshipsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteRelationships(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CheckPermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CheckPermission() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_CheckPermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckPermission(::grpc::ServerContext* /*context*/, const ::authzed::api::v1::CheckPermissionRequest* /*request*/, ::authzed::api::v1::CheckPermissionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckPermission(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ExpandPermissionTree : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ExpandPermissionTree() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_ExpandPermissionTree() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExpandPermissionTree(::grpc::ServerContext* /*context*/, const ::authzed::api::v1::ExpandPermissionTreeRequest* /*request*/, ::authzed::api::v1::ExpandPermissionTreeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExpandPermissionTree(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_LookupResources : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_LookupResources() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_LookupResources() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LookupResources(::grpc::ServerContext* /*context*/, const ::authzed::api::v1::LookupResourcesRequest* /*request*/, ::grpc::ServerWriter< ::authzed::api::v1::LookupResourcesResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLookupResources(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(5, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_LookupSubjects : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_LookupSubjects() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_LookupSubjects() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LookupSubjects(::grpc::ServerContext* /*context*/, const ::authzed::api::v1::LookupSubjectsRequest* /*request*/, ::grpc::ServerWriter< ::authzed::api::v1::LookupSubjectsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLookupSubjects(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(6, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ReadRelationships : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ReadRelationships() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->ReadRelationships(context, request); }));
    }
    ~WithRawCallbackMethod_ReadRelationships() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadRelationships(::grpc::ServerContext* /*context*/, const ::authzed::api::v1::ReadRelationshipsRequest* /*request*/, ::grpc::ServerWriter< ::authzed::api::v1::ReadRelationshipsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* ReadRelationships(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_WriteRelationships : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_WriteRelationships() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->WriteRelationships(context, request, response); }));
    }
    ~WithRawCallbackMethod_WriteRelationships() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteRelationships(::grpc::ServerContext* /*context*/, const ::authzed::api::v1::WriteRelationshipsRequest* /*request*/, ::authzed::api::v1::WriteRelationshipsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* WriteRelationships(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteRelationships : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteRelationships() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteRelationships(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteRelationships() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRelationships(::grpc::ServerContext* /*context*/, const ::authzed::api::v1::DeleteRelationshipsRequest* /*request*/, ::authzed::api::v1::DeleteRelationshipsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteRelationships(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CheckPermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CheckPermission() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CheckPermission(context, request, response); }));
    }
    ~WithRawCallbackMethod_CheckPermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckPermission(::grpc::ServerContext* /*context*/, const ::authzed::api::v1::CheckPermissionRequest* /*request*/, ::authzed::api::v1::CheckPermissionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CheckPermission(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ExpandPermissionTree : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ExpandPermissionTree() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ExpandPermissionTree(context, request, response); }));
    }
    ~WithRawCallbackMethod_ExpandPermissionTree() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExpandPermissionTree(::grpc::ServerContext* /*context*/, const ::authzed::api::v1::ExpandPermissionTreeRequest* /*request*/, ::authzed::api::v1::ExpandPermissionTreeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExpandPermissionTree(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_LookupResources : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_LookupResources() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->LookupResources(context, request); }));
    }
    ~WithRawCallbackMethod_LookupResources() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LookupResources(::grpc::ServerContext* /*context*/, const ::authzed::api::v1::LookupResourcesRequest* /*request*/, ::grpc::ServerWriter< ::authzed::api::v1::LookupResourcesResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* LookupResources(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_LookupSubjects : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_LookupSubjects() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->LookupSubjects(context, request); }));
    }
    ~WithRawCallbackMethod_LookupSubjects() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LookupSubjects(::grpc::ServerContext* /*context*/, const ::authzed::api::v1::LookupSubjectsRequest* /*request*/, ::grpc::ServerWriter< ::authzed::api::v1::LookupSubjectsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* LookupSubjects(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_WriteRelationships : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_WriteRelationships() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::authzed::api::v1::WriteRelationshipsRequest, ::authzed::api::v1::WriteRelationshipsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::authzed::api::v1::WriteRelationshipsRequest, ::authzed::api::v1::WriteRelationshipsResponse>* streamer) {
                       return this->StreamedWriteRelationships(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_WriteRelationships() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status WriteRelationships(::grpc::ServerContext* /*context*/, const ::authzed::api::v1::WriteRelationshipsRequest* /*request*/, ::authzed::api::v1::WriteRelationshipsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedWriteRelationships(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::authzed::api::v1::WriteRelationshipsRequest,::authzed::api::v1::WriteRelationshipsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteRelationships : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteRelationships() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::authzed::api::v1::DeleteRelationshipsRequest, ::authzed::api::v1::DeleteRelationshipsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::authzed::api::v1::DeleteRelationshipsRequest, ::authzed::api::v1::DeleteRelationshipsResponse>* streamer) {
                       return this->StreamedDeleteRelationships(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteRelationships() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteRelationships(::grpc::ServerContext* /*context*/, const ::authzed::api::v1::DeleteRelationshipsRequest* /*request*/, ::authzed::api::v1::DeleteRelationshipsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteRelationships(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::authzed::api::v1::DeleteRelationshipsRequest,::authzed::api::v1::DeleteRelationshipsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CheckPermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CheckPermission() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::authzed::api::v1::CheckPermissionRequest, ::authzed::api::v1::CheckPermissionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::authzed::api::v1::CheckPermissionRequest, ::authzed::api::v1::CheckPermissionResponse>* streamer) {
                       return this->StreamedCheckPermission(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CheckPermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CheckPermission(::grpc::ServerContext* /*context*/, const ::authzed::api::v1::CheckPermissionRequest* /*request*/, ::authzed::api::v1::CheckPermissionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCheckPermission(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::authzed::api::v1::CheckPermissionRequest,::authzed::api::v1::CheckPermissionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ExpandPermissionTree : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ExpandPermissionTree() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::authzed::api::v1::ExpandPermissionTreeRequest, ::authzed::api::v1::ExpandPermissionTreeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::authzed::api::v1::ExpandPermissionTreeRequest, ::authzed::api::v1::ExpandPermissionTreeResponse>* streamer) {
                       return this->StreamedExpandPermissionTree(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ExpandPermissionTree() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ExpandPermissionTree(::grpc::ServerContext* /*context*/, const ::authzed::api::v1::ExpandPermissionTreeRequest* /*request*/, ::authzed::api::v1::ExpandPermissionTreeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedExpandPermissionTree(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::authzed::api::v1::ExpandPermissionTreeRequest,::authzed::api::v1::ExpandPermissionTreeResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_WriteRelationships<WithStreamedUnaryMethod_DeleteRelationships<WithStreamedUnaryMethod_CheckPermission<WithStreamedUnaryMethod_ExpandPermissionTree<Service > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_ReadRelationships : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_ReadRelationships() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::authzed::api::v1::ReadRelationshipsRequest, ::authzed::api::v1::ReadRelationshipsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::authzed::api::v1::ReadRelationshipsRequest, ::authzed::api::v1::ReadRelationshipsResponse>* streamer) {
                       return this->StreamedReadRelationships(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_ReadRelationships() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReadRelationships(::grpc::ServerContext* /*context*/, const ::authzed::api::v1::ReadRelationshipsRequest* /*request*/, ::grpc::ServerWriter< ::authzed::api::v1::ReadRelationshipsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedReadRelationships(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::authzed::api::v1::ReadRelationshipsRequest,::authzed::api::v1::ReadRelationshipsResponse>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_LookupResources : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_LookupResources() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::authzed::api::v1::LookupResourcesRequest, ::authzed::api::v1::LookupResourcesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::authzed::api::v1::LookupResourcesRequest, ::authzed::api::v1::LookupResourcesResponse>* streamer) {
                       return this->StreamedLookupResources(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_LookupResources() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status LookupResources(::grpc::ServerContext* /*context*/, const ::authzed::api::v1::LookupResourcesRequest* /*request*/, ::grpc::ServerWriter< ::authzed::api::v1::LookupResourcesResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedLookupResources(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::authzed::api::v1::LookupResourcesRequest,::authzed::api::v1::LookupResourcesResponse>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_LookupSubjects : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_LookupSubjects() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::authzed::api::v1::LookupSubjectsRequest, ::authzed::api::v1::LookupSubjectsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::authzed::api::v1::LookupSubjectsRequest, ::authzed::api::v1::LookupSubjectsResponse>* streamer) {
                       return this->StreamedLookupSubjects(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_LookupSubjects() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status LookupSubjects(::grpc::ServerContext* /*context*/, const ::authzed::api::v1::LookupSubjectsRequest* /*request*/, ::grpc::ServerWriter< ::authzed::api::v1::LookupSubjectsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedLookupSubjects(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::authzed::api::v1::LookupSubjectsRequest,::authzed::api::v1::LookupSubjectsResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_ReadRelationships<WithSplitStreamingMethod_LookupResources<WithSplitStreamingMethod_LookupSubjects<Service > > > SplitStreamedService;
  typedef WithSplitStreamingMethod_ReadRelationships<WithStreamedUnaryMethod_WriteRelationships<WithStreamedUnaryMethod_DeleteRelationships<WithStreamedUnaryMethod_CheckPermission<WithStreamedUnaryMethod_ExpandPermissionTree<WithSplitStreamingMethod_LookupResources<WithSplitStreamingMethod_LookupSubjects<Service > > > > > > > StreamedService;
};

}  // namespace v1
}  // namespace api
}  // namespace authzed


#endif  // GRPC_authzed_2fapi_2fv1_2fpermission_5fservice_2eproto__INCLUDED
